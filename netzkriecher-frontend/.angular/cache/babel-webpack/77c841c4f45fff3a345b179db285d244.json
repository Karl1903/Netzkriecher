{"ast":null,"code":"import _asyncToGenerator from \"C:/Dev/Angular/netzkriecher-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { graphic } from 'echarts';\nimport * as data from '../../../assets/tagesschauNew.json';\nimport { NodeInfoComponent } from 'src/app/node-info/node-info.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/website.service\";\n\nfunction SimplegraphComponent_li_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const website_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", website_r1, \" \");\n  }\n}\n/*\r\nconsiderations for node placement:\r\n- for first layer: for all childs of root, sum up all their children. Then try to find a configuration,\r\nwhere the 'center of mass' is at the root node. (adding up vectors * weight should equal 0 at the end)\r\n- might not work, because a valid strategy for that would also be to just dump all of the nodes at opposite ends\r\n\r\n- after finishing a whole depth layer, there might be a lot of space left unoccupied in that layer\r\n- the childnoderanges for the layer before could be accordingly ajusted to use up the whole 360°\r\n- (or atleast space them out more)\r\n\r\n*/\n\n\nexport class SimplegraphComponent {\n  constructor(websiteService) {\n    this.websiteService = websiteService;\n    this.totalWidth = 1000;\n    this.halfWidth = 500;\n    this.totalHeight = 1000;\n    this.halfHeight = 500;\n    this.nodeSizeFalloff = 200;\n    this.radiusPerIteration = 100;\n    this.websiteNameForGraph = \"\";\n    this.websiteNameForCrawler = \"\";\n    this.loading = false;\n    this.crawledWebsiteID = 2;\n    this.nodeConnectionStyle = {\n      curveness: 0,\n      width: 1,\n      color: 'grey',\n      opacity: 0.8,\n      type: 'dashed',\n      cap: 'square',\n      join: 'bevel',\n      dashOffset: 10,\n      miterLimit: 10\n    };\n    this.domChildConnectionStyle = {\n      curveness: 0,\n      width: 2,\n      color: 'blue',\n      opacity: 0.8,\n      type: 'solid',\n      cap: 'square',\n      join: 'bevel',\n      dashOffset: 10,\n      miterLimit: 10\n    };\n    this.selectedNodeName = \"\"; //initTestData() : Map<string, NodeFromJson>\n\n    this.domConnectionsActive = true;\n    this.allConnectionsActive = false;\n    this.labelsActive = false;\n  }\n  /*\r\n  ngOnInit(): void\r\n  {\r\n    this.prepareGraph();\r\n    this.showGraph();\r\n  }*/\n\n\n  remap(n, oldFrom, oldTo, newFrom, newTo) {\n    let oldRange = oldTo - oldFrom;\n    let proportion = (n - oldFrom) / oldRange;\n    let newRange = newTo - newFrom;\n    return newFrom + newRange * proportion;\n  }\n\n  calculatePosition(depth, index, total, rangeFrom, rangeTo) {\n    let radians = total == 1 ? 0.5 * 2 * Math.PI : index / total * 2 * Math.PI;\n    let radiansRemapped = this.remap(radians, 0, Math.PI * 2, rangeFrom, rangeTo);\n    let x = Math.cos(radiansRemapped) * depth * this.radiusPerIteration;\n    let y = Math.sin(radiansRemapped) * depth * this.radiusPerIteration;\n    let pos = new V2(x, y);\n    return this.calculateOffset(pos);\n  }\n\n  calculateOffset(pos) {\n    return new V2(pos.x + this.halfWidth, pos.y + this.halfHeight);\n  }\n\n  getSymbolSize(currentDepth) {\n    return 20 - currentDepth * 3;\n  }\n\n  symbolCallback(rawValue, params) {\n    console.log(\"Test\");\n    return 1;\n  }\n\n  calculatePositions(website, root) {\n    let data = [];\n    let linkData = [];\n    let rootPosition = this.calculatePosition(0, 1, 1, root.rangeFrom, root.rangeTo);\n    let rootNodeOptions = {\n      name: root.url,\n      x: rootPosition.x,\n      y: rootPosition.y,\n      category: 'root',\n      symbol: 'circle',\n      symbolSize: this.getSymbolSize(root.depth)\n    };\n    data.push(rootNodeOptions);\n    let visited = [];\n    let queue = [];\n    queue.push(root);\n\n    while (queue.length > 0) {\n      let currentNode = queue.shift();\n      visited.push(currentNode);\n      let domChilds = currentNode.domChilds;\n      let radiansPerChild = (currentNode.rangeTo - currentNode.rangeFrom) / domChilds.length;\n      let currentRadians = 0;\n\n      for (let i = 0; i < domChilds.length; i++) {\n        let n = website.map.get(domChilds[i]); //show links to domChilds\n\n        if (this.domConnectionsActive) {\n          let label = {\n            position: 'start',\n            distance: 10\n          };\n          let doubleSided = false;\n          /*\r\n          n.internal_links.forEach(element => {\r\n            if(element == currentNode.url)\r\n            {\r\n              doubleSided = true;\r\n            }\r\n          });\r\n          */\n\n          let symbol = [];\n          let symbolSize = [];\n\n          if (doubleSided) {\n            symbol = ['arrow', 'arrow'];\n            symbolSize = [10, 10];\n          } else {\n            symbol = ['none', 'arrow'];\n            symbolSize = [0, 10];\n          }\n\n          let graphEdgeOption = {\n            lineStyle: this.domChildConnectionStyle,\n            label: label,\n            source: currentNode.url,\n            target: n.url,\n            symbol: symbol,\n            symbolSize: symbolSize,\n            value: 3\n          };\n          linkData.push(graphEdgeOption);\n        }\n\n        if (!visited.includes(n)) {\n          //let domName = n.getDOMStripedName();\n          let nodePosition = this.calculatePosition(n.depth, i, domChilds.length, currentNode.rangeFrom, currentNode.rangeTo);\n          let nodeItemOptions = {\n            name: n.url,\n            x: nodePosition.x,\n            y: nodePosition.y,\n            category: 'not root',\n            draggable: true,\n            symbol: 'circle',\n            symbolSize: this.getSymbolSize(n.depth),\n            symbolOffset: 0,\n            symbolRotate: this.symbolCallback(\"\", \"\")\n          };\n          data.push(nodeItemOptions);\n          n.rangeFrom = currentNode.rangeFrom + currentRadians - radiansPerChild * 0.5;\n          currentRadians += radiansPerChild;\n          n.rangeTo = currentNode.rangeFrom + currentRadians - radiansPerChild * 0.5;\n          queue.push(n);\n        }\n      }\n    }\n\n    if (this.selectedNodeName != \"\") {\n      let node = website.map.get(this.selectedNodeName);\n\n      for (let i = 0; i < node.intLinks.length; i++) {\n        //let n = website.map.get(linksInternal[i]) as NodeFromJson;\n        let label = {\n          position: 'start',\n          distance: 10\n        };\n        let doubleSided = false;\n        /*\r\n                n.intLinks.forEach(element => {\r\n                  if(element == currentNode.url)\r\n                  {\r\n                    doubleSided = true;\r\n                  }\r\n                });\r\n        */\n\n        let symbol = [];\n        let symbolSize = [];\n\n        if (doubleSided) {\n          symbol = ['arrow', 'arrow'];\n          symbolSize = [10, 10];\n        } else {\n          symbol = ['none', 'arrow'];\n          symbolSize = [0, 10];\n        }\n\n        let graphEdgeOption = {\n          lineStyle: this.nodeConnectionStyle,\n          label: label,\n          source: node.url,\n          target: node.intLinks[i],\n          symbol: symbol,\n          symbolSize: symbolSize,\n          value: 3\n        };\n        linkData.push(graphEdgeOption);\n      }\n    }\n\n    let graphData = new GraphData(data, linkData);\n    return graphData;\n  }\n\n  onChartMouseOver(ec) {//console.log(\"hover on \" + ec.name);\n  }\n\n  onChartClick(ec) {\n    let n = this.website.map.get(ec.name);\n\n    if (n != undefined) {\n      this.selectedNodeName = n.url;\n      this.prepareGraph();\n      this.showGraph();\n      this.host.node = n;\n      this.host.nodeName = n.url;\n      this.showIntMedia(n.intMedia);\n      return;\n    }\n  }\n\n  showAllConnections() {\n    this.allConnectionsActive = !this.allConnectionsActive;\n    this.prepareGraph();\n    this.showGraph();\n  }\n\n  showConnections() {\n    this.domConnectionsActive = !this.domConnectionsActive;\n    this.showGraph();\n  }\n\n  showLabels() {\n    this.labelsActive = !this.labelsActive;\n    this.showGraph();\n  }\n\n  deselectAll() {\n    this.showIntMedia(this.website.internalMedia);\n  }\n\n  prepareWebsite(name) {\n    let dictElements = JSON.parse(JSON.stringify(data));\n    let nodeMap = new Map();\n    let mediaIntGlobal = [];\n\n    for (let index = 0; index < dictElements.length; index++) {\n      const element = dictElements[index];\n      let n = new NodeFromJson();\n\n      if (element.url == undefined) {\n        continue;\n      }\n\n      n.url = element.url;\n      n.parentDocId = element.parentDocId;\n      n.docId = element.docId;\n      n.extMedia = element['link:ext:media'];\n      n.intMedia = element['link:int:media'];\n      n.extLinks = element['link:ext'];\n      n.intLinks = element['link:int'];\n      n.getDepth();\n      n.getDOMParent();\n\n      if (n.depth >= 0) {\n        nodeMap.set(n.url, n);\n      }\n    }\n\n    nodeMap.forEach((node, key) => {\n      if (node.domParent != \"\") {\n        let parent = nodeMap.get(node.domParent);\n\n        if (parent != undefined) {\n          parent.domChilds.push(key);\n        }\n      }\n    });\n    let website = new WebsiteMap(name, nodeMap, mediaIntGlobal);\n    console.log(\"Website Node nach dem Init View:\", website);\n    return website;\n  }\n\n  mapTo2DMap(media) {\n    let ret = [];\n    let rowDict = [];\n    let column = 0;\n    media.forEach(url => {\n      rowDict.push(url);\n      column++;\n\n      if (column > 5) {\n        column = 0;\n        ret.push(rowDict);\n        rowDict = [];\n      }\n    });\n    console.log(ret);\n    return ret;\n  }\n\n  showIntMedia(media) {\n    let transformed = this.mapTo2DMap(media);\n    this.host.images = transformed;\n  }\n  /**\r\n   * The method fetches, saves and prepares the data for the Creation of the Website Graph. Approximately 200 Nodes,\r\n   * that were crawled by the Worker and saved into Redis, get fetched. The data is saved into dictionaries, adapting to\r\n   * the Data structure that was created in the Backend. Finally, the Nodes for the Graph are created.\r\n   */\n\n\n  initRealData() {\n    /*\r\n    let nodeMap : Map<string, NodeFromJson> = new Map<string, NodeFromJson>();\r\n    this.loading = true;\r\n    this.errorMessage = \"\";\r\n    this.websiteService.getWebsiteNodes(this.websiteNameForGraph)\r\n      .subscribe(\r\n        response => {                           //next() callback\r\n          console.log('response received')\r\n          //this.websites = response;\r\n          let dictElements : {[index:string] : string}[] = JSON.parse(JSON.stringify(response))\r\n     \r\n          for (let index = 0; index < dictElements.length; index++) {\r\n            const element  : {[index:string] : string} = dictElements[index];\r\n      \r\n            let pdi : string = \"\";\r\n            let di : string = \"\";\r\n            let url : string = \"\";\r\n            let linksInt : string[] = [];\r\n            let mediaInt : string[] = [];\r\n            let linksExt : string[] = [];\r\n            let mediaExt : string[] = [];\r\n      \r\n            Object.entries(element).forEach(\r\n              ([key, value]) =>\r\n              {\r\n                if(key.includes('parentDocId'))\r\n                {\r\n                  pdi = value;\r\n                }\r\n                else if(key.includes('docId'))\r\n                {\r\n                  di = value;\r\n                }\r\n                else if(key.includes(':int:media:'))\r\n                {\r\n                  mediaInt.push(value);\r\n                }\r\n                else if(key.includes(':int:'))\r\n                {\r\n                  linksInt.push(value);\r\n                }\r\n                else if(key.includes(':ext:media:'))\r\n                {\r\n                  mediaExt.push(value);\r\n                }\r\n                else if(key.includes(':ext:'))\r\n                {\r\n                  linksExt.push(value);\r\n                }\r\n                else if(key.includes('url'))\r\n                {\r\n                  url = value;\r\n                }\r\n                \r\n              }\r\n            );\r\n            \r\n            let n : NodeFromJson = new NodeFromJson();\r\n            n.url = url;\r\n            n.parentDocId = pdi;\r\n            n.docId = di;\r\n            n.extMedia = mediaExt;\r\n            n.intMedia = mediaInt;\r\n            n.extLinks = linksExt;\r\n            n.intLinks = linksInt;\r\n      \r\n            n.getDepth();\r\n            n.getDOMParent();\r\n            if(n.depth >= 0)\r\n            {\r\n              nodeMap.set(n.url, n);\r\n            }\r\n          }\r\n      \r\n          nodeMap.forEach((node: NodeFromJson, key: string) =>\r\n          {\r\n            if(node.domParent != \"\")\r\n            {\r\n              let parent = nodeMap.get(node.domParent);\r\n              if(parent != undefined)\r\n              {\r\n                parent.domChilds.push(key);\r\n              }\r\n            }\r\n          });\r\n        console.log(\"NodeMap: \")\r\n        console.log(nodeMap)\r\n        console.log(\"End reached\")\r\n        this.nodeMap = nodeMap;\r\n      \r\n        },\r\n        (error) => {                              //error() callback\r\n          console.error('Request failed with error')\r\n          this.errorMessage = error;\r\n          this.loading = false;\r\n        },\r\n        () => {                                   //complete() callback\r\n          console.error('Request completed')      //This is actually not needed\r\n          this.loading = false;\r\n        })\r\n        */\n\n    return _asyncToGenerator(function* () {})();\n  }\n  /**\r\n   * The User tells the Server which Website it should crawl next, so a Graph can be vusialized later on for\r\n   * this Website. The POST-Request to the Server is initialized and the Answer of the Server is read and told\r\n   * to the User. For that purpose, the crawlWebsite-Method returns an Observable which is subscribed upon.\r\n   */\n\n\n  addWebsiteToCrawler() {\n    this.crawledWebsiteID++;\n    this.websiteService.crawlWebsite(this.websiteNameForCrawler, this.crawledWebsiteID).subscribe({\n      next: data => {\n        this.postId = data.id;\n        console.log(data);\n        alert(data.body[0].toString() + \" is now starting to get crawled!\");\n      },\n      error: error => {\n        this.errorMessage = error.error;\n        console.error('There was an error!', error);\n        alert(this.errorMessage);\n      }\n    });\n  }\n  /**Restart Crawler in the Worker */\n\n\n  crawlNewWebsites() {\n    this.websiteService.startNewCrawlers().subscribe({\n      next: data => {\n        this.postId = data.id;\n        console.log(data);\n      },\n      error: error => {\n        this.errorMessage = error.error;\n        console.error('There was an error!', error);\n        alert(this.errorMessage);\n      }\n    });\n  }\n\n  getCrawledWebsites() {\n    this.loading = true;\n    this.errorMessage = \"\";\n    this.websiteService.getCrawledWebsites().subscribe(response => {\n      console.log('response received');\n      this.crawledWebsites = response;\n    }, error => {\n      console.error('Request failed with error');\n      this.errorMessage = error;\n      this.loading = false;\n    }, () => {\n      console.error('Request completed'); //This is actually not needed \n\n      this.loading = false;\n    });\n  }\n\n  ngOnInit() {\n    this.getCrawledWebsites();\n    this.prepareGraph();\n    this.showGraph();\n  }\n\n  getWebsiteGraph() {\n    //prepare Website-Method with Rest Call ->\n    let nodeMap = new Map();\n    this.loading = true;\n    this.errorMessage = \"\";\n    this.websiteService.getWebsiteNodes(this.websiteNameForGraph).subscribe(data => {\n      console.log('response received');\n      let dictElements = JSON.parse(JSON.stringify(data));\n      let mediaIntGlobal = [];\n\n      for (let index = 0; index < dictElements.length; index++) {\n        const element = dictElements[index];\n        let n = new NodeFromJson();\n\n        if (element.url == undefined) {\n          continue;\n        }\n\n        n.url = element.url;\n        n.parentDocId = element.parentDocId;\n        n.docId = element.docId;\n        n.extMedia = element['link:ext:media'];\n        n.intMedia = element['link:int:media'];\n        n.extLinks = element['link:ext'];\n        n.intLinks = element['link:int'];\n        n.getDepth();\n        n.getDOMParent();\n\n        if (n.depth >= 0) {\n          nodeMap.set(n.url, n);\n        }\n      }\n\n      nodeMap.forEach((node, key) => {\n        if (node.domParent != \"\") {\n          let parent = nodeMap.get(node.domParent);\n\n          if (parent != undefined) {\n            parent.domChilds.push(key);\n          }\n        }\n      });\n      this.website = new WebsiteMap(this.websiteNameForGraph, nodeMap, mediaIntGlobal);\n      console.log(\"Website Node nach dem Click:\", this.website); //prepareWebsite-Method ->\n\n      let root = this.website.map.get(\"https://www.\" + this.websiteNameForGraph + \"/\");\n      let img = document.getElementById(\"img\");\n      img === null || img === void 0 ? void 0 : img.setAttribute(\"src\", '../../assets/Images/NodeTest.png');\n      this.graphData = this.calculatePositions(this.website, root);\n      let text = new graphic.Text();\n      text.style.text = \"Hello\"; //ShowGraph-Method ->\n\n      let graphSeriesOptions = {\n        cursor: 'hand',\n        colorBy: 'data',\n        hoverLayerThreshold: 10,\n        selectedMode: 'multiple',\n        name: 'Sitemap',\n        type: 'graph',\n        //coordinateSystem: 'none',\n        legendHoverLink: false,\n        layout: 'none',\n        nodes: this.graphData.nodeData,\n        edges: this.graphData.linkData,\n        draggable: false,\n        roam: true,\n        color: '#DF4477',\n        nodeScaleRatio: 0.6,\n        label: {\n          fontStyle: 'normal',\n          show: this.labelsActive,\n          color: 'black',\n          overflow: 'truncate',\n          tag: '!!!!!!'\n        },\n        itemStyle: {\n          opacity: 1,\n          //color :  'red'\n\n          /*\r\n          color :\r\n          {\r\n            svgElement : svgElement,\r\n            svgWidth : 10,\r\n            svgHeight : 10,\r\n            type : 'pattern',\r\n            x : 1,\r\n            y : 1,\r\n            rotation : 0,\r\n            scaleX : 1,\r\n            scaleY : 1\r\n          }\r\n          */\n          //RADIAL GRADIENT\n          color: {\n            type: 'radial',\n            x: 0.5,\n            y: 0.5,\n            r: 0.5,\n            colorStops: [{\n              offset: 0.0,\n              color: 'red'\n            }, {\n              offset: 1.0,\n              color: 'purple'\n            }],\n            global: false\n          }\n          /*\r\n          //LINEAR GRADIENT\r\n          color:\r\n          {\r\n            {\r\n            type : 'linear',\r\n            x : 0.1,\r\n            y : 1,\r\n            x2 : 0.3,\r\n            y2 : 1,\r\n            colorStops : [\r\n              {\r\n                offset : 0.3,\r\n                color : 'red'\r\n              },\r\n              {\r\n                offset : 0.7,\r\n                color : 'blue'\r\n              }]\r\n            }\r\n          }\r\n          */\n\n          /*\r\n          color :\r\n          {\r\n            image : img,\r\n            repeat : 'repeat'\r\n          }\r\n          */\n\n        },\n        lineStyle: {\n          curveness: 1\n        },\n        emphasis: {\n          scale: false,\n          label: {\n            show: true,\n            rotate: 0,\n            valueAnimation: true,\n            color: 'red',\n            fontStyle: 'normal',\n            fontWeight: 'bolder',\n            backgroundColor: 'blue',\n            height: 20\n          }\n        },\n        select: {\n          label: {\n            color: 'green'\n          }\n        }\n      };\n      this.options = {\n        title: {\n          text: this.website.name\n        },\n        tooltip: {},\n        animationDurationUpdate: 1500,\n        animationEasingUpdate: 'quinticInOut',\n        series: [graphSeriesOptions]\n      };\n      let map = graphSeriesOptions.selectedMap;\n    });\n  }\n\n  prepareGraph() {\n    this.website = this.prepareWebsite(\"Tagesschau.de\");\n    let root = this.website.map.get(\"https://www.tagesschau.de/\");\n    let img = document.getElementById(\"img\");\n    img === null || img === void 0 ? void 0 : img.setAttribute(\"src\", '../../assets/Images/NodeTest.png');\n    this.graphData = this.calculatePositions(this.website, root);\n    let text = new graphic.Text();\n    text.style.text = \"Hello\";\n  }\n\n  showGraph() {\n    let edges = this.domConnectionsActive ? this.graphData.linkData : undefined;\n    let graphSeriesOptions = {\n      cursor: 'hand',\n      colorBy: 'data',\n      hoverLayerThreshold: 10,\n      selectedMode: 'multiple',\n      name: 'Sitemap',\n      type: 'graph',\n      //coordinateSystem: 'none',\n      legendHoverLink: false,\n      layout: 'none',\n      nodes: this.graphData.nodeData,\n      edges: edges,\n      draggable: false,\n      roam: true,\n      color: '#DF4477',\n      nodeScaleRatio: 0.6,\n      label: {\n        fontStyle: 'normal',\n        show: this.labelsActive,\n        color: 'black',\n        overflow: 'truncate',\n        tag: '!!!!!!'\n      },\n      itemStyle: {\n        opacity: 1,\n        //color :  'red'\n\n        /*\r\n        color :\r\n        {\r\n          svgElement : svgElement,\r\n          svgWidth : 10,\r\n          svgHeight : 10,\r\n          type : 'pattern',\r\n          x : 1,\r\n          y : 1,\r\n          rotation : 0,\r\n          scaleX : 1,\r\n          scaleY : 1\r\n        }\r\n        */\n        //RADIAL GRADIENT\n        color: {\n          type: 'radial',\n          x: 0.5,\n          y: 0.5,\n          r: 0.5,\n          colorStops: [{\n            offset: 0.0,\n            color: 'red'\n          }, {\n            offset: 1.0,\n            color: 'purple'\n          }],\n          global: false\n        }\n        /*\r\n        //LINEAR GRADIENT\r\n        color:\r\n        {\r\n          {\r\n          type : 'linear',\r\n          x : 0.1,\r\n          y : 1,\r\n          x2 : 0.3,\r\n          y2 : 1,\r\n          colorStops : [\r\n            {\r\n              offset : 0.3,\r\n              color : 'red'\r\n            },\r\n            {\r\n              offset : 0.7,\r\n              color : 'blue'\r\n            }]\r\n          }\r\n        }\r\n        */\n\n        /*\r\n        color :\r\n        {\r\n          image : img,\r\n          repeat : 'repeat'\r\n        }\r\n        */\n\n      },\n      lineStyle: {\n        curveness: 1\n      },\n      emphasis: {\n        scale: false,\n        label: {\n          show: true,\n          rotate: 0,\n          valueAnimation: true,\n          color: 'red',\n          fontStyle: 'normal',\n          fontWeight: 'bolder',\n          backgroundColor: 'blue',\n          height: 20\n        }\n      },\n      select: {\n        label: {\n          color: 'green'\n        }\n      }\n    };\n    this.options = {\n      title: {\n        text: this.website.name\n      },\n      tooltip: {},\n      animationDurationUpdate: 1500,\n      animationEasingUpdate: 'quinticInOut',\n      series: [graphSeriesOptions]\n    };\n    let map = graphSeriesOptions.selectedMap;\n  }\n  /**\r\n   * The User tells the Server which Website it should crawl next, so a Graph can be vusialized later on for\r\n   * this Website. The POST-Request to the Server is initialized and the Answer of the Server is read and told\r\n   * to the User. For that purpose, the crawlWebsite-Method returns an Observable which is subscribed upon.\r\n   */\n\n\n  crawlWebsite() {\n    this.crawledWebsiteID++;\n    this.websiteService.crawlWebsite(this.websiteNameForCrawler, this.crawledWebsiteID).subscribe({\n      next: data => {\n        this.postId = data.id;\n        console.log(data);\n        alert(data.body[0].toString() + \" is now starting to get crawled!\");\n        this.getCrawledWebsites();\n      },\n      error: error => {\n        this.errorMessage = error.error;\n        console.error('There was an error!', error);\n        alert(this.errorMessage);\n      }\n    });\n  }\n\n  ngAfterViewInit() {\n    console.log(\"NODEINFO?\", this.host);\n  }\n\n}\n\nSimplegraphComponent.ɵfac = function SimplegraphComponent_Factory(t) {\n  return new (t || SimplegraphComponent)(i0.ɵɵdirectiveInject(i1.WebsiteService));\n};\n\nSimplegraphComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: SimplegraphComponent,\n  selectors: [[\"app-simplegraph\"]],\n  viewQuery: function SimplegraphComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(NodeInfoComponent, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.host = _t.first);\n    }\n  },\n  decls: 29,\n  vars: 4,\n  consts: [[1, \"clearfix\"], [1, \"headerOption\"], [\"for\", \"websiteNameForGraph\"], [\"type\", \"text\", \"name\", \"websiteNameForGraph\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"color\", \"#800080\", \"text\", \"Create Website Graph\", 3, \"click\"], [1, \"outer\"], [1, \"header\"], [\"fontSize\", \"8pt\", \"color\", \"#666\", \"toggle\", \"\", \"toggleColor\", \"#333\", \"text\", \"Deselect All\", 1, \"headerOption\", 3, \"btnClick\"], [\"fontSize\", \"8pt\", \"color\", \"#666\", \"toggle\", \"\", \"toggleColor\", \"#333\", \"text\", \"Show DOM-Connections\", 1, \"headerOption\", 3, \"btnClick\"], [\"fontSize\", \"8pt\", \"color\", \"#666\", \"toggle\", \"\", \"toggleColor\", \"#333\", \"text\", \"Show Labels\", 1, \"headerOption\", 3, \"btnClick\"], [\"fontSize\", \"8pt\", \"color\", \"#666\", \"toggle\", \"\", \"toggleColor\", \"#333\", \"text\", \"Show All Connections\", 1, \"headerOption\", 3, \"btnClick\"], [1, \"graph\"], [\"echarts\", \"\", 1, \"demo-chart\", 3, \"options\", \"chartMouseOver\", \"chartClick\"], [1, \"crawling-list\"], [\"for\", \"WebsiteNameForCrawler\"], [\"type\", \"text\", \"name\", \"websiteNameForCrawler\", 3, \"ngModel\", \"ngModelChange\"], [\"color\", \"#800080\", \"text\", \"Add Website\", 3, \"click\"], [4, \"ngFor\", \"ngForOf\"], [\"color\", \"#800080\", \"text\", \"Crawl my Websites\", 3, \"click\"]],\n  template: function SimplegraphComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelementStart(1, \"div\", 1);\n      i0.ɵɵelementStart(2, \"label\", 2);\n      i0.ɵɵtext(3, \"Create the Graph for one of your crawled Websites:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"input\", 3);\n      i0.ɵɵlistener(\"ngModelChange\", function SimplegraphComponent_Template_input_ngModelChange_4_listener($event) {\n        return ctx.websiteNameForGraph = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"div\", 1);\n      i0.ɵɵelementStart(6, \"app-button\", 4);\n      i0.ɵɵlistener(\"click\", function SimplegraphComponent_Template_app_button_click_6_listener() {\n        return ctx.getWebsiteGraph();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"div\", 5);\n      i0.ɵɵelementStart(8, \"div\", 0);\n      i0.ɵɵelementStart(9, \"div\", 6);\n      i0.ɵɵelementStart(10, \"app-button\", 7);\n      i0.ɵɵlistener(\"btnClick\", function SimplegraphComponent_Template_app_button_btnClick_10_listener() {\n        return ctx.deselectAll();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"app-button\", 8);\n      i0.ɵɵlistener(\"btnClick\", function SimplegraphComponent_Template_app_button_btnClick_11_listener() {\n        return ctx.showConnections();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"app-button\", 9);\n      i0.ɵɵlistener(\"btnClick\", function SimplegraphComponent_Template_app_button_btnClick_12_listener() {\n        return ctx.showLabels();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"app-button\", 10);\n      i0.ɵɵlistener(\"btnClick\", function SimplegraphComponent_Template_app_button_btnClick_13_listener() {\n        return ctx.showAllConnections();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"div\", 11);\n      i0.ɵɵelementStart(15, \"div\", 12);\n      i0.ɵɵlistener(\"chartMouseOver\", function SimplegraphComponent_Template_div_chartMouseOver_15_listener($event) {\n        return ctx.onChartMouseOver($event);\n      })(\"chartClick\", function SimplegraphComponent_Template_div_chartClick_15_listener($event) {\n        return ctx.onChartClick($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(16, \"div\", 13);\n      i0.ɵɵelementStart(17, \"div\", 1);\n      i0.ɵɵelementStart(18, \"label\", 14);\n      i0.ɵɵtext(19, \"Add new Website to your Crawling-List:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(20, \"input\", 15);\n      i0.ɵɵlistener(\"ngModelChange\", function SimplegraphComponent_Template_input_ngModelChange_20_listener($event) {\n        return ctx.websiteNameForCrawler = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(21, \"div\", 1);\n      i0.ɵɵelementStart(22, \"app-button\", 16);\n      i0.ɵɵlistener(\"click\", function SimplegraphComponent_Template_app_button_click_22_listener() {\n        return ctx.addWebsiteToCrawler();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(23, SimplegraphComponent_li_23_Template, 2, 1, \"li\", 17);\n      i0.ɵɵelementStart(24, \"div\", 1);\n      i0.ɵɵelementStart(25, \"app-button\", 18);\n      i0.ɵɵlistener(\"click\", function SimplegraphComponent_Template_app_button_click_25_listener() {\n        return ctx.crawlNewWebsites();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(26, \"div\", 0);\n      i0.ɵɵelementStart(27, \"div\");\n      i0.ɵɵelement(28, \"app-node-info\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.websiteNameForGraph);\n      i0.ɵɵadvance(11);\n      i0.ɵɵproperty(\"options\", ctx.options);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngModel\", ctx.websiteNameForCrawler);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngForOf\", ctx.crawledWebsites);\n    }\n  },\n  styles: [\".outer[_ngcontent-%COMP%]\\r\\n{\\r\\n  margin: 10px;\\r\\n}\\r\\n\\r\\n.demo-chart[_ngcontent-%COMP%] \\r\\n{\\r\\n    max-width: 1000px;\\r\\n    margin: 10px auto;\\r\\n    overflow: auto;\\r\\n    min-height: 300px;\\r\\n    border: 1px solid steelblue;\\r\\n    background-color: rgb(245, 245, 245);\\r\\n    padding: 10px;\\r\\n    \\r\\n}\\r\\n\\r\\n.graph[_ngcontent-%COMP%]\\r\\n{\\r\\n  clear: both;\\r\\n  width:70%;\\r\\n  margin-right:2%;\\r\\n  float: left;\\r\\n}\\r\\n\\r\\n.header[_ngcontent-%COMP%]\\r\\n{\\r\\n  border: solid, black;\\r\\n  background-color:aqua;\\r\\n}\\r\\n\\r\\n.headerOption[_ngcontent-%COMP%]\\r\\n{\\r\\n  float: left;\\r\\n  margin: 2px;\\r\\n}\\r\\n\\r\\n.crawling-list[_ngcontent-%COMP%] { width:27%;\\r\\n  float: left;}\\r\\n\\r\\n.btn[_ngcontent-%COMP%] {  background-color: purple;\\r\\n    color: purple;\\r\\n    max-height: 100px;\\r\\n    max-width: 300px;\\r\\n    display: flex;\\r\\n}\\r\\n\\r\\n.second_div[_ngcontent-%COMP%] {\\r\\n  width:50px; \\r\\n  height:50px; \\r\\n  background-color:green;\\r\\n  float: left;\\r\\n}\\r\\n\\r\\n.third_div[_ngcontent-%COMP%] {\\r\\n  width:50px; \\r\\n  height:50px; \\r\\n  background-color:blue;\\r\\n  float: left;\\r\\n}\\r\\n\\r\\n.clearfix[_ngcontent-%COMP%]:after {\\r\\n  visibility: hidden;\\r\\n  display: block;\\r\\n  font-size: 0;\\r\\n  content: \\\" \\\";\\r\\n  clear: both;\\r\\n  height: 0;\\r\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNpbXBsZWdyYXBoLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0VBRUUsWUFBWTtBQUNkOztBQUVBOztJQUVJLGlCQUFpQjtJQUNqQixpQkFBaUI7SUFDakIsY0FBYztJQUNkLGlCQUFpQjtJQUNqQiwyQkFBMkI7SUFDM0Isb0NBQW9DO0lBQ3BDLGFBQWE7SUFDYixzQkFBc0I7QUFDMUI7O0FBRUE7O0VBRUUsV0FBVztFQUNYLFNBQVM7RUFDVCxlQUFlO0VBQ2YsV0FBVztBQUNiOztBQUVBOztFQUVFLG9CQUFvQjtFQUNwQixxQkFBcUI7QUFDdkI7O0FBRUE7O0VBRUUsV0FBVztFQUNYLFdBQVc7QUFDYjs7QUFFQSxpQkFBaUIsU0FBUztFQUN4QixXQUFXLENBQUM7O0FBRWQsUUFBUSx3QkFBd0I7SUFDNUIsYUFBYTtJQUNiLGlCQUFpQjtJQUNqQixnQkFBZ0I7SUFDaEIsYUFBYTtBQUNqQjs7QUFHQTtFQUNFLFVBQVU7RUFDVixXQUFXO0VBQ1gsc0JBQXNCO0VBQ3RCLFdBQVc7QUFDYjs7QUFDQTtFQUNFLFVBQVU7RUFDVixXQUFXO0VBQ1gscUJBQXFCO0VBQ3JCLFdBQVc7QUFDYjs7QUFDQTtFQUNFLGtCQUFrQjtFQUNsQixjQUFjO0VBQ2QsWUFBWTtFQUNaLFlBQVk7RUFDWixXQUFXO0VBQ1gsU0FBUztBQUNYIiwiZmlsZSI6InNpbXBsZWdyYXBoLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIub3V0ZXJcclxue1xyXG4gIG1hcmdpbjogMTBweDtcclxufVxyXG5cclxuLmRlbW8tY2hhcnQgXHJcbntcclxuICAgIG1heC13aWR0aDogMTAwMHB4O1xyXG4gICAgbWFyZ2luOiAxMHB4IGF1dG87XHJcbiAgICBvdmVyZmxvdzogYXV0bztcclxuICAgIG1pbi1oZWlnaHQ6IDMwMHB4O1xyXG4gICAgYm9yZGVyOiAxcHggc29saWQgc3RlZWxibHVlO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDI0NSwgMjQ1LCAyNDUpO1xyXG4gICAgcGFkZGluZzogMTBweDtcclxuICAgIC8qYm9yZGVyLXJhZGl1czogNXB4OyovXHJcbn1cclxuXHJcbi5ncmFwaFxyXG57XHJcbiAgY2xlYXI6IGJvdGg7XHJcbiAgd2lkdGg6NzAlO1xyXG4gIG1hcmdpbi1yaWdodDoyJTtcclxuICBmbG9hdDogbGVmdDtcclxufVxyXG5cclxuLmhlYWRlclxyXG57XHJcbiAgYm9yZGVyOiBzb2xpZCwgYmxhY2s7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjphcXVhO1xyXG59XHJcblxyXG4uaGVhZGVyT3B0aW9uXHJcbntcclxuICBmbG9hdDogbGVmdDtcclxuICBtYXJnaW46IDJweDtcclxufVxyXG5cclxuLmNyYXdsaW5nLWxpc3QgeyB3aWR0aDoyNyU7XHJcbiAgZmxvYXQ6IGxlZnQ7fVxyXG5cclxuLmJ0biB7ICBiYWNrZ3JvdW5kLWNvbG9yOiBwdXJwbGU7XHJcbiAgICBjb2xvcjogcHVycGxlO1xyXG4gICAgbWF4LWhlaWdodDogMTAwcHg7XHJcbiAgICBtYXgtd2lkdGg6IDMwMHB4O1xyXG4gICAgZGlzcGxheTogZmxleDtcclxufVxyXG5cclxuXHJcbi5zZWNvbmRfZGl2IHtcclxuICB3aWR0aDo1MHB4OyBcclxuICBoZWlnaHQ6NTBweDsgXHJcbiAgYmFja2dyb3VuZC1jb2xvcjpncmVlbjtcclxuICBmbG9hdDogbGVmdDtcclxufSBcclxuLnRoaXJkX2RpdiB7XHJcbiAgd2lkdGg6NTBweDsgXHJcbiAgaGVpZ2h0OjUwcHg7IFxyXG4gIGJhY2tncm91bmQtY29sb3I6Ymx1ZTtcclxuICBmbG9hdDogbGVmdDtcclxufVxyXG4uY2xlYXJmaXg6YWZ0ZXIge1xyXG4gIHZpc2liaWxpdHk6IGhpZGRlbjtcclxuICBkaXNwbGF5OiBibG9jaztcclxuICBmb250LXNpemU6IDA7XHJcbiAgY29udGVudDogXCIgXCI7XHJcbiAgY2xlYXI6IGJvdGg7XHJcbiAgaGVpZ2h0OiAwO1xyXG59Il19 */\"]\n});\n\nclass GraphData {\n  constructor(t_nodeData, t_linkData) {\n    this.nodeData = t_nodeData;\n    this.linkData = t_linkData;\n  }\n\n}\n\nclass V2 {\n  constructor(t_x, t_y) {\n    this.x = t_x;\n    this.y = t_y;\n  }\n\n}\n\nclass ShadowOptionMixin {}\n\nclass LineStyleOption extends ShadowOptionMixin {}\n\nclass GraphEdgeLineStyleOption extends LineStyleOption {}\n\nclass LineLabelOption {}\n\nclass SeriesLineLabelOption extends LineLabelOption {}\n\nclass GraphEdgeOptions {}\n\nclass GraphNodeItemOption {}\n/******************************** */\n//COPY DATASTRUCTURE FROM BACKEND\n\n/******************************** */\n\n\nclass NodeFromJson {\n  constructor() {\n    this.domParent = \"\";\n    this.domChilds = [];\n    this.rangeFrom = 0;\n    this.rangeTo = Math.PI * 2;\n  }\n\n  getDOMStripedName() {\n    if (this.depth <= 0 || this.url.length <= 0) return this.url;\n\n    for (let index = this.url.length - 1; index >= 0; index--) {\n      const element = this.url[index];\n\n      if (element == '/') {\n        return this.url.slice(index);\n      }\n    }\n\n    return \"\";\n  }\n\n  getDOMParent() {\n    if (this.depth <= 0) return;\n    let slashCount = this.depth + 2;\n\n    if (\"this.url.includes('.html')\") {\n      slashCount--;\n    }\n\n    for (let index = 0; index < this.url.length; index++) {\n      const element = this.url[index];\n\n      if (element == '/') {\n        slashCount--;\n      }\n\n      if (slashCount == 0) {\n        this.domParent = this.url.substring(0, index + 2);\n      }\n    }\n  }\n\n  getDepth() {\n    let count = -3;\n\n    for (let index = 0; index < this.url.length; index++) {\n      const element = this.url[index];\n\n      if (element == '/') {\n        count++;\n      }\n    }\n\n    if (this.url.includes('.html') || this.url.includes('.shtml')) {\n      count++;\n    }\n\n    this.depth = count;\n  }\n\n}\n\nclass WebsiteMap {\n  constructor(t_name, t_map, t_internalMedia) {\n    this.name = t_name;\n    this.map = t_map;\n    this.internalMedia = t_internalMedia;\n  }\n\n}\n\nexport { NodeFromJson };","map":{"version":3,"sources":["C:/Dev/Angular/netzkriecher-frontend/src/app/components/simplegraph/simplegraph.component.ts"],"names":["graphic","data","NodeInfoComponent","i0","i1","SimplegraphComponent_li_23_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","website_r1","$implicit","ɵɵadvance","ɵɵtextInterpolate1","SimplegraphComponent","constructor","websiteService","totalWidth","halfWidth","totalHeight","halfHeight","nodeSizeFalloff","radiusPerIteration","websiteNameForGraph","websiteNameForCrawler","loading","crawledWebsiteID","nodeConnectionStyle","curveness","width","color","opacity","type","cap","join","dashOffset","miterLimit","domChildConnectionStyle","selectedNodeName","domConnectionsActive","allConnectionsActive","labelsActive","remap","n","oldFrom","oldTo","newFrom","newTo","oldRange","proportion","newRange","calculatePosition","depth","index","total","rangeFrom","rangeTo","radians","Math","PI","radiansRemapped","x","cos","y","sin","pos","V2","calculateOffset","getSymbolSize","currentDepth","symbolCallback","rawValue","params","console","log","calculatePositions","website","root","linkData","rootPosition","rootNodeOptions","name","url","category","symbol","symbolSize","push","visited","queue","length","currentNode","shift","domChilds","radiansPerChild","currentRadians","i","map","get","label","position","distance","doubleSided","graphEdgeOption","lineStyle","source","target","value","includes","nodePosition","nodeItemOptions","draggable","symbolOffset","symbolRotate","node","intLinks","graphData","GraphData","onChartMouseOver","ec","onChartClick","undefined","prepareGraph","showGraph","host","nodeName","showIntMedia","intMedia","showAllConnections","showConnections","showLabels","deselectAll","internalMedia","prepareWebsite","dictElements","JSON","parse","stringify","nodeMap","Map","mediaIntGlobal","element","NodeFromJson","parentDocId","docId","extMedia","extLinks","getDepth","getDOMParent","set","forEach","key","domParent","parent","WebsiteMap","mapTo2DMap","media","ret","rowDict","column","transformed","images","initRealData","addWebsiteToCrawler","crawlWebsite","subscribe","next","postId","id","alert","body","toString","error","errorMessage","crawlNewWebsites","startNewCrawlers","getCrawledWebsites","response","crawledWebsites","ngOnInit","getWebsiteGraph","getWebsiteNodes","img","document","getElementById","setAttribute","text","Text","style","graphSeriesOptions","cursor","colorBy","hoverLayerThreshold","selectedMode","legendHoverLink","layout","nodes","nodeData","edges","roam","nodeScaleRatio","fontStyle","show","overflow","tag","itemStyle","r","colorStops","offset","global","emphasis","scale","rotate","valueAnimation","fontWeight","backgroundColor","height","select","options","title","tooltip","animationDurationUpdate","animationEasingUpdate","series","selectedMap","ngAfterViewInit","ɵfac","SimplegraphComponent_Factory","t","ɵɵdirectiveInject","WebsiteService","ɵcmp","ɵɵdefineComponent","selectors","viewQuery","SimplegraphComponent_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","decls","vars","consts","template","SimplegraphComponent_Template","ɵɵlistener","SimplegraphComponent_Template_input_ngModelChange_4_listener","$event","SimplegraphComponent_Template_app_button_click_6_listener","SimplegraphComponent_Template_app_button_btnClick_10_listener","SimplegraphComponent_Template_app_button_btnClick_11_listener","SimplegraphComponent_Template_app_button_btnClick_12_listener","SimplegraphComponent_Template_app_button_btnClick_13_listener","SimplegraphComponent_Template_div_chartMouseOver_15_listener","SimplegraphComponent_Template_div_chartClick_15_listener","SimplegraphComponent_Template_input_ngModelChange_20_listener","SimplegraphComponent_Template_app_button_click_22_listener","ɵɵtemplate","SimplegraphComponent_Template_app_button_click_25_listener","ɵɵelement","ɵɵproperty","styles","t_nodeData","t_linkData","t_x","t_y","ShadowOptionMixin","LineStyleOption","GraphEdgeLineStyleOption","LineLabelOption","SeriesLineLabelOption","GraphEdgeOptions","GraphNodeItemOption","getDOMStripedName","slice","slashCount","substring","count","t_name","t_map","t_internalMedia"],"mappings":"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AUqC,MAAV,GAAmBD,WAAnB;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACUE,EAAAA,YAAY,GAAG;AACjB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AArGyB;AAsGpB;AACD;AACJ;AACA;AACA;AACA;;;AACIC,EAAAA,mBAAmB,GAAG;AAClB,SAAKxI,gBAAL;AACA,SAAKV,cAAL,CAAoBmJ,YAApB,CAAiC,KAAK3I,qBAAtC,EAA6D,KAAKE,gBAAlE,EAAoF0I,SAApF,CAA8F;AAC1FC,MAAAA,IAAI,EAAErK,IAAI,IAAI;AACV,aAAKsK,MAAL,GAActK,IAAI,CAACuK,EAAnB;AACA9F,QAAAA,OAAO,CAACC,GAAR,CAAY1E,IAAZ;AACAwK,QAAAA,KAAK,CAACxK,IAAI,CAACyK,IAAL,CAAU,CAAV,EAAaC,QAAb,KAA0B,kCAA3B,CAAL;AACH,OALyF;AAM1FC,MAAAA,KAAK,EAAEA,KAAK,IAAI;AACZ,aAAKC,YAAL,GAAoBD,KAAK,CAACA,KAA1B;AACAlG,QAAAA,OAAO,CAACkG,KAAR,CAAc,qBAAd,EAAqCA,KAArC;AACAH,QAAAA,KAAK,CAAC,KAAKI,YAAN,CAAL;AACH;AAVyF,KAA9F;AAYH;AACD;;;AACAC,EAAAA,gBAAgB,GAAG;AACf,SAAK7J,cA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","sourcesContent":["import { graphic } from 'echarts';\r\nimport * as data from '../../../assets/tagesschauNew.json';\r\nimport { NodeInfoComponent } from 'src/app/node-info/node-info.component';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"src/app/website.service\";\r\nfunction SimplegraphComponent_li_23_Template(rf, ctx) { if (rf & 1) {\r\n    i0.ɵɵelementStart(0, \"li\");\r\n    i0.ɵɵtext(1);\r\n    i0.ɵɵelementEnd();\r\n} if (rf & 2) {\r\n    const website_r1 = ctx.$implicit;\r\n    i0.ɵɵadvance(1);\r\n    i0.ɵɵtextInterpolate1(\" \", website_r1, \" \");\r\n} }\r\n/*\r\nconsiderations for node placement:\r\n- for first layer: for all childs of root, sum up all their children. Then try to find a configuration,\r\nwhere the 'center of mass' is at the root node. (adding up vectors * weight should equal 0 at the end)\r\n- might not work, because a valid strategy for that would also be to just dump all of the nodes at opposite ends\r\n\r\n- after finishing a whole depth layer, there might be a lot of space left unoccupied in that layer\r\n- the childnoderanges for the layer before could be accordingly ajusted to use up the whole 360°\r\n- (or atleast space them out more)\r\n\r\n*/\r\nexport class SimplegraphComponent {\r\n    constructor(websiteService) {\r\n        this.websiteService = websiteService;\r\n        this.totalWidth = 1000;\r\n        this.halfWidth = 500;\r\n        this.totalHeight = 1000;\r\n        this.halfHeight = 500;\r\n        this.nodeSizeFalloff = 200;\r\n        this.radiusPerIteration = 100;\r\n        this.websiteNameForGraph = \"\";\r\n        this.websiteNameForCrawler = \"\";\r\n        this.loading = false;\r\n        this.crawledWebsiteID = 2;\r\n        this.nodeConnectionStyle = {\r\n            curveness: 0,\r\n            width: 1,\r\n            color: 'grey',\r\n            opacity: 0.8,\r\n            type: 'dashed',\r\n            cap: 'square',\r\n            join: 'bevel',\r\n            dashOffset: 10,\r\n            miterLimit: 10,\r\n        };\r\n        this.domChildConnectionStyle = {\r\n            curveness: 0,\r\n            width: 2,\r\n            color: 'blue',\r\n            opacity: 0.8,\r\n            type: 'solid',\r\n            cap: 'square',\r\n            join: 'bevel',\r\n            dashOffset: 10,\r\n            miterLimit: 10,\r\n        };\r\n        this.selectedNodeName = \"\";\r\n        //initTestData() : Map<string, NodeFromJson>\r\n        this.domConnectionsActive = true;\r\n        this.allConnectionsActive = false;\r\n        this.labelsActive = false;\r\n    }\r\n    /*\r\n    ngOnInit(): void\r\n    {\r\n      this.prepareGraph();\r\n      this.showGraph();\r\n    }*/\r\n    remap(n, oldFrom, oldTo, newFrom, newTo) {\r\n        let oldRange = oldTo - oldFrom;\r\n        let proportion = (n - oldFrom) / oldRange;\r\n        let newRange = newTo - newFrom;\r\n        return newFrom + newRange * proportion;\r\n    }\r\n    calculatePosition(depth, index, total, rangeFrom, rangeTo) {\r\n        let radians = (total == 1) ? 0.5 * 2 * Math.PI : (index / total) * 2 * Math.PI;\r\n        let radiansRemapped = this.remap(radians, 0, Math.PI * 2, rangeFrom, rangeTo);\r\n        let x = Math.cos(radiansRemapped) * depth * this.radiusPerIteration;\r\n        let y = Math.sin(radiansRemapped) * depth * this.radiusPerIteration;\r\n        let pos = new V2(x, y);\r\n        return this.calculateOffset(pos);\r\n    }\r\n    calculateOffset(pos) {\r\n        return new V2(pos.x + this.halfWidth, pos.y + this.halfHeight);\r\n    }\r\n    getSymbolSize(currentDepth) {\r\n        return 20 - (currentDepth * 3);\r\n    }\r\n    symbolCallback(rawValue, params) {\r\n        console.log(\"Test\");\r\n        return 1;\r\n    }\r\n    calculatePositions(website, root) {\r\n        let data = [];\r\n        let linkData = [];\r\n        let rootPosition = this.calculatePosition(0, 1, 1, root.rangeFrom, root.rangeTo);\r\n        let rootNodeOptions = {\r\n            name: root.url,\r\n            x: rootPosition.x,\r\n            y: rootPosition.y,\r\n            category: 'root',\r\n            symbol: 'circle',\r\n            symbolSize: this.getSymbolSize(root.depth)\r\n        };\r\n        data.push(rootNodeOptions);\r\n        let visited = [];\r\n        let queue = [];\r\n        queue.push(root);\r\n        while (queue.length > 0) {\r\n            let currentNode = queue.shift();\r\n            visited.push(currentNode);\r\n            let domChilds = currentNode.domChilds;\r\n            let radiansPerChild = (currentNode.rangeTo - currentNode.rangeFrom) / domChilds.length;\r\n            let currentRadians = 0;\r\n            for (let i = 0; i < domChilds.length; i++) {\r\n                let n = website.map.get(domChilds[i]);\r\n                //show links to domChilds\r\n                if (this.domConnectionsActive) {\r\n                    let label = {\r\n                        position: 'start',\r\n                        distance: 10\r\n                    };\r\n                    let doubleSided = false;\r\n                    /*\r\n                    n.internal_links.forEach(element => {\r\n                      if(element == currentNode.url)\r\n                      {\r\n                        doubleSided = true;\r\n                      }\r\n                    });\r\n                    */\r\n                    let symbol = [];\r\n                    let symbolSize = [];\r\n                    if (doubleSided) {\r\n                        symbol = ['arrow', 'arrow'];\r\n                        symbolSize = [10, 10];\r\n                    }\r\n                    else {\r\n                        symbol = ['none', 'arrow'];\r\n                        symbolSize = [0, 10];\r\n                    }\r\n                    let graphEdgeOption = {\r\n                        lineStyle: this.domChildConnectionStyle,\r\n                        label: label,\r\n                        source: currentNode.url,\r\n                        target: n.url,\r\n                        symbol: symbol,\r\n                        symbolSize: symbolSize,\r\n                        value: 3\r\n                    };\r\n                    linkData.push(graphEdgeOption);\r\n                }\r\n                if (!visited.includes(n)) {\r\n                    //let domName = n.getDOMStripedName();\r\n                    let nodePosition = this.calculatePosition(n.depth, i, domChilds.length, currentNode.rangeFrom, currentNode.rangeTo);\r\n                    let nodeItemOptions = {\r\n                        name: n.url,\r\n                        x: nodePosition.x,\r\n                        y: nodePosition.y,\r\n                        category: 'not root',\r\n                        draggable: true,\r\n                        symbol: 'circle',\r\n                        symbolSize: this.getSymbolSize(n.depth),\r\n                        symbolOffset: 0,\r\n                        symbolRotate: this.symbolCallback(\"\", \"\")\r\n                    };\r\n                    data.push(nodeItemOptions);\r\n                    n.rangeFrom = currentNode.rangeFrom + currentRadians - radiansPerChild * 0.5;\r\n                    currentRadians += radiansPerChild;\r\n                    n.rangeTo = currentNode.rangeFrom + currentRadians - radiansPerChild * 0.5;\r\n                    queue.push(n);\r\n                }\r\n            }\r\n        }\r\n        if (this.selectedNodeName != \"\") {\r\n            let node = website.map.get(this.selectedNodeName);\r\n            for (let i = 0; i < node.intLinks.length; i++) {\r\n                //let n = website.map.get(linksInternal[i]) as NodeFromJson;\r\n                let label = {\r\n                    position: 'start',\r\n                    distance: 10\r\n                };\r\n                let doubleSided = false;\r\n                /*\r\n                        n.intLinks.forEach(element => {\r\n                          if(element == currentNode.url)\r\n                          {\r\n                            doubleSided = true;\r\n                          }\r\n                        });\r\n                */\r\n                let symbol = [];\r\n                let symbolSize = [];\r\n                if (doubleSided) {\r\n                    symbol = ['arrow', 'arrow'];\r\n                    symbolSize = [10, 10];\r\n                }\r\n                else {\r\n                    symbol = ['none', 'arrow'];\r\n                    symbolSize = [0, 10];\r\n                }\r\n                let graphEdgeOption = {\r\n                    lineStyle: this.nodeConnectionStyle,\r\n                    label: label,\r\n                    source: node.url,\r\n                    target: node.intLinks[i],\r\n                    symbol: symbol,\r\n                    symbolSize: symbolSize,\r\n                    value: 3\r\n                };\r\n                linkData.push(graphEdgeOption);\r\n            }\r\n        }\r\n        let graphData = new GraphData(data, linkData);\r\n        return graphData;\r\n    }\r\n    onChartMouseOver(ec) {\r\n        //console.log(\"hover on \" + ec.name);\r\n    }\r\n    onChartClick(ec) {\r\n        let n = this.website.map.get(ec.name);\r\n        if (n != undefined) {\r\n            this.selectedNodeName = n.url;\r\n            this.prepareGraph();\r\n            this.showGraph();\r\n            this.host.node = n;\r\n            this.host.nodeName = n.url;\r\n            this.showIntMedia(n.intMedia);\r\n            return;\r\n        }\r\n    }\r\n    showAllConnections() {\r\n        this.allConnectionsActive = !this.allConnectionsActive;\r\n        this.prepareGraph();\r\n        this.showGraph();\r\n    }\r\n    showConnections() {\r\n        this.domConnectionsActive = !this.domConnectionsActive;\r\n        this.showGraph();\r\n    }\r\n    showLabels() {\r\n        this.labelsActive = !this.labelsActive;\r\n        this.showGraph();\r\n    }\r\n    deselectAll() {\r\n        this.showIntMedia(this.website.internalMedia);\r\n    }\r\n    prepareWebsite(name) {\r\n        let dictElements = JSON.parse(JSON.stringify(data));\r\n        let nodeMap = new Map();\r\n        let mediaIntGlobal = [];\r\n        for (let index = 0; index < dictElements.length; index++) {\r\n            const element = dictElements[index];\r\n            let n = new NodeFromJson();\r\n            if (element.url == undefined) {\r\n                continue;\r\n            }\r\n            n.url = element.url;\r\n            n.parentDocId = element.parentDocId;\r\n            n.docId = element.docId;\r\n            n.extMedia = element['link:ext:media'];\r\n            n.intMedia = element['link:int:media'];\r\n            n.extLinks = element['link:ext'];\r\n            n.intLinks = element['link:int'];\r\n            n.getDepth();\r\n            n.getDOMParent();\r\n            if (n.depth >= 0) {\r\n                nodeMap.set(n.url, n);\r\n            }\r\n        }\r\n        nodeMap.forEach((node, key) => {\r\n            if (node.domParent != \"\") {\r\n                let parent = nodeMap.get(node.domParent);\r\n                if (parent != undefined) {\r\n                    parent.domChilds.push(key);\r\n                }\r\n            }\r\n        });\r\n        let website = new WebsiteMap(name, nodeMap, mediaIntGlobal);\r\n        console.log(\"Website Node nach dem Init View:\", website);\r\n        return website;\r\n    }\r\n    mapTo2DMap(media) {\r\n        let ret = [];\r\n        let rowDict = [];\r\n        let column = 0;\r\n        media.forEach((url) => {\r\n            rowDict.push(url);\r\n            column++;\r\n            if (column > 5) {\r\n                column = 0;\r\n                ret.push(rowDict);\r\n                rowDict = [];\r\n            }\r\n        });\r\n        console.log(ret);\r\n        return ret;\r\n    }\r\n    showIntMedia(media) {\r\n        let transformed = this.mapTo2DMap(media);\r\n        this.host.images = transformed;\r\n    }\r\n    /**\r\n     * The method fetches, saves and prepares the data for the Creation of the Website Graph. Approximately 200 Nodes,\r\n     * that were crawled by the Worker and saved into Redis, get fetched. The data is saved into dictionaries, adapting to\r\n     * the Data structure that was created in the Backend. Finally, the Nodes for the Graph are created.\r\n     */\r\n    async initRealData() {\r\n        /*\r\n        let nodeMap : Map<string, NodeFromJson> = new Map<string, NodeFromJson>();\r\n        this.loading = true;\r\n        this.errorMessage = \"\";\r\n        this.websiteService.getWebsiteNodes(this.websiteNameForGraph)\r\n          .subscribe(\r\n            response => {                           //next() callback\r\n              console.log('response received')\r\n              //this.websites = response;\r\n              let dictElements : {[index:string] : string}[] = JSON.parse(JSON.stringify(response))\r\n         \r\n              for (let index = 0; index < dictElements.length; index++) {\r\n                const element  : {[index:string] : string} = dictElements[index];\r\n          \r\n                let pdi : string = \"\";\r\n                let di : string = \"\";\r\n                let url : string = \"\";\r\n                let linksInt : string[] = [];\r\n                let mediaInt : string[] = [];\r\n                let linksExt : string[] = [];\r\n                let mediaExt : string[] = [];\r\n          \r\n                Object.entries(element).forEach(\r\n                  ([key, value]) =>\r\n                  {\r\n                    if(key.includes('parentDocId'))\r\n                    {\r\n                      pdi = value;\r\n                    }\r\n                    else if(key.includes('docId'))\r\n                    {\r\n                      di = value;\r\n                    }\r\n                    else if(key.includes(':int:media:'))\r\n                    {\r\n                      mediaInt.push(value);\r\n                    }\r\n                    else if(key.includes(':int:'))\r\n                    {\r\n                      linksInt.push(value);\r\n                    }\r\n                    else if(key.includes(':ext:media:'))\r\n                    {\r\n                      mediaExt.push(value);\r\n                    }\r\n                    else if(key.includes(':ext:'))\r\n                    {\r\n                      linksExt.push(value);\r\n                    }\r\n                    else if(key.includes('url'))\r\n                    {\r\n                      url = value;\r\n                    }\r\n                    \r\n                  }\r\n                );\r\n                \r\n                let n : NodeFromJson = new NodeFromJson();\r\n                n.url = url;\r\n                n.parentDocId = pdi;\r\n                n.docId = di;\r\n                n.extMedia = mediaExt;\r\n                n.intMedia = mediaInt;\r\n                n.extLinks = linksExt;\r\n                n.intLinks = linksInt;\r\n          \r\n                n.getDepth();\r\n                n.getDOMParent();\r\n                if(n.depth >= 0)\r\n                {\r\n                  nodeMap.set(n.url, n);\r\n                }\r\n              }\r\n          \r\n              nodeMap.forEach((node: NodeFromJson, key: string) =>\r\n              {\r\n                if(node.domParent != \"\")\r\n                {\r\n                  let parent = nodeMap.get(node.domParent);\r\n                  if(parent != undefined)\r\n                  {\r\n                    parent.domChilds.push(key);\r\n                  }\r\n                }\r\n              });\r\n            console.log(\"NodeMap: \")\r\n            console.log(nodeMap)\r\n            console.log(\"End reached\")\r\n            this.nodeMap = nodeMap;\r\n          \r\n            },\r\n            (error) => {                              //error() callback\r\n              console.error('Request failed with error')\r\n              this.errorMessage = error;\r\n              this.loading = false;\r\n            },\r\n            () => {                                   //complete() callback\r\n              console.error('Request completed')      //This is actually not needed\r\n              this.loading = false;\r\n            })\r\n            */\r\n    }\r\n    /**\r\n     * The User tells the Server which Website it should crawl next, so a Graph can be vusialized later on for\r\n     * this Website. The POST-Request to the Server is initialized and the Answer of the Server is read and told\r\n     * to the User. For that purpose, the crawlWebsite-Method returns an Observable which is subscribed upon.\r\n     */\r\n    addWebsiteToCrawler() {\r\n        this.crawledWebsiteID++;\r\n        this.websiteService.crawlWebsite(this.websiteNameForCrawler, this.crawledWebsiteID).subscribe({\r\n            next: data => {\r\n                this.postId = data.id;\r\n                console.log(data);\r\n                alert(data.body[0].toString() + \" is now starting to get crawled!\");\r\n            },\r\n            error: error => {\r\n                this.errorMessage = error.error;\r\n                console.error('There was an error!', error);\r\n                alert(this.errorMessage);\r\n            }\r\n        });\r\n    }\r\n    /**Restart Crawler in the Worker */\r\n    crawlNewWebsites() {\r\n        this.websiteService.startNewCrawlers().subscribe({\r\n            next: data => {\r\n                this.postId = data.id;\r\n                console.log(data);\r\n            },\r\n            error: error => {\r\n                this.errorMessage = error.error;\r\n                console.error('There was an error!', error);\r\n                alert(this.errorMessage);\r\n            }\r\n        });\r\n    }\r\n    getCrawledWebsites() {\r\n        this.loading = true;\r\n        this.errorMessage = \"\";\r\n        this.websiteService.getCrawledWebsites()\r\n            .subscribe((response) => {\r\n            console.log('response received');\r\n            this.crawledWebsites = response;\r\n        }, (error) => {\r\n            console.error('Request failed with error');\r\n            this.errorMessage = error;\r\n            this.loading = false;\r\n        }, () => {\r\n            console.error('Request completed'); //This is actually not needed \r\n            this.loading = false;\r\n        });\r\n    }\r\n    ngOnInit() {\r\n        this.getCrawledWebsites();\r\n        this.prepareGraph();\r\n        this.showGraph();\r\n    }\r\n    getWebsiteGraph() {\r\n        //prepare Website-Method with Rest Call ->\r\n        let nodeMap = new Map();\r\n        this.loading = true;\r\n        this.errorMessage = \"\";\r\n        this.websiteService.getWebsiteNodes(this.websiteNameForGraph)\r\n            .subscribe(data => {\r\n            console.log('response received');\r\n            let dictElements = JSON.parse(JSON.stringify(data));\r\n            let mediaIntGlobal = [];\r\n            for (let index = 0; index < dictElements.length; index++) {\r\n                const element = dictElements[index];\r\n                let n = new NodeFromJson();\r\n                if (element.url == undefined) {\r\n                    continue;\r\n                }\r\n                n.url = element.url;\r\n                n.parentDocId = element.parentDocId;\r\n                n.docId = element.docId;\r\n                n.extMedia = element['link:ext:media'];\r\n                n.intMedia = element['link:int:media'];\r\n                n.extLinks = element['link:ext'];\r\n                n.intLinks = element['link:int'];\r\n                n.getDepth();\r\n                n.getDOMParent();\r\n                if (n.depth >= 0) {\r\n                    nodeMap.set(n.url, n);\r\n                }\r\n            }\r\n            nodeMap.forEach((node, key) => {\r\n                if (node.domParent != \"\") {\r\n                    let parent = nodeMap.get(node.domParent);\r\n                    if (parent != undefined) {\r\n                        parent.domChilds.push(key);\r\n                    }\r\n                }\r\n            });\r\n            this.website = new WebsiteMap(this.websiteNameForGraph, nodeMap, mediaIntGlobal);\r\n            console.log(\"Website Node nach dem Click:\", this.website);\r\n            //prepareWebsite-Method ->\r\n            let root = this.website.map.get(\"https://www.\" + this.websiteNameForGraph + \"/\");\r\n            let img = document.getElementById(\"img\");\r\n            img === null || img === void 0 ? void 0 : img.setAttribute(\"src\", '../../assets/Images/NodeTest.png');\r\n            this.graphData = this.calculatePositions(this.website, root);\r\n            let text = new graphic.Text();\r\n            text.style.text = \"Hello\";\r\n            //ShowGraph-Method ->\r\n            let graphSeriesOptions = {\r\n                cursor: 'hand',\r\n                colorBy: 'data',\r\n                hoverLayerThreshold: 10,\r\n                selectedMode: 'multiple',\r\n                name: 'Sitemap',\r\n                type: 'graph',\r\n                //coordinateSystem: 'none',\r\n                legendHoverLink: false,\r\n                layout: 'none',\r\n                nodes: this.graphData.nodeData,\r\n                edges: this.graphData.linkData,\r\n                draggable: false,\r\n                roam: true,\r\n                color: '#DF4477',\r\n                nodeScaleRatio: 0.6,\r\n                label: {\r\n                    fontStyle: 'normal',\r\n                    show: this.labelsActive,\r\n                    color: 'black',\r\n                    overflow: 'truncate',\r\n                    tag: '!!!!!!'\r\n                },\r\n                itemStyle: {\r\n                    opacity: 1,\r\n                    //color :  'red'\r\n                    /*\r\n                    color :\r\n                    {\r\n                      svgElement : svgElement,\r\n                      svgWidth : 10,\r\n                      svgHeight : 10,\r\n                      type : 'pattern',\r\n                      x : 1,\r\n                      y : 1,\r\n                      rotation : 0,\r\n                      scaleX : 1,\r\n                      scaleY : 1\r\n                    }\r\n                    */\r\n                    //RADIAL GRADIENT\r\n                    color: {\r\n                        type: 'radial',\r\n                        x: 0.5,\r\n                        y: 0.5,\r\n                        r: 0.5,\r\n                        colorStops: [{\r\n                                offset: 0.0,\r\n                                color: 'red'\r\n                            },\r\n                            {\r\n                                offset: 1.0,\r\n                                color: 'purple'\r\n                            }\r\n                        ],\r\n                        global: false\r\n                    }\r\n                    /*\r\n                    //LINEAR GRADIENT\r\n                    color:\r\n                    {\r\n                      {\r\n                      type : 'linear',\r\n                      x : 0.1,\r\n                      y : 1,\r\n                      x2 : 0.3,\r\n                      y2 : 1,\r\n                      colorStops : [\r\n                        {\r\n                          offset : 0.3,\r\n                          color : 'red'\r\n                        },\r\n                        {\r\n                          offset : 0.7,\r\n                          color : 'blue'\r\n                        }]\r\n                      }\r\n                    }\r\n                    */\r\n                    /*\r\n                    color :\r\n                    {\r\n                      image : img,\r\n                      repeat : 'repeat'\r\n                    }\r\n                    */\r\n                },\r\n                lineStyle: {\r\n                    curveness: 1\r\n                },\r\n                emphasis: {\r\n                    scale: false,\r\n                    label: {\r\n                        show: true,\r\n                        rotate: 0,\r\n                        valueAnimation: true,\r\n                        color: 'red',\r\n                        fontStyle: 'normal',\r\n                        fontWeight: 'bolder',\r\n                        backgroundColor: 'blue',\r\n                        height: 20\r\n                    }\r\n                },\r\n                select: {\r\n                    label: {\r\n                        color: 'green'\r\n                    }\r\n                }\r\n            };\r\n            this.options =\r\n                {\r\n                    title: {\r\n                        text: this.website.name,\r\n                    },\r\n                    tooltip: {},\r\n                    animationDurationUpdate: 1500,\r\n                    animationEasingUpdate: 'quinticInOut',\r\n                    series: [graphSeriesOptions]\r\n                };\r\n            let map = graphSeriesOptions.selectedMap;\r\n        });\r\n    }\r\n    prepareGraph() {\r\n        this.website = this.prepareWebsite(\"Tagesschau.de\");\r\n        let root = this.website.map.get(\"https://www.tagesschau.de/\");\r\n        let img = document.getElementById(\"img\");\r\n        img === null || img === void 0 ? void 0 : img.setAttribute(\"src\", '../../assets/Images/NodeTest.png');\r\n        this.graphData = this.calculatePositions(this.website, root);\r\n        let text = new graphic.Text();\r\n        text.style.text = \"Hello\";\r\n    }\r\n    showGraph() {\r\n        let edges = this.domConnectionsActive ? this.graphData.linkData : undefined;\r\n        let graphSeriesOptions = {\r\n            cursor: 'hand',\r\n            colorBy: 'data',\r\n            hoverLayerThreshold: 10,\r\n            selectedMode: 'multiple',\r\n            name: 'Sitemap',\r\n            type: 'graph',\r\n            //coordinateSystem: 'none',\r\n            legendHoverLink: false,\r\n            layout: 'none',\r\n            nodes: this.graphData.nodeData,\r\n            edges: edges,\r\n            draggable: false,\r\n            roam: true,\r\n            color: '#DF4477',\r\n            nodeScaleRatio: 0.6,\r\n            label: {\r\n                fontStyle: 'normal',\r\n                show: this.labelsActive,\r\n                color: 'black',\r\n                overflow: 'truncate',\r\n                tag: '!!!!!!'\r\n            },\r\n            itemStyle: {\r\n                opacity: 1,\r\n                //color :  'red'\r\n                /*\r\n                color :\r\n                {\r\n                  svgElement : svgElement,\r\n                  svgWidth : 10,\r\n                  svgHeight : 10,\r\n                  type : 'pattern',\r\n                  x : 1,\r\n                  y : 1,\r\n                  rotation : 0,\r\n                  scaleX : 1,\r\n                  scaleY : 1\r\n                }\r\n                */\r\n                //RADIAL GRADIENT\r\n                color: {\r\n                    type: 'radial',\r\n                    x: 0.5,\r\n                    y: 0.5,\r\n                    r: 0.5,\r\n                    colorStops: [{\r\n                            offset: 0.0,\r\n                            color: 'red'\r\n                        },\r\n                        {\r\n                            offset: 1.0,\r\n                            color: 'purple'\r\n                        }\r\n                    ],\r\n                    global: false\r\n                }\r\n                /*\r\n                //LINEAR GRADIENT\r\n                color:\r\n                {\r\n                  {\r\n                  type : 'linear',\r\n                  x : 0.1,\r\n                  y : 1,\r\n                  x2 : 0.3,\r\n                  y2 : 1,\r\n                  colorStops : [\r\n                    {\r\n                      offset : 0.3,\r\n                      color : 'red'\r\n                    },\r\n                    {\r\n                      offset : 0.7,\r\n                      color : 'blue'\r\n                    }]\r\n                  }\r\n                }\r\n                */\r\n                /*\r\n                color :\r\n                {\r\n                  image : img,\r\n                  repeat : 'repeat'\r\n                }\r\n                */\r\n            },\r\n            lineStyle: {\r\n                curveness: 1\r\n            },\r\n            emphasis: {\r\n                scale: false,\r\n                label: {\r\n                    show: true,\r\n                    rotate: 0,\r\n                    valueAnimation: true,\r\n                    color: 'red',\r\n                    fontStyle: 'normal',\r\n                    fontWeight: 'bolder',\r\n                    backgroundColor: 'blue',\r\n                    height: 20\r\n                }\r\n            },\r\n            select: {\r\n                label: {\r\n                    color: 'green'\r\n                }\r\n            }\r\n        };\r\n        this.options =\r\n            {\r\n                title: {\r\n                    text: this.website.name,\r\n                },\r\n                tooltip: {},\r\n                animationDurationUpdate: 1500,\r\n                animationEasingUpdate: 'quinticInOut',\r\n                series: [graphSeriesOptions]\r\n            };\r\n        let map = graphSeriesOptions.selectedMap;\r\n    }\r\n    /**\r\n     * The User tells the Server which Website it should crawl next, so a Graph can be vusialized later on for\r\n     * this Website. The POST-Request to the Server is initialized and the Answer of the Server is read and told\r\n     * to the User. For that purpose, the crawlWebsite-Method returns an Observable which is subscribed upon.\r\n     */\r\n    crawlWebsite() {\r\n        this.crawledWebsiteID++;\r\n        this.websiteService.crawlWebsite(this.websiteNameForCrawler, this.crawledWebsiteID).subscribe({\r\n            next: data => {\r\n                this.postId = data.id;\r\n                console.log(data);\r\n                alert(data.body[0].toString() + \" is now starting to get crawled!\");\r\n                this.getCrawledWebsites();\r\n            },\r\n            error: error => {\r\n                this.errorMessage = error.error;\r\n                console.error('There was an error!', error);\r\n                alert(this.errorMessage);\r\n            }\r\n        });\r\n    }\r\n    ngAfterViewInit() {\r\n        console.log(\"NODEINFO?\", this.host);\r\n    }\r\n}\r\nSimplegraphComponent.ɵfac = function SimplegraphComponent_Factory(t) { return new (t || SimplegraphComponent)(i0.ɵɵdirectiveInject(i1.WebsiteService)); };\r\nSimplegraphComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: SimplegraphComponent, selectors: [[\"app-simplegraph\"]], viewQuery: function SimplegraphComponent_Query(rf, ctx) { if (rf & 1) {\r\n        i0.ɵɵviewQuery(NodeInfoComponent, 5);\r\n    } if (rf & 2) {\r\n        let _t;\r\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.host = _t.first);\r\n    } }, decls: 29, vars: 4, consts: [[1, \"clearfix\"], [1, \"headerOption\"], [\"for\", \"websiteNameForGraph\"], [\"type\", \"text\", \"name\", \"websiteNameForGraph\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"color\", \"#800080\", \"text\", \"Create Website Graph\", 3, \"click\"], [1, \"outer\"], [1, \"header\"], [\"fontSize\", \"8pt\", \"color\", \"#666\", \"toggle\", \"\", \"toggleColor\", \"#333\", \"text\", \"Deselect All\", 1, \"headerOption\", 3, \"btnClick\"], [\"fontSize\", \"8pt\", \"color\", \"#666\", \"toggle\", \"\", \"toggleColor\", \"#333\", \"text\", \"Show DOM-Connections\", 1, \"headerOption\", 3, \"btnClick\"], [\"fontSize\", \"8pt\", \"color\", \"#666\", \"toggle\", \"\", \"toggleColor\", \"#333\", \"text\", \"Show Labels\", 1, \"headerOption\", 3, \"btnClick\"], [\"fontSize\", \"8pt\", \"color\", \"#666\", \"toggle\", \"\", \"toggleColor\", \"#333\", \"text\", \"Show All Connections\", 1, \"headerOption\", 3, \"btnClick\"], [1, \"graph\"], [\"echarts\", \"\", 1, \"demo-chart\", 3, \"options\", \"chartMouseOver\", \"chartClick\"], [1, \"crawling-list\"], [\"for\", \"WebsiteNameForCrawler\"], [\"type\", \"text\", \"name\", \"websiteNameForCrawler\", 3, \"ngModel\", \"ngModelChange\"], [\"color\", \"#800080\", \"text\", \"Add Website\", 3, \"click\"], [4, \"ngFor\", \"ngForOf\"], [\"color\", \"#800080\", \"text\", \"Crawl my Websites\", 3, \"click\"]], template: function SimplegraphComponent_Template(rf, ctx) { if (rf & 1) {\r\n        i0.ɵɵelementStart(0, \"div\", 0);\r\n        i0.ɵɵelementStart(1, \"div\", 1);\r\n        i0.ɵɵelementStart(2, \"label\", 2);\r\n        i0.ɵɵtext(3, \"Create the Graph for one of your crawled Websites:\");\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementStart(4, \"input\", 3);\r\n        i0.ɵɵlistener(\"ngModelChange\", function SimplegraphComponent_Template_input_ngModelChange_4_listener($event) { return ctx.websiteNameForGraph = $event; });\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementStart(5, \"div\", 1);\r\n        i0.ɵɵelementStart(6, \"app-button\", 4);\r\n        i0.ɵɵlistener(\"click\", function SimplegraphComponent_Template_app_button_click_6_listener() { return ctx.getWebsiteGraph(); });\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementStart(7, \"div\", 5);\r\n        i0.ɵɵelementStart(8, \"div\", 0);\r\n        i0.ɵɵelementStart(9, \"div\", 6);\r\n        i0.ɵɵelementStart(10, \"app-button\", 7);\r\n        i0.ɵɵlistener(\"btnClick\", function SimplegraphComponent_Template_app_button_btnClick_10_listener() { return ctx.deselectAll(); });\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementStart(11, \"app-button\", 8);\r\n        i0.ɵɵlistener(\"btnClick\", function SimplegraphComponent_Template_app_button_btnClick_11_listener() { return ctx.showConnections(); });\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementStart(12, \"app-button\", 9);\r\n        i0.ɵɵlistener(\"btnClick\", function SimplegraphComponent_Template_app_button_btnClick_12_listener() { return ctx.showLabels(); });\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementStart(13, \"app-button\", 10);\r\n        i0.ɵɵlistener(\"btnClick\", function SimplegraphComponent_Template_app_button_btnClick_13_listener() { return ctx.showAllConnections(); });\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementStart(14, \"div\", 11);\r\n        i0.ɵɵelementStart(15, \"div\", 12);\r\n        i0.ɵɵlistener(\"chartMouseOver\", function SimplegraphComponent_Template_div_chartMouseOver_15_listener($event) { return ctx.onChartMouseOver($event); })(\"chartClick\", function SimplegraphComponent_Template_div_chartClick_15_listener($event) { return ctx.onChartClick($event); });\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementStart(16, \"div\", 13);\r\n        i0.ɵɵelementStart(17, \"div\", 1);\r\n        i0.ɵɵelementStart(18, \"label\", 14);\r\n        i0.ɵɵtext(19, \"Add new Website to your Crawling-List:\");\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementStart(20, \"input\", 15);\r\n        i0.ɵɵlistener(\"ngModelChange\", function SimplegraphComponent_Template_input_ngModelChange_20_listener($event) { return ctx.websiteNameForCrawler = $event; });\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementStart(21, \"div\", 1);\r\n        i0.ɵɵelementStart(22, \"app-button\", 16);\r\n        i0.ɵɵlistener(\"click\", function SimplegraphComponent_Template_app_button_click_22_listener() { return ctx.addWebsiteToCrawler(); });\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵtemplate(23, SimplegraphComponent_li_23_Template, 2, 1, \"li\", 17);\r\n        i0.ɵɵelementStart(24, \"div\", 1);\r\n        i0.ɵɵelementStart(25, \"app-button\", 18);\r\n        i0.ɵɵlistener(\"click\", function SimplegraphComponent_Template_app_button_click_25_listener() { return ctx.crawlNewWebsites(); });\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelement(26, \"div\", 0);\r\n        i0.ɵɵelementStart(27, \"div\");\r\n        i0.ɵɵelement(28, \"app-node-info\");\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementEnd();\r\n    } if (rf & 2) {\r\n        i0.ɵɵadvance(4);\r\n        i0.ɵɵproperty(\"ngModel\", ctx.websiteNameForGraph);\r\n        i0.ɵɵadvance(11);\r\n        i0.ɵɵproperty(\"options\", ctx.options);\r\n        i0.ɵɵadvance(5);\r\n        i0.ɵɵproperty(\"ngModel\", ctx.websiteNameForCrawler);\r\n        i0.ɵɵadvance(3);\r\n        i0.ɵɵproperty(\"ngForOf\", ctx.crawledWebsites);\r\n    } }, styles: [\".outer[_ngcontent-%COMP%]\\r\\n{\\r\\n  margin: 10px;\\r\\n}\\r\\n\\r\\n.demo-chart[_ngcontent-%COMP%] \\r\\n{\\r\\n    max-width: 1000px;\\r\\n    margin: 10px auto;\\r\\n    overflow: auto;\\r\\n    min-height: 300px;\\r\\n    border: 1px solid steelblue;\\r\\n    background-color: rgb(245, 245, 245);\\r\\n    padding: 10px;\\r\\n    \\r\\n}\\r\\n\\r\\n.graph[_ngcontent-%COMP%]\\r\\n{\\r\\n  clear: both;\\r\\n  width:70%;\\r\\n  margin-right:2%;\\r\\n  float: left;\\r\\n}\\r\\n\\r\\n.header[_ngcontent-%COMP%]\\r\\n{\\r\\n  border: solid, black;\\r\\n  background-color:aqua;\\r\\n}\\r\\n\\r\\n.headerOption[_ngcontent-%COMP%]\\r\\n{\\r\\n  float: left;\\r\\n  margin: 2px;\\r\\n}\\r\\n\\r\\n.crawling-list[_ngcontent-%COMP%] { width:27%;\\r\\n  float: left;}\\r\\n\\r\\n.btn[_ngcontent-%COMP%] {  background-color: purple;\\r\\n    color: purple;\\r\\n    max-height: 100px;\\r\\n    max-width: 300px;\\r\\n    display: flex;\\r\\n}\\r\\n\\r\\n.second_div[_ngcontent-%COMP%] {\\r\\n  width:50px; \\r\\n  height:50px; \\r\\n  background-color:green;\\r\\n  float: left;\\r\\n}\\r\\n\\r\\n.third_div[_ngcontent-%COMP%] {\\r\\n  width:50px; \\r\\n  height:50px; \\r\\n  background-color:blue;\\r\\n  float: left;\\r\\n}\\r\\n\\r\\n.clearfix[_ngcontent-%COMP%]:after {\\r\\n  visibility: hidden;\\r\\n  display: block;\\r\\n  font-size: 0;\\r\\n  content: \\\" \\\";\\r\\n  clear: both;\\r\\n  height: 0;\\r\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNpbXBsZWdyYXBoLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0VBRUUsWUFBWTtBQUNkOztBQUVBOztJQUVJLGlCQUFpQjtJQUNqQixpQkFBaUI7SUFDakIsY0FBYztJQUNkLGlCQUFpQjtJQUNqQiwyQkFBMkI7SUFDM0Isb0NBQW9DO0lBQ3BDLGFBQWE7SUFDYixzQkFBc0I7QUFDMUI7O0FBRUE7O0VBRUUsV0FBVztFQUNYLFNBQVM7RUFDVCxlQUFlO0VBQ2YsV0FBVztBQUNiOztBQUVBOztFQUVFLG9CQUFvQjtFQUNwQixxQkFBcUI7QUFDdkI7O0FBRUE7O0VBRUUsV0FBVztFQUNYLFdBQVc7QUFDYjs7QUFFQSxpQkFBaUIsU0FBUztFQUN4QixXQUFXLENBQUM7O0FBRWQsUUFBUSx3QkFBd0I7SUFDNUIsYUFBYTtJQUNiLGlCQUFpQjtJQUNqQixnQkFBZ0I7SUFDaEIsYUFBYTtBQUNqQjs7QUFHQTtFQUNFLFVBQVU7RUFDVixXQUFXO0VBQ1gsc0JBQXNCO0VBQ3RCLFdBQVc7QUFDYjs7QUFDQTtFQUNFLFVBQVU7RUFDVixXQUFXO0VBQ1gscUJBQXFCO0VBQ3JCLFdBQVc7QUFDYjs7QUFDQTtFQUNFLGtCQUFrQjtFQUNsQixjQUFjO0VBQ2QsWUFBWTtFQUNaLFlBQVk7RUFDWixXQUFXO0VBQ1gsU0FBUztBQUNYIiwiZmlsZSI6InNpbXBsZWdyYXBoLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIub3V0ZXJcclxue1xyXG4gIG1hcmdpbjogMTBweDtcclxufVxyXG5cclxuLmRlbW8tY2hhcnQgXHJcbntcclxuICAgIG1heC13aWR0aDogMTAwMHB4O1xyXG4gICAgbWFyZ2luOiAxMHB4IGF1dG87XHJcbiAgICBvdmVyZmxvdzogYXV0bztcclxuICAgIG1pbi1oZWlnaHQ6IDMwMHB4O1xyXG4gICAgYm9yZGVyOiAxcHggc29saWQgc3RlZWxibHVlO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDI0NSwgMjQ1LCAyNDUpO1xyXG4gICAgcGFkZGluZzogMTBweDtcclxuICAgIC8qYm9yZGVyLXJhZGl1czogNXB4OyovXHJcbn1cclxuXHJcbi5ncmFwaFxyXG57XHJcbiAgY2xlYXI6IGJvdGg7XHJcbiAgd2lkdGg6NzAlO1xyXG4gIG1hcmdpbi1yaWdodDoyJTtcclxuICBmbG9hdDogbGVmdDtcclxufVxyXG5cclxuLmhlYWRlclxyXG57XHJcbiAgYm9yZGVyOiBzb2xpZCwgYmxhY2s7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjphcXVhO1xyXG59XHJcblxyXG4uaGVhZGVyT3B0aW9uXHJcbntcclxuICBmbG9hdDogbGVmdDtcclxuICBtYXJnaW46IDJweDtcclxufVxyXG5cclxuLmNyYXdsaW5nLWxpc3QgeyB3aWR0aDoyNyU7XHJcbiAgZmxvYXQ6IGxlZnQ7fVxyXG5cclxuLmJ0biB7ICBiYWNrZ3JvdW5kLWNvbG9yOiBwdXJwbGU7XHJcbiAgICBjb2xvcjogcHVycGxlO1xyXG4gICAgbWF4LWhlaWdodDogMTAwcHg7XHJcbiAgICBtYXgtd2lkdGg6IDMwMHB4O1xyXG4gICAgZGlzcGxheTogZmxleDtcclxufVxyXG5cclxuXHJcbi5zZWNvbmRfZGl2IHtcclxuICB3aWR0aDo1MHB4OyBcclxuICBoZWlnaHQ6NTBweDsgXHJcbiAgYmFja2dyb3VuZC1jb2xvcjpncmVlbjtcclxuICBmbG9hdDogbGVmdDtcclxufSBcclxuLnRoaXJkX2RpdiB7XHJcbiAgd2lkdGg6NTBweDsgXHJcbiAgaGVpZ2h0OjUwcHg7IFxyXG4gIGJhY2tncm91bmQtY29sb3I6Ymx1ZTtcclxuICBmbG9hdDogbGVmdDtcclxufVxyXG4uY2xlYXJmaXg6YWZ0ZXIge1xyXG4gIHZpc2liaWxpdHk6IGhpZGRlbjtcclxuICBkaXNwbGF5OiBibG9jaztcclxuICBmb250LXNpemU6IDA7XHJcbiAgY29udGVudDogXCIgXCI7XHJcbiAgY2xlYXI6IGJvdGg7XHJcbiAgaGVpZ2h0OiAwO1xyXG59Il19 */\"] });\r\nclass GraphData {\r\n    constructor(t_nodeData, t_linkData) {\r\n        this.nodeData = t_nodeData;\r\n        this.linkData = t_linkData;\r\n    }\r\n}\r\nclass V2 {\r\n    constructor(t_x, t_y) {\r\n        this.x = t_x;\r\n        this.y = t_y;\r\n    }\r\n}\r\nclass ShadowOptionMixin {\r\n}\r\nclass LineStyleOption extends ShadowOptionMixin {\r\n}\r\nclass GraphEdgeLineStyleOption extends LineStyleOption {\r\n}\r\nclass LineLabelOption {\r\n}\r\nclass SeriesLineLabelOption extends LineLabelOption {\r\n}\r\nclass GraphEdgeOptions {\r\n}\r\nclass GraphNodeItemOption {\r\n}\r\n/******************************** */\r\n//COPY DATASTRUCTURE FROM BACKEND\r\n/******************************** */\r\nclass NodeFromJson {\r\n    constructor() {\r\n        this.domParent = \"\";\r\n        this.domChilds = [];\r\n        this.rangeFrom = 0;\r\n        this.rangeTo = Math.PI * 2;\r\n    }\r\n    getDOMStripedName() {\r\n        if (this.depth <= 0 || this.url.length <= 0)\r\n            return this.url;\r\n        for (let index = this.url.length - 1; index >= 0; index--) {\r\n            const element = this.url[index];\r\n            if (element == '/') {\r\n                return this.url.slice(index);\r\n            }\r\n        }\r\n        return \"\";\r\n    }\r\n    getDOMParent() {\r\n        if (this.depth <= 0)\r\n            return;\r\n        let slashCount = this.depth + 2;\r\n        if (\"this.url.includes('.html')\") {\r\n            slashCount--;\r\n        }\r\n        for (let index = 0; index < this.url.length; index++) {\r\n            const element = this.url[index];\r\n            if (element == '/') {\r\n                slashCount--;\r\n            }\r\n            if (slashCount == 0) {\r\n                this.domParent = this.url.substring(0, index + 2);\r\n            }\r\n        }\r\n    }\r\n    getDepth() {\r\n        let count = -3;\r\n        for (let index = 0; index < this.url.length; index++) {\r\n            const element = this.url[index];\r\n            if (element == '/') {\r\n                count++;\r\n            }\r\n        }\r\n        if (this.url.includes('.html') || this.url.includes('.shtml')) {\r\n            count++;\r\n        }\r\n        this.depth = count;\r\n    }\r\n}\r\nclass WebsiteMap {\r\n    constructor(t_name, t_map, t_internalMedia) {\r\n        this.name = t_name;\r\n        this.map = t_map;\r\n        this.internalMedia = t_internalMedia;\r\n    }\r\n}\r\nexport { NodeFromJson };\r\n"]},"metadata":{},"sourceType":"module"}