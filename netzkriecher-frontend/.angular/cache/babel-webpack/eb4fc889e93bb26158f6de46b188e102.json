{"ast":null,"code":"import _asyncToGenerator from \"C:/Dev/Angular/netzkriecher-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { graphic } from 'echarts';\nimport * as data from '../../../assets/tagesschauNew.json';\nimport { NodeInfoComponent } from 'src/app/node-info/node-info.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/website.service\";\n\nfunction SimplegraphComponent_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"loading...\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction SimplegraphComponent_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵelementStart(1, \"strong\");\n    i0.ɵɵtext(2, \"Warning!\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(3);\n    i0.ɵɵpipe(4, \"json\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(4, 1, ctx_r1.errorMessage), \" \");\n  }\n}\n/*\r\nconsiderations for node placement:\r\n- for first layer: for all childs of root, sum up all their children. Then try to find a configuration,\r\nwhere the 'center of mass' is at the root node. (adding up vectors * weight should equal 0 at the end)\r\n- might not work, because a valid strategy for that would also be to just dump all of the nodes at opposite ends\r\n\r\n- after finishing a whole depth layer, there might be a lot of space left unoccupied in that layer\r\n- the childnoderanges for the layer before could be accordingly ajusted to use up the whole 360°\r\n- (or atleast space them out more)\r\n\r\n*/\n\n\nexport class SimplegraphComponent {\n  constructor(websiteService) {\n    this.websiteService = websiteService;\n    this.totalWidth = 1000;\n    this.halfWidth = 500;\n    this.totalHeight = 1000;\n    this.halfHeight = 500;\n    this.nodeSizeFalloff = 200;\n    this.radiusPerIteration = 100;\n    this.websiteNameForGraph = \"\";\n    this.websiteNameForCrawler = \"\";\n    this.loading = false;\n    this.crawledWebsiteID = 2; //initTestData() : Map<string, NodeFromJson>\n\n    this.connectionsActive = true;\n    this.labelsActive = false;\n  }\n  /*\r\n  ngOnInit(): void\r\n  {\r\n    this.prepareGraph();\r\n    this.showGraph();\r\n  }*/\n\n\n  remap(n, oldFrom, oldTo, newFrom, newTo) {\n    let oldRange = oldTo - oldFrom;\n    let proportion = (n - oldFrom) / oldRange;\n    let newRange = newTo - newFrom;\n    return newFrom + newRange * proportion;\n  }\n\n  calculatePosition(depth, index, total, rangeFrom, rangeTo) {\n    let radians = total == 1 ? 0.5 * 2 * Math.PI : index / total * 2 * Math.PI;\n    let radiansRemapped = this.remap(radians, 0, Math.PI * 2, rangeFrom, rangeTo);\n    let x = Math.cos(radiansRemapped) * depth * this.radiusPerIteration;\n    let y = Math.sin(radiansRemapped) * depth * this.radiusPerIteration;\n    let pos = new V2(x, y);\n    return this.calculateOffset(pos);\n  }\n\n  calculateOffset(pos) {\n    return new V2(pos.x + this.halfWidth, pos.y + this.halfHeight);\n  }\n\n  getSymbolSize(currentDepth) {\n    return 20 - currentDepth * 3;\n  }\n\n  symbolCallback(rawValue, params) {\n    console.log(\"Test\");\n    return 1;\n  }\n\n  calculatePositions(website, root) {\n    let data = [];\n    let linkData = [];\n    let rootPosition = this.calculatePosition(0, 1, 1, root.rangeFrom, root.rangeTo);\n    let rootNodeOptions = {\n      name: root.url,\n      x: rootPosition.x,\n      y: rootPosition.y,\n      category: 'root',\n      symbol: 'circle',\n      symbolSize: this.getSymbolSize(root.depth)\n    };\n    data.push(rootNodeOptions);\n    let visited = [];\n    let queue = [];\n    queue.push(root);\n\n    while (queue.length > 0) {\n      let currentNode = queue.shift();\n      visited.push(currentNode);\n      let links = currentNode.domChilds;\n      let radiansPerChild = (currentNode.rangeTo - currentNode.rangeFrom) / links.length;\n      let currentRadians = 0;\n\n      for (let i = 0; i < links.length; i++) {\n        let n = website.map.get(links[i]);\n        let graphEdgeLineStyleOption = {\n          curveness: 0,\n          width: 3,\n          color: 'blue',\n          opacity: 0.8,\n          type: 'solid',\n          cap: 'square',\n          join: 'bevel',\n          dashOffset: 10,\n          miterLimit: 10\n        };\n        let label = {\n          position: 'start',\n          distance: 10\n        };\n        let doubleSided = false;\n        /*\r\n        n.internal_links.forEach(element => {\r\n          if(element == currentNode.url)\r\n          {\r\n            doubleSided = true;\r\n          }\r\n        });\r\n        */\n\n        let symbol = [];\n        let symbolSize = [];\n\n        if (doubleSided) {\n          symbol = ['arrow', 'arrow'];\n          symbolSize = [10, 10];\n        } else {\n          symbol = ['none', 'arrow'];\n          symbolSize = [0, 10];\n        }\n\n        let graphEdgeOption = {\n          lineStyle: graphEdgeLineStyleOption,\n          label: label,\n          source: currentNode.url,\n          target: n.url,\n          symbol: symbol,\n          symbolSize: symbolSize,\n          value: 3\n        };\n        linkData.push(graphEdgeOption);\n\n        if (!visited.includes(n)) {\n          //let domName = n.getDOMStripedName();\n          let nodePosition = this.calculatePosition(n.depth, i, links.length, currentNode.rangeFrom, currentNode.rangeTo);\n          let nodeItemOptions = {\n            name: n.url,\n            x: nodePosition.x,\n            y: nodePosition.y,\n            category: 'not root',\n            draggable: true,\n            symbol: 'circle',\n            symbolSize: this.getSymbolSize(n.depth),\n            symbolOffset: 0,\n            symbolRotate: this.symbolCallback(\"\", \"\")\n          };\n          data.push(nodeItemOptions);\n          n.rangeFrom = currentNode.rangeFrom + currentRadians - radiansPerChild * 0.5;\n          currentRadians += radiansPerChild;\n          n.rangeTo = currentNode.rangeFrom + currentRadians - radiansPerChild * 0.5;\n          queue.push(n);\n        }\n      }\n    }\n\n    let graphData = new GraphData(data, linkData);\n    return graphData;\n  }\n\n  onChartMouseOver(ec) {//console.log(\"hover on \" + ec.name);\n  }\n\n  onChartClick(ec) {\n    let n = this.website.map.get(ec.name);\n\n    if (n != undefined) {\n      this.host.node = n;\n      this.host.nodeName = n.url;\n      this.showIntMedia(n.intMedia);\n      return;\n    }\n  }\n\n  showConnections() {\n    this.connectionsActive = !this.connectionsActive;\n    this.showGraph();\n  }\n\n  showLabels() {\n    this.labelsActive = !this.labelsActive;\n    this.showGraph();\n  }\n\n  deselectAll() {\n    this.showIntMedia(this.website.internalMedia);\n  }\n\n  prepareWebsite(name) {\n    let dictElements = JSON.parse(JSON.stringify(data));\n    let nodeMap = new Map();\n    let mediaIntGlobal = new Map();\n\n    for (let index = 0; index < dictElements.length; index++) {\n      const element = dictElements[index];\n      console.log(dictElements[index].depth);\n      element;\n      let pdi = \"\";\n      let di = \"\";\n      let url = \"\";\n      let linksInt = [];\n      let mediaInt = new Map();\n      let linksExt = [];\n      let mediaExt = [];\n      Object.entries(element).forEach(([key, value]) => {\n        if (key.includes('parentDocId')) {\n          pdi = value;\n        } else if (key.includes('docId')) {\n          di = value;\n        } else if (key.includes(':int:media:')) {\n          if (!mediaInt.has(value)) {\n            mediaInt.set(value, 1);\n          } else {\n            mediaInt.set(value, mediaInt.get(value) + 1);\n          } //set up global media counter\n\n\n          if (!mediaIntGlobal.has(value)) {\n            mediaIntGlobal.set(value, 1);\n          } else {\n            mediaIntGlobal.set(value, mediaIntGlobal.get(value) + 1);\n          }\n        } else if (key.includes(':int:')) {\n          linksInt.push(value);\n        } else if (key.includes(':ext:media:')) {\n          mediaExt.push(value);\n        } else if (key.includes(':ext:')) {\n          linksExt.push(value);\n        } else if (key.includes('url')) {\n          url = value;\n        }\n      });\n      let n = new NodeFromJson();\n      n.url = url;\n      n.parentDocId = pdi;\n      n.docId = di;\n      n.extMedia = mediaExt;\n      n.intMedia = mediaInt;\n      n.extLinks = linksExt;\n      n.intLinks = linksInt;\n      n.getDepth();\n      n.getDOMParent();\n\n      if (n.depth >= 0) {\n        nodeMap.set(n.url, n);\n      }\n    }\n\n    nodeMap.forEach((node, key) => {\n      if (node.domParent != \"\") {\n        let parent = nodeMap.get(node.domParent);\n\n        if (parent != undefined) {\n          parent.domChilds.push(key);\n        }\n      }\n    });\n    console.log(nodeMap);\n    let website = new WebsiteMap(name, nodeMap, mediaIntGlobal);\n    return website;\n  }\n\n  mapTo2DMap(media) {\n    let ret = [];\n    let rowDict = [];\n    let rowIndex = 0;\n    let column = 0;\n    media.forEach((amount, url) => {\n      rowDict.push(url);\n      column++;\n\n      if (column > 5) {\n        column = 0;\n        ret.push(rowDict);\n        rowDict = [];\n        rowIndex++;\n      }\n    });\n    console.log(ret);\n    return ret;\n  }\n\n  showIntMedia(media) {\n    let transformed = this.mapTo2DMap(media);\n    this.host.images = transformed;\n  }\n  /**\r\n   * The method fetches, saves and prepares the data for the Creation of the Website Graph. Approximately 200 Nodes,\r\n   * that were crawled by the Worker and saved into Redis, get fetched. The data is saved into dictionaries, adapting to\r\n   * the Data structure that was created in the Backend. Finally, the Nodes for the Graph are created.\r\n   */\n\n\n  initRealData() {\n    /*\r\n    let nodeMap : Map<string, NodeFromJson> = new Map<string, NodeFromJson>();\r\n    this.loading = true;\r\n    this.errorMessage = \"\";\r\n    this.websiteService.getWebsiteNodes(this.websiteNameForGraph)\r\n      .subscribe(\r\n        response => {                           //next() callback\r\n          console.log('response received')\r\n          //this.websites = response;\r\n          let dictElements : {[index:string] : string}[] = JSON.parse(JSON.stringify(response))\r\n     \r\n          for (let index = 0; index < dictElements.length; index++) {\r\n            const element  : {[index:string] : string} = dictElements[index];\r\n      \r\n            let pdi : string = \"\";\r\n            let di : string = \"\";\r\n            let url : string = \"\";\r\n            let linksInt : string[] = [];\r\n            let mediaInt : string[] = [];\r\n            let linksExt : string[] = [];\r\n            let mediaExt : string[] = [];\r\n      \r\n            Object.entries(element).forEach(\r\n              ([key, value]) =>\r\n              {\r\n                if(key.includes('parentDocId'))\r\n                {\r\n                  pdi = value;\r\n                }\r\n                else if(key.includes('docId'))\r\n                {\r\n                  di = value;\r\n                }\r\n                else if(key.includes(':int:media:'))\r\n                {\r\n                  mediaInt.push(value);\r\n                }\r\n                else if(key.includes(':int:'))\r\n                {\r\n                  linksInt.push(value);\r\n                }\r\n                else if(key.includes(':ext:media:'))\r\n                {\r\n                  mediaExt.push(value);\r\n                }\r\n                else if(key.includes(':ext:'))\r\n                {\r\n                  linksExt.push(value);\r\n                }\r\n                else if(key.includes('url'))\r\n                {\r\n                  url = value;\r\n                }\r\n                \r\n              }\r\n            );\r\n            \r\n            let n : NodeFromJson = new NodeFromJson();\r\n            n.url = url;\r\n            n.parentDocId = pdi;\r\n            n.docId = di;\r\n            n.extMedia = mediaExt;\r\n            n.intMedia = mediaInt;\r\n            n.extLinks = linksExt;\r\n            n.intLinks = linksInt;\r\n      \r\n            n.getDepth();\r\n            n.getDOMParent();\r\n            if(n.depth >= 0)\r\n            {\r\n              nodeMap.set(n.url, n);\r\n            }\r\n          }\r\n      \r\n          nodeMap.forEach((node: NodeFromJson, key: string) =>\r\n          {\r\n            if(node.domParent != \"\")\r\n            {\r\n              let parent = nodeMap.get(node.domParent);\r\n              if(parent != undefined)\r\n              {\r\n                parent.domChilds.push(key);\r\n              }\r\n            }\r\n          });\r\n        console.log(\"NodeMap: \")\r\n        console.log(nodeMap)\r\n        console.log(\"End reached\")\r\n        this.nodeMap = nodeMap;\r\n      \r\n        },\r\n        (error) => {                              //error() callback\r\n          console.error('Request failed with error')\r\n          this.errorMessage = error;\r\n          this.loading = false;\r\n        },\r\n        () => {                                   //complete() callback\r\n          console.error('Request completed')      //This is actually not needed\r\n          this.loading = false;\r\n        })\r\n        */\n\n    return _asyncToGenerator(function* () {})();\n  }\n  /**\r\n   * The method is called when the User wants to visualize the Website-Structure-Graph for a domain\r\n   * of his/her choice. First the needed data that was crawled by the Worker gets fetched and prepared\r\n   * in the initRealData()-Method. With this data a Website-Object is created and initialized. The positions\r\n   * of the contained links get determined and the Graph gets configured and initialized, too.\r\n   *\r\n   */\n\n\n  getWebsiteGraph() {\n    /*\r\n    console.log(this.websiteNameForGraph);\r\n    await this.initRealData();\r\n    this.website = new WebsiteMap(this.websiteNameForGraph, this.nodeMap);\r\n    console.log(this.website);\r\n    let root : NodeFromJson = this.website.map.get(\"https://www.\"+ this.websiteNameForGraph + \"/\") as NodeFromJson;\r\n    */\n\n    return _asyncToGenerator(function* () {})();\n  }\n\n  ngOnInit() {\n    this.prepareGraph();\n    this.showGraph();\n  }\n\n  prepareGraph() {\n    this.website = this.prepareWebsite(\"Tagesschau.de\");\n    let root = this.website.map.get(\"https://www.tagesschau.de/\");\n    let img = document.getElementById(\"img\");\n    img === null || img === void 0 ? void 0 : img.setAttribute(\"src\", '../../assets/Images/NodeTest.png');\n    this.graphData = this.calculatePositions(this.website, root);\n    let text = new graphic.Text();\n    text.style.text = \"Hello\";\n  }\n\n  showGraph() {\n    let edges = this.connectionsActive ? this.graphData.linkData : undefined;\n    let graphSeriesOptions = {\n      cursor: 'hand',\n      colorBy: 'data',\n      hoverLayerThreshold: 10,\n      selectedMode: 'multiple',\n      name: 'Sitemap',\n      type: 'graph',\n      //coordinateSystem: 'none',\n      legendHoverLink: false,\n      layout: 'none',\n      nodes: this.graphData.nodeData,\n      edges: edges,\n      draggable: false,\n      roam: true,\n      color: '#DF4477',\n      nodeScaleRatio: 0.6,\n      label: {\n        fontStyle: 'normal',\n        show: this.labelsActive,\n        color: 'black',\n        overflow: 'truncate',\n        tag: '!!!!!!'\n      },\n      itemStyle: {\n        opacity: 1,\n        //color :  'red'\n\n        /*\r\n        color :\r\n        {\r\n          svgElement : svgElement,\r\n          svgWidth : 10,\r\n          svgHeight : 10,\r\n          type : 'pattern',\r\n          x : 1,\r\n          y : 1,\r\n          rotation : 0,\r\n          scaleX : 1,\r\n          scaleY : 1\r\n        }\r\n        */\n        //RADIAL GRADIENT\n        color: {\n          type: 'radial',\n          x: 0.5,\n          y: 0.5,\n          r: 0.5,\n          colorStops: [{\n            offset: 0.0,\n            color: 'red'\n          }, {\n            offset: 1.0,\n            color: 'purple'\n          }],\n          global: false\n        }\n        /*\r\n        //LINEAR GRADIENT\r\n        color:\r\n        {\r\n          {\r\n          type : 'linear',\r\n          x : 0.1,\r\n          y : 1,\r\n          x2 : 0.3,\r\n          y2 : 1,\r\n          colorStops : [\r\n            {\r\n              offset : 0.3,\r\n              color : 'red'\r\n            },\r\n            {\r\n              offset : 0.7,\r\n              color : 'blue'\r\n            }]\r\n          }\r\n        }\r\n        */\n\n        /*\r\n        color :\r\n        {\r\n          image : img,\r\n          repeat : 'repeat'\r\n        }\r\n        */\n\n      },\n      lineStyle: {\n        curveness: 1\n      },\n      emphasis: {\n        scale: false,\n        label: {\n          show: true,\n          rotate: 0,\n          valueAnimation: true,\n          color: 'red',\n          fontStyle: 'normal',\n          fontWeight: 'bolder',\n          backgroundColor: 'blue',\n          height: 20\n        }\n      },\n      select: {\n        label: {\n          color: 'green'\n        }\n      }\n    };\n    this.options = {\n      title: {\n        text: this.website.name\n      },\n      tooltip: {},\n      animationDurationUpdate: 1500,\n      animationEasingUpdate: 'quinticInOut',\n      series: [graphSeriesOptions]\n    };\n    let map = graphSeriesOptions.selectedMap;\n  }\n  /**\r\n   * The User tells the Server which Website it should crawl next, so a Graph can be vusialized later on for\r\n   * this Website. The POST-Request to the Server is initialized and the Answer of the Server is read and told\r\n   * to the User. For that purpose, the crawlWebsite-Method returns an Observable which is subscribed upon.\r\n   */\n\n\n  crawlWebsite() {\n    this.crawledWebsiteID++;\n    this.websiteService.crawlWebsite(this.websiteNameForCrawler, this.crawledWebsiteID).subscribe({\n      next: data => {\n        this.postId = data.id;\n        console.log(data);\n        alert(data.body[0].toString() + \" is now starting to get crawled!\");\n      },\n      error: error => {\n        this.errorMessage = error.error;\n        console.error('There was an error!', error);\n        alert(this.errorMessage);\n      }\n    });\n  }\n\n  ngAfterViewInit() {\n    console.log(\"NODEINFO?\", this.host);\n  }\n\n}\n\nSimplegraphComponent.ɵfac = function SimplegraphComponent_Factory(t) {\n  return new (t || SimplegraphComponent)(i0.ɵɵdirectiveInject(i1.WebsiteService));\n};\n\nSimplegraphComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: SimplegraphComponent,\n  selectors: [[\"app-simplegraph\"]],\n  viewQuery: function SimplegraphComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(NodeInfoComponent, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.host = _t.first);\n    }\n  },\n  decls: 22,\n  vars: 5,\n  consts: [[1, \"clearfix\"], [1, \"headerOption\"], [\"type\", \"text\", \"name\", \"websiteNameForCrawler\", 3, \"ngModel\", \"ngModelChange\"], [\"color\", \"#800080\", \"text\", \"Crawl new Website\", 3, \"btnClick\"], [\"type\", \"text\", \"name\", \"websiteNameForGraph\", 3, \"ngModel\", \"ngModelChange\"], [\"color\", \"#800080\", \"text\", \"Create Website Graph\", 3, \"btnClick\"], [4, \"ngIf\"], [\"class\", \"alert alert-warning\", 4, \"ngIf\"], [1, \"outer\"], [1, \"header\"], [\"fontSize\", \"8pt\", \"color\", \"#666\", \"toggle\", \"\", \"toggleColor\", \"#333\", \"text\", \"Deselect All\", 1, \"headerOption\", 3, \"btnClick\"], [\"fontSize\", \"8pt\", \"color\", \"#666\", \"toggle\", \"\", \"toggleColor\", \"#333\", \"text\", \"Show Connections\", 1, \"headerOption\", 3, \"btnClick\"], [\"fontSize\", \"8pt\", \"color\", \"#666\", \"toggle\", \"\", \"toggleColor\", \"#333\", \"text\", \"Show Labels\", 1, \"headerOption\", 3, \"btnClick\"], [1, \"graph\"], [\"echarts\", \"\", 1, \"demo-chart\", 3, \"options\", \"chartMouseOver\", \"chartClick\"], [1, \"alert\", \"alert-warning\"]],\n  template: function SimplegraphComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelementStart(1, \"div\", 1);\n      i0.ɵɵelementStart(2, \"input\", 2);\n      i0.ɵɵlistener(\"ngModelChange\", function SimplegraphComponent_Template_input_ngModelChange_2_listener($event) {\n        return ctx.websiteNameForCrawler = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"div\", 1);\n      i0.ɵɵelementStart(4, \"app-button\", 3);\n      i0.ɵɵlistener(\"btnClick\", function SimplegraphComponent_Template_app_button_btnClick_4_listener() {\n        return ctx.crawlWebsite();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"div\", 0);\n      i0.ɵɵelementStart(6, \"div\", 1);\n      i0.ɵɵelementStart(7, \"input\", 4);\n      i0.ɵɵlistener(\"ngModelChange\", function SimplegraphComponent_Template_input_ngModelChange_7_listener($event) {\n        return ctx.websiteNameForGraph = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"div\", 1);\n      i0.ɵɵelementStart(9, \"app-button\", 5);\n      i0.ɵɵlistener(\"btnClick\", function SimplegraphComponent_Template_app_button_btnClick_9_listener() {\n        return ctx.getWebsiteGraph();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(10, SimplegraphComponent_div_10_Template, 2, 0, \"div\", 6);\n      i0.ɵɵtemplate(11, SimplegraphComponent_div_11_Template, 5, 3, \"div\", 7);\n      i0.ɵɵelementStart(12, \"div\", 8);\n      i0.ɵɵelementStart(13, \"div\", 0);\n      i0.ɵɵelementStart(14, \"div\", 9);\n      i0.ɵɵelementStart(15, \"app-button\", 10);\n      i0.ɵɵlistener(\"btnClick\", function SimplegraphComponent_Template_app_button_btnClick_15_listener() {\n        return ctx.deselectAll();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(16, \"app-button\", 11);\n      i0.ɵɵlistener(\"btnClick\", function SimplegraphComponent_Template_app_button_btnClick_16_listener() {\n        return ctx.showConnections();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(17, \"app-button\", 12);\n      i0.ɵɵlistener(\"btnClick\", function SimplegraphComponent_Template_app_button_btnClick_17_listener() {\n        return ctx.showLabels();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(18, \"div\", 13);\n      i0.ɵɵelementStart(19, \"div\", 14);\n      i0.ɵɵlistener(\"chartMouseOver\", function SimplegraphComponent_Template_div_chartMouseOver_19_listener($event) {\n        return ctx.onChartMouseOver($event);\n      })(\"chartClick\", function SimplegraphComponent_Template_div_chartClick_19_listener($event) {\n        return ctx.onChartClick($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(20, \"div\");\n      i0.ɵɵelement(21, \"app-node-info\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngModel\", ctx.websiteNameForCrawler);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngModel\", ctx.websiteNameForGraph);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ctx.loading);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.errorMessage);\n      i0.ɵɵadvance(8);\n      i0.ɵɵproperty(\"options\", ctx.options);\n    }\n  },\n  styles: [\".outer[_ngcontent-%COMP%]\\r\\n{\\r\\n  margin: 10px;\\r\\n}\\r\\n\\r\\n.demo-chart[_ngcontent-%COMP%] \\r\\n{\\r\\n    max-width: 1000px;\\r\\n    margin: 10px auto;\\r\\n    overflow: auto;\\r\\n    min-height: 300px;\\r\\n    border: 1px solid steelblue;\\r\\n    background-color: rgb(245, 245, 245);\\r\\n    padding: 10px;\\r\\n    \\r\\n}\\r\\n\\r\\n.graph[_ngcontent-%COMP%]\\r\\n{\\r\\n  clear: both;\\r\\n  margin-right:2%;\\r\\n}\\r\\n\\r\\n.header[_ngcontent-%COMP%]\\r\\n{\\r\\n  border: solid, black;\\r\\n  background-color:aqua;\\r\\n}\\r\\n\\r\\n.headerOption[_ngcontent-%COMP%]\\r\\n{\\r\\n  float: left;\\r\\n  margin: 2px;\\r\\n}\\r\\n\\r\\n.second_div[_ngcontent-%COMP%] {\\r\\n  width:50px; \\r\\n  height:50px; \\r\\n  background-color:green;\\r\\n  float: left;\\r\\n}\\r\\n\\r\\n.third_div[_ngcontent-%COMP%] {\\r\\n  width:50px; \\r\\n  height:50px; \\r\\n  background-color:blue;\\r\\n  float: left;\\r\\n}\\r\\n\\r\\n.clearfix[_ngcontent-%COMP%]:after {\\r\\n  visibility: hidden;\\r\\n  display: block;\\r\\n  font-size: 0;\\r\\n  content: \\\" \\\";\\r\\n  clear: both;\\r\\n  height: 0;\\r\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNpbXBsZWdyYXBoLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0VBRUUsWUFBWTtBQUNkOztBQUVBOztJQUVJLGlCQUFpQjtJQUNqQixpQkFBaUI7SUFDakIsY0FBYztJQUNkLGlCQUFpQjtJQUNqQiwyQkFBMkI7SUFDM0Isb0NBQW9DO0lBQ3BDLGFBQWE7SUFDYixzQkFBc0I7QUFDMUI7O0FBRUE7O0VBRUUsV0FBVztFQUNYLGVBQWU7QUFDakI7O0FBRUE7O0VBRUUsb0JBQW9CO0VBQ3BCLHFCQUFxQjtBQUN2Qjs7QUFFQTs7RUFFRSxXQUFXO0VBQ1gsV0FBVztBQUNiOztBQUVBO0VBQ0UsVUFBVTtFQUNWLFdBQVc7RUFDWCxzQkFBc0I7RUFDdEIsV0FBVztBQUNiOztBQUNBO0VBQ0UsVUFBVTtFQUNWLFdBQVc7RUFDWCxxQkFBcUI7RUFDckIsV0FBVztBQUNiOztBQUNBO0VBQ0Usa0JBQWtCO0VBQ2xCLGNBQWM7RUFDZCxZQUFZO0VBQ1osWUFBWTtFQUNaLFdBQVc7RUFDWCxTQUFTO0FBQ1giLCJmaWxlIjoic2ltcGxlZ3JhcGguY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5vdXRlclxyXG57XHJcbiAgbWFyZ2luOiAxMHB4O1xyXG59XHJcblxyXG4uZGVtby1jaGFydCBcclxue1xyXG4gICAgbWF4LXdpZHRoOiAxMDAwcHg7XHJcbiAgICBtYXJnaW46IDEwcHggYXV0bztcclxuICAgIG92ZXJmbG93OiBhdXRvO1xyXG4gICAgbWluLWhlaWdodDogMzAwcHg7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCBzdGVlbGJsdWU7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjQ1LCAyNDUsIDI0NSk7XHJcbiAgICBwYWRkaW5nOiAxMHB4O1xyXG4gICAgLypib3JkZXItcmFkaXVzOiA1cHg7Ki9cclxufVxyXG5cclxuLmdyYXBoXHJcbntcclxuICBjbGVhcjogYm90aDtcclxuICBtYXJnaW4tcmlnaHQ6MiU7XHJcbn1cclxuXHJcbi5oZWFkZXJcclxue1xyXG4gIGJvcmRlcjogc29saWQsIGJsYWNrO1xyXG4gIGJhY2tncm91bmQtY29sb3I6YXF1YTtcclxufVxyXG5cclxuLmhlYWRlck9wdGlvblxyXG57XHJcbiAgZmxvYXQ6IGxlZnQ7XHJcbiAgbWFyZ2luOiAycHg7XHJcbn1cclxuXHJcbi5zZWNvbmRfZGl2IHtcclxuICB3aWR0aDo1MHB4OyBcclxuICBoZWlnaHQ6NTBweDsgXHJcbiAgYmFja2dyb3VuZC1jb2xvcjpncmVlbjtcclxuICBmbG9hdDogbGVmdDtcclxufSBcclxuLnRoaXJkX2RpdiB7XHJcbiAgd2lkdGg6NTBweDsgXHJcbiAgaGVpZ2h0OjUwcHg7IFxyXG4gIGJhY2tncm91bmQtY29sb3I6Ymx1ZTtcclxuICBmbG9hdDogbGVmdDtcclxufVxyXG4uY2xlYXJmaXg6YWZ0ZXIge1xyXG4gIHZpc2liaWxpdHk6IGhpZGRlbjtcclxuICBkaXNwbGF5OiBibG9jaztcclxuICBmb250LXNpemU6IDA7XHJcbiAgY29udGVudDogXCIgXCI7XHJcbiAgY2xlYXI6IGJvdGg7XHJcbiAgaGVpZ2h0OiAwO1xyXG59Il19 */\"]\n});\n\nclass GraphData {\n  constructor(t_nodeData, t_linkData) {\n    this.nodeData = t_nodeData;\n    this.linkData = t_linkData;\n  }\n\n}\n\nclass V2 {\n  constructor(t_x, t_y) {\n    this.x = t_x;\n    this.y = t_y;\n  }\n\n}\n\nclass ShadowOptionMixin {}\n\nclass LineStyleOption extends ShadowOptionMixin {}\n\nclass GraphEdgeLineStyleOption extends LineStyleOption {}\n\nclass LineLabelOption {}\n\nclass SeriesLineLabelOption extends LineLabelOption {}\n\nclass GraphEdgeOptions {}\n\nclass GraphNodeItemOption {}\n/******************************** */\n//COPY DATASTRUCTURE FROM BACKEND\n\n/******************************** */\n\n\nclass NodeFromJson {\n  constructor() {\n    this.domParent = \"\";\n    this.domChilds = [];\n    this.rangeFrom = 0;\n    this.rangeTo = Math.PI * 2;\n  }\n\n  getDOMStripedName() {\n    if (this.depth <= 0 || this.url.length <= 0) return this.url;\n\n    for (let index = this.url.length - 1; index >= 0; index--) {\n      const element = this.url[index];\n\n      if (element == '/') {\n        return this.url.slice(index);\n      }\n    }\n\n    return \"\";\n  }\n\n  getDOMParent() {\n    if (this.depth <= 0) return;\n    let slashCount = this.depth + 2;\n\n    if (\"this.url.includes('.html')\") {\n      slashCount--;\n    }\n\n    for (let index = 0; index < this.url.length; index++) {\n      const element = this.url[index];\n\n      if (element == '/') {\n        slashCount--;\n      }\n\n      if (slashCount == 0) {\n        this.domParent = this.url.substring(0, index + 2);\n      }\n    }\n  }\n\n  getDepth() {\n    let count = -3;\n\n    for (let index = 0; index < this.url.length; index++) {\n      const element = this.url[index];\n\n      if (element == '/') {\n        count++;\n      }\n    }\n\n    if (this.url.includes('.html') || this.url.includes('.shtml')) {\n      count++;\n    }\n\n    this.depth = count;\n  }\n\n}\n\nclass WebsiteMap {\n  constructor(t_name, t_map, t_internalMedia) {\n    this.name = t_name;\n    this.map = t_map;\n    this.internalMedia = t_internalMedia;\n  }\n\n}\n\nexport { NodeFromJson };","map":{"version":3,"sources":["C:/Dev/Angular/netzkriecher-frontend/src/app/components/simplegraph/simplegraph.component.ts"],"names":["graphic","data","NodeInfoComponent","i0","i1","SimplegraphComponent_div_10_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","SimplegraphComponent_div_11_Template","ɵɵpipe","ctx_r1","ɵɵnextContext","ɵɵadvance","ɵɵtextInterpolate1","ɵɵpipeBind1","errorMessage","SimplegraphComponent","constructor","websiteService","totalWidth","halfWidth","totalHeight","halfHeight","nodeSizeFalloff","radiusPerIteration","websiteNameForGraph","websiteNameForCrawler","loading","crawledWebsiteID","connectionsActive","labelsActive","remap","n","oldFrom","oldTo","newFrom","newTo","oldRange","proportion","newRange","calculatePosition","depth","index","total","rangeFrom","rangeTo","radians","Math","PI","radiansRemapped","x","cos","y","sin","pos","V2","calculateOffset","getSymbolSize","currentDepth","symbolCallback","rawValue","params","console","log","calculatePositions","website","root","linkData","rootPosition","rootNodeOptions","name","url","category","symbol","symbolSize","push","visited","queue","length","currentNode","shift","links","domChilds","radiansPerChild","currentRadians","i","map","get","graphEdgeLineStyleOption","curveness","width","color","opacity","type","cap","join","dashOffset","miterLimit","label","position","distance","doubleSided","graphEdgeOption","lineStyle","source","target","value","includes","nodePosition","nodeItemOptions","draggable","symbolOffset","symbolRotate","graphData","GraphData","onChartMouseOver","ec","onChartClick","undefined","host","node","nodeName","showIntMedia","intMedia","showConnections","showGraph","showLabels","deselectAll","internalMedia","prepareWebsite","dictElements","JSON","parse","stringify","nodeMap","Map","mediaIntGlobal","element","pdi","di","linksInt","mediaInt","linksExt","mediaExt","Object","entries","forEach","key","has","set","NodeFromJson","parentDocId","docId","extMedia","extLinks","intLinks","getDepth","getDOMParent","domParent","parent","WebsiteMap","mapTo2DMap","media","ret","rowDict","rowIndex","column","amount","transformed","images","initRealData","getWebsiteGraph","ngOnInit","prepareGraph","img","document","getElementById","setAttribute","text","Text","style","edges","graphSeriesOptions","cursor","colorBy","hoverLayerThreshold","selectedMode","legendHoverLink","layout","nodes","nodeData","roam","nodeScaleRatio","fontStyle","show","overflow","tag","itemStyle","r","colorStops","offset","global","emphasis","scale","rotate","valueAnimation","fontWeight","backgroundColor","height","select","options","title","tooltip","animationDurationUpdate","animationEasingUpdate","series","selectedMap","crawlWebsite","subscribe","next","postId","id","alert","body","toString","error","ngAfterViewInit","ɵfac","SimplegraphComponent_Factory","t","ɵɵdirectiveInject","WebsiteService","ɵcmp","ɵɵdefineComponent","selectors","viewQuery","SimplegraphComponent_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","decls","vars","consts","template","SimplegraphComponent_Template","ɵɵlistener","SimplegraphComponent_Template_input_ngModelChange_2_listener","$event","SimplegraphComponent_Template_app_button_btnClick_4_listener","SimplegraphComponent_Template_input_ngModelChange_7_listener","SimplegraphComponent_Template_app_button_btnClick_9_listener","ɵɵtemplate","SimplegraphComponent_Template_app_button_btnClick_15_listener","SimplegraphComponent_Template_app_button_btnClick_16_listener","SimplegraphComponent_Template_app_button_btnClick_17_listener","SimplegraphComponent_Template_div_chartMouseOver_19_listener","SimplegraphComponent_Template_div_chartClick_19_listener","ɵɵelement","ɵɵproperty","styles","t_nodeData","t_linkData","t_x","t_y","ShadowOptionMixin","LineStyleOption","GraphEdgeLineStyleOption","LineLabelOption","SeriesLineLabelOption","GraphEdgeOptions","GraphNodeItemOption","getDOMStripedName","slice","slashCount","substring","count","t_name","t_map","t_internalMedia"],"mappings":"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","sourcesContent":["import { graphic } from 'echarts';\r\nimport * as data from '../../../assets/tagesschauNew.json';\r\nimport { NodeInfoComponent } from 'src/app/node-info/node-info.component';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"src/app/website.service\";\r\nfunction SimplegraphComponent_div_10_Template(rf, ctx) { if (rf & 1) {\r\n    i0.ɵɵelementStart(0, \"div\");\r\n    i0.ɵɵtext(1, \"loading...\");\r\n    i0.ɵɵelementEnd();\r\n} }\r\nfunction SimplegraphComponent_div_11_Template(rf, ctx) { if (rf & 1) {\r\n    i0.ɵɵelementStart(0, \"div\", 15);\r\n    i0.ɵɵelementStart(1, \"strong\");\r\n    i0.ɵɵtext(2, \"Warning!\");\r\n    i0.ɵɵelementEnd();\r\n    i0.ɵɵtext(3);\r\n    i0.ɵɵpipe(4, \"json\");\r\n    i0.ɵɵelementEnd();\r\n} if (rf & 2) {\r\n    const ctx_r1 = i0.ɵɵnextContext();\r\n    i0.ɵɵadvance(3);\r\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(4, 1, ctx_r1.errorMessage), \" \");\r\n} }\r\n/*\r\nconsiderations for node placement:\r\n- for first layer: for all childs of root, sum up all their children. Then try to find a configuration,\r\nwhere the 'center of mass' is at the root node. (adding up vectors * weight should equal 0 at the end)\r\n- might not work, because a valid strategy for that would also be to just dump all of the nodes at opposite ends\r\n\r\n- after finishing a whole depth layer, there might be a lot of space left unoccupied in that layer\r\n- the childnoderanges for the layer before could be accordingly ajusted to use up the whole 360°\r\n- (or atleast space them out more)\r\n\r\n*/\r\nexport class SimplegraphComponent {\r\n    constructor(websiteService) {\r\n        this.websiteService = websiteService;\r\n        this.totalWidth = 1000;\r\n        this.halfWidth = 500;\r\n        this.totalHeight = 1000;\r\n        this.halfHeight = 500;\r\n        this.nodeSizeFalloff = 200;\r\n        this.radiusPerIteration = 100;\r\n        this.websiteNameForGraph = \"\";\r\n        this.websiteNameForCrawler = \"\";\r\n        this.loading = false;\r\n        this.crawledWebsiteID = 2;\r\n        //initTestData() : Map<string, NodeFromJson>\r\n        this.connectionsActive = true;\r\n        this.labelsActive = false;\r\n    }\r\n    /*\r\n    ngOnInit(): void\r\n    {\r\n      this.prepareGraph();\r\n      this.showGraph();\r\n    }*/\r\n    remap(n, oldFrom, oldTo, newFrom, newTo) {\r\n        let oldRange = oldTo - oldFrom;\r\n        let proportion = (n - oldFrom) / oldRange;\r\n        let newRange = newTo - newFrom;\r\n        return newFrom + newRange * proportion;\r\n    }\r\n    calculatePosition(depth, index, total, rangeFrom, rangeTo) {\r\n        let radians = (total == 1) ? 0.5 * 2 * Math.PI : (index / total) * 2 * Math.PI;\r\n        let radiansRemapped = this.remap(radians, 0, Math.PI * 2, rangeFrom, rangeTo);\r\n        let x = Math.cos(radiansRemapped) * depth * this.radiusPerIteration;\r\n        let y = Math.sin(radiansRemapped) * depth * this.radiusPerIteration;\r\n        let pos = new V2(x, y);\r\n        return this.calculateOffset(pos);\r\n    }\r\n    calculateOffset(pos) {\r\n        return new V2(pos.x + this.halfWidth, pos.y + this.halfHeight);\r\n    }\r\n    getSymbolSize(currentDepth) {\r\n        return 20 - (currentDepth * 3);\r\n    }\r\n    symbolCallback(rawValue, params) {\r\n        console.log(\"Test\");\r\n        return 1;\r\n    }\r\n    calculatePositions(website, root) {\r\n        let data = [];\r\n        let linkData = [];\r\n        let rootPosition = this.calculatePosition(0, 1, 1, root.rangeFrom, root.rangeTo);\r\n        let rootNodeOptions = {\r\n            name: root.url,\r\n            x: rootPosition.x,\r\n            y: rootPosition.y,\r\n            category: 'root',\r\n            symbol: 'circle',\r\n            symbolSize: this.getSymbolSize(root.depth)\r\n        };\r\n        data.push(rootNodeOptions);\r\n        let visited = [];\r\n        let queue = [];\r\n        queue.push(root);\r\n        while (queue.length > 0) {\r\n            let currentNode = queue.shift();\r\n            visited.push(currentNode);\r\n            let links = currentNode.domChilds;\r\n            let radiansPerChild = (currentNode.rangeTo - currentNode.rangeFrom) / links.length;\r\n            let currentRadians = 0;\r\n            for (let i = 0; i < links.length; i++) {\r\n                let n = website.map.get(links[i]);\r\n                let graphEdgeLineStyleOption = {\r\n                    curveness: 0,\r\n                    width: 3,\r\n                    color: 'blue',\r\n                    opacity: 0.8,\r\n                    type: 'solid',\r\n                    cap: 'square',\r\n                    join: 'bevel',\r\n                    dashOffset: 10,\r\n                    miterLimit: 10,\r\n                };\r\n                let label = {\r\n                    position: 'start',\r\n                    distance: 10\r\n                };\r\n                let doubleSided = false;\r\n                /*\r\n                n.internal_links.forEach(element => {\r\n                  if(element == currentNode.url)\r\n                  {\r\n                    doubleSided = true;\r\n                  }\r\n                });\r\n                */\r\n                let symbol = [];\r\n                let symbolSize = [];\r\n                if (doubleSided) {\r\n                    symbol = ['arrow', 'arrow'];\r\n                    symbolSize = [10, 10];\r\n                }\r\n                else {\r\n                    symbol = ['none', 'arrow'];\r\n                    symbolSize = [0, 10];\r\n                }\r\n                let graphEdgeOption = {\r\n                    lineStyle: graphEdgeLineStyleOption,\r\n                    label: label,\r\n                    source: currentNode.url,\r\n                    target: n.url,\r\n                    symbol: symbol,\r\n                    symbolSize: symbolSize,\r\n                    value: 3\r\n                };\r\n                linkData.push(graphEdgeOption);\r\n                if (!visited.includes(n)) {\r\n                    //let domName = n.getDOMStripedName();\r\n                    let nodePosition = this.calculatePosition(n.depth, i, links.length, currentNode.rangeFrom, currentNode.rangeTo);\r\n                    let nodeItemOptions = {\r\n                        name: n.url,\r\n                        x: nodePosition.x,\r\n                        y: nodePosition.y,\r\n                        category: 'not root',\r\n                        draggable: true,\r\n                        symbol: 'circle',\r\n                        symbolSize: this.getSymbolSize(n.depth),\r\n                        symbolOffset: 0,\r\n                        symbolRotate: this.symbolCallback(\"\", \"\")\r\n                    };\r\n                    data.push(nodeItemOptions);\r\n                    n.rangeFrom = currentNode.rangeFrom + currentRadians - radiansPerChild * 0.5;\r\n                    currentRadians += radiansPerChild;\r\n                    n.rangeTo = currentNode.rangeFrom + currentRadians - radiansPerChild * 0.5;\r\n                    queue.push(n);\r\n                }\r\n            }\r\n        }\r\n        let graphData = new GraphData(data, linkData);\r\n        return graphData;\r\n    }\r\n    onChartMouseOver(ec) {\r\n        //console.log(\"hover on \" + ec.name);\r\n    }\r\n    onChartClick(ec) {\r\n        let n = this.website.map.get(ec.name);\r\n        if (n != undefined) {\r\n            this.host.node = n;\r\n            this.host.nodeName = n.url;\r\n            this.showIntMedia(n.intMedia);\r\n            return;\r\n        }\r\n    }\r\n    showConnections() {\r\n        this.connectionsActive = !this.connectionsActive;\r\n        this.showGraph();\r\n    }\r\n    showLabels() {\r\n        this.labelsActive = !this.labelsActive;\r\n        this.showGraph();\r\n    }\r\n    deselectAll() {\r\n        this.showIntMedia(this.website.internalMedia);\r\n    }\r\n    prepareWebsite(name) {\r\n        let dictElements = JSON.parse(JSON.stringify(data));\r\n        let nodeMap = new Map();\r\n        let mediaIntGlobal = new Map();\r\n        for (let index = 0; index < dictElements.length; index++) {\r\n            const element = dictElements[index];\r\n            console.log(dictElements[index].depth);\r\n            element;\r\n            let pdi = \"\";\r\n            let di = \"\";\r\n            let url = \"\";\r\n            let linksInt = [];\r\n            let mediaInt = new Map();\r\n            let linksExt = [];\r\n            let mediaExt = [];\r\n            Object.entries(element).forEach(([key, value]) => {\r\n                if (key.includes('parentDocId')) {\r\n                    pdi = value;\r\n                }\r\n                else if (key.includes('docId')) {\r\n                    di = value;\r\n                }\r\n                else if (key.includes(':int:media:')) {\r\n                    if (!mediaInt.has(value)) {\r\n                        mediaInt.set(value, 1);\r\n                    }\r\n                    else {\r\n                        mediaInt.set(value, (mediaInt.get(value) + 1));\r\n                    }\r\n                    //set up global media counter\r\n                    if (!mediaIntGlobal.has(value)) {\r\n                        mediaIntGlobal.set(value, 1);\r\n                    }\r\n                    else {\r\n                        mediaIntGlobal.set(value, (mediaIntGlobal.get(value) + 1));\r\n                    }\r\n                }\r\n                else if (key.includes(':int:')) {\r\n                    linksInt.push(value);\r\n                }\r\n                else if (key.includes(':ext:media:')) {\r\n                    mediaExt.push(value);\r\n                }\r\n                else if (key.includes(':ext:')) {\r\n                    linksExt.push(value);\r\n                }\r\n                else if (key.includes('url')) {\r\n                    url = value;\r\n                }\r\n            });\r\n            let n = new NodeFromJson();\r\n            n.url = url;\r\n            n.parentDocId = pdi;\r\n            n.docId = di;\r\n            n.extMedia = mediaExt;\r\n            n.intMedia = mediaInt;\r\n            n.extLinks = linksExt;\r\n            n.intLinks = linksInt;\r\n            n.getDepth();\r\n            n.getDOMParent();\r\n            if (n.depth >= 0) {\r\n                nodeMap.set(n.url, n);\r\n            }\r\n        }\r\n        nodeMap.forEach((node, key) => {\r\n            if (node.domParent != \"\") {\r\n                let parent = nodeMap.get(node.domParent);\r\n                if (parent != undefined) {\r\n                    parent.domChilds.push(key);\r\n                }\r\n            }\r\n        });\r\n        console.log(nodeMap);\r\n        let website = new WebsiteMap(name, nodeMap, mediaIntGlobal);\r\n        return website;\r\n    }\r\n    mapTo2DMap(media) {\r\n        let ret = [];\r\n        let rowDict = [];\r\n        let rowIndex = 0;\r\n        let column = 0;\r\n        media.forEach((amount, url) => {\r\n            rowDict.push(url);\r\n            column++;\r\n            if (column > 5) {\r\n                column = 0;\r\n                ret.push(rowDict);\r\n                rowDict = [];\r\n                rowIndex++;\r\n            }\r\n        });\r\n        console.log(ret);\r\n        return ret;\r\n    }\r\n    showIntMedia(media) {\r\n        let transformed = this.mapTo2DMap(media);\r\n        this.host.images = transformed;\r\n    }\r\n    /**\r\n     * The method fetches, saves and prepares the data for the Creation of the Website Graph. Approximately 200 Nodes,\r\n     * that were crawled by the Worker and saved into Redis, get fetched. The data is saved into dictionaries, adapting to\r\n     * the Data structure that was created in the Backend. Finally, the Nodes for the Graph are created.\r\n     */\r\n    async initRealData() {\r\n        /*\r\n        let nodeMap : Map<string, NodeFromJson> = new Map<string, NodeFromJson>();\r\n        this.loading = true;\r\n        this.errorMessage = \"\";\r\n        this.websiteService.getWebsiteNodes(this.websiteNameForGraph)\r\n          .subscribe(\r\n            response => {                           //next() callback\r\n              console.log('response received')\r\n              //this.websites = response;\r\n              let dictElements : {[index:string] : string}[] = JSON.parse(JSON.stringify(response))\r\n         \r\n              for (let index = 0; index < dictElements.length; index++) {\r\n                const element  : {[index:string] : string} = dictElements[index];\r\n          \r\n                let pdi : string = \"\";\r\n                let di : string = \"\";\r\n                let url : string = \"\";\r\n                let linksInt : string[] = [];\r\n                let mediaInt : string[] = [];\r\n                let linksExt : string[] = [];\r\n                let mediaExt : string[] = [];\r\n          \r\n                Object.entries(element).forEach(\r\n                  ([key, value]) =>\r\n                  {\r\n                    if(key.includes('parentDocId'))\r\n                    {\r\n                      pdi = value;\r\n                    }\r\n                    else if(key.includes('docId'))\r\n                    {\r\n                      di = value;\r\n                    }\r\n                    else if(key.includes(':int:media:'))\r\n                    {\r\n                      mediaInt.push(value);\r\n                    }\r\n                    else if(key.includes(':int:'))\r\n                    {\r\n                      linksInt.push(value);\r\n                    }\r\n                    else if(key.includes(':ext:media:'))\r\n                    {\r\n                      mediaExt.push(value);\r\n                    }\r\n                    else if(key.includes(':ext:'))\r\n                    {\r\n                      linksExt.push(value);\r\n                    }\r\n                    else if(key.includes('url'))\r\n                    {\r\n                      url = value;\r\n                    }\r\n                    \r\n                  }\r\n                );\r\n                \r\n                let n : NodeFromJson = new NodeFromJson();\r\n                n.url = url;\r\n                n.parentDocId = pdi;\r\n                n.docId = di;\r\n                n.extMedia = mediaExt;\r\n                n.intMedia = mediaInt;\r\n                n.extLinks = linksExt;\r\n                n.intLinks = linksInt;\r\n          \r\n                n.getDepth();\r\n                n.getDOMParent();\r\n                if(n.depth >= 0)\r\n                {\r\n                  nodeMap.set(n.url, n);\r\n                }\r\n              }\r\n          \r\n              nodeMap.forEach((node: NodeFromJson, key: string) =>\r\n              {\r\n                if(node.domParent != \"\")\r\n                {\r\n                  let parent = nodeMap.get(node.domParent);\r\n                  if(parent != undefined)\r\n                  {\r\n                    parent.domChilds.push(key);\r\n                  }\r\n                }\r\n              });\r\n            console.log(\"NodeMap: \")\r\n            console.log(nodeMap)\r\n            console.log(\"End reached\")\r\n            this.nodeMap = nodeMap;\r\n          \r\n            },\r\n            (error) => {                              //error() callback\r\n              console.error('Request failed with error')\r\n              this.errorMessage = error;\r\n              this.loading = false;\r\n            },\r\n            () => {                                   //complete() callback\r\n              console.error('Request completed')      //This is actually not needed\r\n              this.loading = false;\r\n            })\r\n            */\r\n    }\r\n    /**\r\n     * The method is called when the User wants to visualize the Website-Structure-Graph for a domain\r\n     * of his/her choice. First the needed data that was crawled by the Worker gets fetched and prepared\r\n     * in the initRealData()-Method. With this data a Website-Object is created and initialized. The positions\r\n     * of the contained links get determined and the Graph gets configured and initialized, too.\r\n     *\r\n     */\r\n    async getWebsiteGraph() {\r\n        /*\r\n        console.log(this.websiteNameForGraph);\r\n        await this.initRealData();\r\n        this.website = new WebsiteMap(this.websiteNameForGraph, this.nodeMap);\r\n        console.log(this.website);\r\n        let root : NodeFromJson = this.website.map.get(\"https://www.\"+ this.websiteNameForGraph + \"/\") as NodeFromJson;\r\n        */\r\n    }\r\n    ngOnInit() {\r\n        this.prepareGraph();\r\n        this.showGraph();\r\n    }\r\n    prepareGraph() {\r\n        this.website = this.prepareWebsite(\"Tagesschau.de\");\r\n        let root = this.website.map.get(\"https://www.tagesschau.de/\");\r\n        let img = document.getElementById(\"img\");\r\n        img === null || img === void 0 ? void 0 : img.setAttribute(\"src\", '../../assets/Images/NodeTest.png');\r\n        this.graphData = this.calculatePositions(this.website, root);\r\n        let text = new graphic.Text();\r\n        text.style.text = \"Hello\";\r\n    }\r\n    showGraph() {\r\n        let edges = this.connectionsActive ? this.graphData.linkData : undefined;\r\n        let graphSeriesOptions = {\r\n            cursor: 'hand',\r\n            colorBy: 'data',\r\n            hoverLayerThreshold: 10,\r\n            selectedMode: 'multiple',\r\n            name: 'Sitemap',\r\n            type: 'graph',\r\n            //coordinateSystem: 'none',\r\n            legendHoverLink: false,\r\n            layout: 'none',\r\n            nodes: this.graphData.nodeData,\r\n            edges: edges,\r\n            draggable: false,\r\n            roam: true,\r\n            color: '#DF4477',\r\n            nodeScaleRatio: 0.6,\r\n            label: {\r\n                fontStyle: 'normal',\r\n                show: this.labelsActive,\r\n                color: 'black',\r\n                overflow: 'truncate',\r\n                tag: '!!!!!!'\r\n            },\r\n            itemStyle: {\r\n                opacity: 1,\r\n                //color :  'red'\r\n                /*\r\n                color :\r\n                {\r\n                  svgElement : svgElement,\r\n                  svgWidth : 10,\r\n                  svgHeight : 10,\r\n                  type : 'pattern',\r\n                  x : 1,\r\n                  y : 1,\r\n                  rotation : 0,\r\n                  scaleX : 1,\r\n                  scaleY : 1\r\n                }\r\n                */\r\n                //RADIAL GRADIENT\r\n                color: {\r\n                    type: 'radial',\r\n                    x: 0.5,\r\n                    y: 0.5,\r\n                    r: 0.5,\r\n                    colorStops: [{\r\n                            offset: 0.0,\r\n                            color: 'red'\r\n                        },\r\n                        {\r\n                            offset: 1.0,\r\n                            color: 'purple'\r\n                        }\r\n                    ],\r\n                    global: false\r\n                }\r\n                /*\r\n                //LINEAR GRADIENT\r\n                color:\r\n                {\r\n                  {\r\n                  type : 'linear',\r\n                  x : 0.1,\r\n                  y : 1,\r\n                  x2 : 0.3,\r\n                  y2 : 1,\r\n                  colorStops : [\r\n                    {\r\n                      offset : 0.3,\r\n                      color : 'red'\r\n                    },\r\n                    {\r\n                      offset : 0.7,\r\n                      color : 'blue'\r\n                    }]\r\n                  }\r\n                }\r\n                */\r\n                /*\r\n                color :\r\n                {\r\n                  image : img,\r\n                  repeat : 'repeat'\r\n                }\r\n                */\r\n            },\r\n            lineStyle: {\r\n                curveness: 1\r\n            },\r\n            emphasis: {\r\n                scale: false,\r\n                label: {\r\n                    show: true,\r\n                    rotate: 0,\r\n                    valueAnimation: true,\r\n                    color: 'red',\r\n                    fontStyle: 'normal',\r\n                    fontWeight: 'bolder',\r\n                    backgroundColor: 'blue',\r\n                    height: 20\r\n                }\r\n            },\r\n            select: {\r\n                label: {\r\n                    color: 'green'\r\n                }\r\n            }\r\n        };\r\n        this.options =\r\n            {\r\n                title: {\r\n                    text: this.website.name,\r\n                },\r\n                tooltip: {},\r\n                animationDurationUpdate: 1500,\r\n                animationEasingUpdate: 'quinticInOut',\r\n                series: [graphSeriesOptions]\r\n            };\r\n        let map = graphSeriesOptions.selectedMap;\r\n    }\r\n    /**\r\n     * The User tells the Server which Website it should crawl next, so a Graph can be vusialized later on for\r\n     * this Website. The POST-Request to the Server is initialized and the Answer of the Server is read and told\r\n     * to the User. For that purpose, the crawlWebsite-Method returns an Observable which is subscribed upon.\r\n     */\r\n    crawlWebsite() {\r\n        this.crawledWebsiteID++;\r\n        this.websiteService.crawlWebsite(this.websiteNameForCrawler, this.crawledWebsiteID).subscribe({\r\n            next: data => {\r\n                this.postId = data.id;\r\n                console.log(data);\r\n                alert(data.body[0].toString() + \" is now starting to get crawled!\");\r\n            },\r\n            error: error => {\r\n                this.errorMessage = error.error;\r\n                console.error('There was an error!', error);\r\n                alert(this.errorMessage);\r\n            }\r\n        });\r\n    }\r\n    ngAfterViewInit() {\r\n        console.log(\"NODEINFO?\", this.host);\r\n    }\r\n}\r\nSimplegraphComponent.ɵfac = function SimplegraphComponent_Factory(t) { return new (t || SimplegraphComponent)(i0.ɵɵdirectiveInject(i1.WebsiteService)); };\r\nSimplegraphComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: SimplegraphComponent, selectors: [[\"app-simplegraph\"]], viewQuery: function SimplegraphComponent_Query(rf, ctx) { if (rf & 1) {\r\n        i0.ɵɵviewQuery(NodeInfoComponent, 5);\r\n    } if (rf & 2) {\r\n        let _t;\r\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.host = _t.first);\r\n    } }, decls: 22, vars: 5, consts: [[1, \"clearfix\"], [1, \"headerOption\"], [\"type\", \"text\", \"name\", \"websiteNameForCrawler\", 3, \"ngModel\", \"ngModelChange\"], [\"color\", \"#800080\", \"text\", \"Crawl new Website\", 3, \"btnClick\"], [\"type\", \"text\", \"name\", \"websiteNameForGraph\", 3, \"ngModel\", \"ngModelChange\"], [\"color\", \"#800080\", \"text\", \"Create Website Graph\", 3, \"btnClick\"], [4, \"ngIf\"], [\"class\", \"alert alert-warning\", 4, \"ngIf\"], [1, \"outer\"], [1, \"header\"], [\"fontSize\", \"8pt\", \"color\", \"#666\", \"toggle\", \"\", \"toggleColor\", \"#333\", \"text\", \"Deselect All\", 1, \"headerOption\", 3, \"btnClick\"], [\"fontSize\", \"8pt\", \"color\", \"#666\", \"toggle\", \"\", \"toggleColor\", \"#333\", \"text\", \"Show Connections\", 1, \"headerOption\", 3, \"btnClick\"], [\"fontSize\", \"8pt\", \"color\", \"#666\", \"toggle\", \"\", \"toggleColor\", \"#333\", \"text\", \"Show Labels\", 1, \"headerOption\", 3, \"btnClick\"], [1, \"graph\"], [\"echarts\", \"\", 1, \"demo-chart\", 3, \"options\", \"chartMouseOver\", \"chartClick\"], [1, \"alert\", \"alert-warning\"]], template: function SimplegraphComponent_Template(rf, ctx) { if (rf & 1) {\r\n        i0.ɵɵelementStart(0, \"div\", 0);\r\n        i0.ɵɵelementStart(1, \"div\", 1);\r\n        i0.ɵɵelementStart(2, \"input\", 2);\r\n        i0.ɵɵlistener(\"ngModelChange\", function SimplegraphComponent_Template_input_ngModelChange_2_listener($event) { return ctx.websiteNameForCrawler = $event; });\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementStart(3, \"div\", 1);\r\n        i0.ɵɵelementStart(4, \"app-button\", 3);\r\n        i0.ɵɵlistener(\"btnClick\", function SimplegraphComponent_Template_app_button_btnClick_4_listener() { return ctx.crawlWebsite(); });\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementStart(5, \"div\", 0);\r\n        i0.ɵɵelementStart(6, \"div\", 1);\r\n        i0.ɵɵelementStart(7, \"input\", 4);\r\n        i0.ɵɵlistener(\"ngModelChange\", function SimplegraphComponent_Template_input_ngModelChange_7_listener($event) { return ctx.websiteNameForGraph = $event; });\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementStart(8, \"div\", 1);\r\n        i0.ɵɵelementStart(9, \"app-button\", 5);\r\n        i0.ɵɵlistener(\"btnClick\", function SimplegraphComponent_Template_app_button_btnClick_9_listener() { return ctx.getWebsiteGraph(); });\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵtemplate(10, SimplegraphComponent_div_10_Template, 2, 0, \"div\", 6);\r\n        i0.ɵɵtemplate(11, SimplegraphComponent_div_11_Template, 5, 3, \"div\", 7);\r\n        i0.ɵɵelementStart(12, \"div\", 8);\r\n        i0.ɵɵelementStart(13, \"div\", 0);\r\n        i0.ɵɵelementStart(14, \"div\", 9);\r\n        i0.ɵɵelementStart(15, \"app-button\", 10);\r\n        i0.ɵɵlistener(\"btnClick\", function SimplegraphComponent_Template_app_button_btnClick_15_listener() { return ctx.deselectAll(); });\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementStart(16, \"app-button\", 11);\r\n        i0.ɵɵlistener(\"btnClick\", function SimplegraphComponent_Template_app_button_btnClick_16_listener() { return ctx.showConnections(); });\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementStart(17, \"app-button\", 12);\r\n        i0.ɵɵlistener(\"btnClick\", function SimplegraphComponent_Template_app_button_btnClick_17_listener() { return ctx.showLabels(); });\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementStart(18, \"div\", 13);\r\n        i0.ɵɵelementStart(19, \"div\", 14);\r\n        i0.ɵɵlistener(\"chartMouseOver\", function SimplegraphComponent_Template_div_chartMouseOver_19_listener($event) { return ctx.onChartMouseOver($event); })(\"chartClick\", function SimplegraphComponent_Template_div_chartClick_19_listener($event) { return ctx.onChartClick($event); });\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementStart(20, \"div\");\r\n        i0.ɵɵelement(21, \"app-node-info\");\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementEnd();\r\n    } if (rf & 2) {\r\n        i0.ɵɵadvance(2);\r\n        i0.ɵɵproperty(\"ngModel\", ctx.websiteNameForCrawler);\r\n        i0.ɵɵadvance(5);\r\n        i0.ɵɵproperty(\"ngModel\", ctx.websiteNameForGraph);\r\n        i0.ɵɵadvance(3);\r\n        i0.ɵɵproperty(\"ngIf\", ctx.loading);\r\n        i0.ɵɵadvance(1);\r\n        i0.ɵɵproperty(\"ngIf\", ctx.errorMessage);\r\n        i0.ɵɵadvance(8);\r\n        i0.ɵɵproperty(\"options\", ctx.options);\r\n    } }, styles: [\".outer[_ngcontent-%COMP%]\\r\\n{\\r\\n  margin: 10px;\\r\\n}\\r\\n\\r\\n.demo-chart[_ngcontent-%COMP%] \\r\\n{\\r\\n    max-width: 1000px;\\r\\n    margin: 10px auto;\\r\\n    overflow: auto;\\r\\n    min-height: 300px;\\r\\n    border: 1px solid steelblue;\\r\\n    background-color: rgb(245, 245, 245);\\r\\n    padding: 10px;\\r\\n    \\r\\n}\\r\\n\\r\\n.graph[_ngcontent-%COMP%]\\r\\n{\\r\\n  clear: both;\\r\\n  margin-right:2%;\\r\\n}\\r\\n\\r\\n.header[_ngcontent-%COMP%]\\r\\n{\\r\\n  border: solid, black;\\r\\n  background-color:aqua;\\r\\n}\\r\\n\\r\\n.headerOption[_ngcontent-%COMP%]\\r\\n{\\r\\n  float: left;\\r\\n  margin: 2px;\\r\\n}\\r\\n\\r\\n.second_div[_ngcontent-%COMP%] {\\r\\n  width:50px; \\r\\n  height:50px; \\r\\n  background-color:green;\\r\\n  float: left;\\r\\n}\\r\\n\\r\\n.third_div[_ngcontent-%COMP%] {\\r\\n  width:50px; \\r\\n  height:50px; \\r\\n  background-color:blue;\\r\\n  float: left;\\r\\n}\\r\\n\\r\\n.clearfix[_ngcontent-%COMP%]:after {\\r\\n  visibility: hidden;\\r\\n  display: block;\\r\\n  font-size: 0;\\r\\n  content: \\\" \\\";\\r\\n  clear: both;\\r\\n  height: 0;\\r\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNpbXBsZWdyYXBoLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0VBRUUsWUFBWTtBQUNkOztBQUVBOztJQUVJLGlCQUFpQjtJQUNqQixpQkFBaUI7SUFDakIsY0FBYztJQUNkLGlCQUFpQjtJQUNqQiwyQkFBMkI7SUFDM0Isb0NBQW9DO0lBQ3BDLGFBQWE7SUFDYixzQkFBc0I7QUFDMUI7O0FBRUE7O0VBRUUsV0FBVztFQUNYLGVBQWU7QUFDakI7O0FBRUE7O0VBRUUsb0JBQW9CO0VBQ3BCLHFCQUFxQjtBQUN2Qjs7QUFFQTs7RUFFRSxXQUFXO0VBQ1gsV0FBVztBQUNiOztBQUVBO0VBQ0UsVUFBVTtFQUNWLFdBQVc7RUFDWCxzQkFBc0I7RUFDdEIsV0FBVztBQUNiOztBQUNBO0VBQ0UsVUFBVTtFQUNWLFdBQVc7RUFDWCxxQkFBcUI7RUFDckIsV0FBVztBQUNiOztBQUNBO0VBQ0Usa0JBQWtCO0VBQ2xCLGNBQWM7RUFDZCxZQUFZO0VBQ1osWUFBWTtFQUNaLFdBQVc7RUFDWCxTQUFTO0FBQ1giLCJmaWxlIjoic2ltcGxlZ3JhcGguY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5vdXRlclxyXG57XHJcbiAgbWFyZ2luOiAxMHB4O1xyXG59XHJcblxyXG4uZGVtby1jaGFydCBcclxue1xyXG4gICAgbWF4LXdpZHRoOiAxMDAwcHg7XHJcbiAgICBtYXJnaW46IDEwcHggYXV0bztcclxuICAgIG92ZXJmbG93OiBhdXRvO1xyXG4gICAgbWluLWhlaWdodDogMzAwcHg7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCBzdGVlbGJsdWU7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjQ1LCAyNDUsIDI0NSk7XHJcbiAgICBwYWRkaW5nOiAxMHB4O1xyXG4gICAgLypib3JkZXItcmFkaXVzOiA1cHg7Ki9cclxufVxyXG5cclxuLmdyYXBoXHJcbntcclxuICBjbGVhcjogYm90aDtcclxuICBtYXJnaW4tcmlnaHQ6MiU7XHJcbn1cclxuXHJcbi5oZWFkZXJcclxue1xyXG4gIGJvcmRlcjogc29saWQsIGJsYWNrO1xyXG4gIGJhY2tncm91bmQtY29sb3I6YXF1YTtcclxufVxyXG5cclxuLmhlYWRlck9wdGlvblxyXG57XHJcbiAgZmxvYXQ6IGxlZnQ7XHJcbiAgbWFyZ2luOiAycHg7XHJcbn1cclxuXHJcbi5zZWNvbmRfZGl2IHtcclxuICB3aWR0aDo1MHB4OyBcclxuICBoZWlnaHQ6NTBweDsgXHJcbiAgYmFja2dyb3VuZC1jb2xvcjpncmVlbjtcclxuICBmbG9hdDogbGVmdDtcclxufSBcclxuLnRoaXJkX2RpdiB7XHJcbiAgd2lkdGg6NTBweDsgXHJcbiAgaGVpZ2h0OjUwcHg7IFxyXG4gIGJhY2tncm91bmQtY29sb3I6Ymx1ZTtcclxuICBmbG9hdDogbGVmdDtcclxufVxyXG4uY2xlYXJmaXg6YWZ0ZXIge1xyXG4gIHZpc2liaWxpdHk6IGhpZGRlbjtcclxuICBkaXNwbGF5OiBibG9jaztcclxuICBmb250LXNpemU6IDA7XHJcbiAgY29udGVudDogXCIgXCI7XHJcbiAgY2xlYXI6IGJvdGg7XHJcbiAgaGVpZ2h0OiAwO1xyXG59Il19 */\"] });\r\nclass GraphData {\r\n    constructor(t_nodeData, t_linkData) {\r\n        this.nodeData = t_nodeData;\r\n        this.linkData = t_linkData;\r\n    }\r\n}\r\nclass V2 {\r\n    constructor(t_x, t_y) {\r\n        this.x = t_x;\r\n        this.y = t_y;\r\n    }\r\n}\r\nclass ShadowOptionMixin {\r\n}\r\nclass LineStyleOption extends ShadowOptionMixin {\r\n}\r\nclass GraphEdgeLineStyleOption extends LineStyleOption {\r\n}\r\nclass LineLabelOption {\r\n}\r\nclass SeriesLineLabelOption extends LineLabelOption {\r\n}\r\nclass GraphEdgeOptions {\r\n}\r\nclass GraphNodeItemOption {\r\n}\r\n/******************************** */\r\n//COPY DATASTRUCTURE FROM BACKEND\r\n/******************************** */\r\nclass NodeFromJson {\r\n    constructor() {\r\n        this.domParent = \"\";\r\n        this.domChilds = [];\r\n        this.rangeFrom = 0;\r\n        this.rangeTo = Math.PI * 2;\r\n    }\r\n    getDOMStripedName() {\r\n        if (this.depth <= 0 || this.url.length <= 0)\r\n            return this.url;\r\n        for (let index = this.url.length - 1; index >= 0; index--) {\r\n            const element = this.url[index];\r\n            if (element == '/') {\r\n                return this.url.slice(index);\r\n            }\r\n        }\r\n        return \"\";\r\n    }\r\n    getDOMParent() {\r\n        if (this.depth <= 0)\r\n            return;\r\n        let slashCount = this.depth + 2;\r\n        if (\"this.url.includes('.html')\") {\r\n            slashCount--;\r\n        }\r\n        for (let index = 0; index < this.url.length; index++) {\r\n            const element = this.url[index];\r\n            if (element == '/') {\r\n                slashCount--;\r\n            }\r\n            if (slashCount == 0) {\r\n                this.domParent = this.url.substring(0, index + 2);\r\n            }\r\n        }\r\n    }\r\n    getDepth() {\r\n        let count = -3;\r\n        for (let index = 0; index < this.url.length; index++) {\r\n            const element = this.url[index];\r\n            if (element == '/') {\r\n                count++;\r\n            }\r\n        }\r\n        if (this.url.includes('.html') || this.url.includes('.shtml')) {\r\n            count++;\r\n        }\r\n        this.depth = count;\r\n    }\r\n}\r\nclass WebsiteMap {\r\n    constructor(t_name, t_map, t_internalMedia) {\r\n        this.name = t_name;\r\n        this.map = t_map;\r\n        this.internalMedia = t_internalMedia;\r\n    }\r\n}\r\nexport { NodeFromJson };\r\n"]},"metadata":{},"sourceType":"module"}