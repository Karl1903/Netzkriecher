{"ast":null,"code":"import _asyncToGenerator from \"C:/Dev/Angular/netzkriecher-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as data from '../../../assets/tagesschauNew.json';\nimport { NodeInfoComponent } from 'src/app/node-info/node-info.component';\nimport { WebsiteRegister, GraphData, V2, NodeFromJson, WebsiteMap } from 'src/app/graphData';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/website.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"../button/button.component\";\nimport * as i4 from \"ngx-echarts\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"../../node-info/node-info.component\";\n\nfunction SimplegraphComponent_li_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const website_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", website_r1, \" \");\n  }\n}\n\nconst spacingThreshhold = 0.007;\nconst outerColor = 'purple';\nconst innerColor = 'red';\nconst innerColorHover = 'orange';\nconst selectedColorInner = '#fff';\n/*\r\nconsiderations for node placement:\r\n- for first layer: for all childs of root, sum up all their children. Then try to find a configuration,\r\nwhere the 'center of mass' is at the root node. (adding up vectors * weight should equal 0 at the end)\r\n- might not work, because a valid strategy for that would also be to just dump all of the nodes at opposite ends\r\n\r\n- after finishing a whole depth layer, there might be a lot of space left unoccupied in that layer\r\n- the childnoderanges for the layer before could be accordingly ajusted to use up the whole 360°\r\n- (or atleast space them out more)\r\n\r\n*/\n\nexport class SimplegraphComponent {\n  constructor(websiteService) {\n    this.websiteService = websiteService;\n    this.totalWidth = 1000;\n    this.halfWidth = 500;\n    this.totalHeight = 1000;\n    this.halfHeight = 500;\n    this.nodeSizeFalloff = 200;\n    this.radiusPerIteration = 100;\n    this.websiteNameForGraph = \"\";\n    this.websiteNameForCrawler = \"\";\n    this.loading = false;\n    this.crawledWebsiteID = 2;\n    this.nodeConnectionStyle = {\n      curveness: 0,\n      width: 1,\n      color: 'grey',\n      opacity: 0.8,\n      type: 'dashed',\n      cap: 'square',\n      join: 'bevel',\n      dashOffset: 10,\n      miterLimit: 10\n    };\n    this.domChildConnectionStyle = {\n      curveness: 0,\n      width: 2,\n      color: 'blue',\n      opacity: 0.8,\n      type: 'solid',\n      cap: 'square',\n      join: 'bevel',\n      dashOffset: 10,\n      miterLimit: 10\n    };\n    this.selectedNodeName = \"\";\n    this.domConnectionsActive = true;\n    this.allConnectionsActive = false;\n    this.labelsActive = false;\n  }\n\n  remap(n, oldFrom, oldTo, newFrom, newTo) {\n    let oldRange = oldTo - oldFrom;\n    let proportion = (n - oldFrom) / oldRange;\n    let newRange = newTo - newFrom;\n    return newFrom + newRange * proportion;\n  }\n\n  calculatePosition(depth, index, total, rangeFrom, rangeTo, graphOffset) {\n    let radians = total == 1 ? 0.5 * 2 * Math.PI : index / total * 2 * Math.PI;\n    let radiansRemapped = this.remap(radians, 0, Math.PI * 2, rangeFrom, rangeTo);\n    let x = Math.cos(radiansRemapped) * depth * this.radiusPerIteration + graphOffset.x;\n    let y = Math.sin(radiansRemapped) * depth * this.radiusPerIteration + graphOffset.y;\n    let pos = new V2(x, y);\n    return this.calculateOffset(pos);\n  }\n\n  calculateOffset(pos) {\n    return new V2(pos.x + this.halfWidth, pos.y + this.halfHeight);\n  }\n\n  getSymbolSize(currentDepth, radiansAvailable) {\n    let frac = radiansAvailable / (Math.PI * 2);\n    let multiplier = 1;\n\n    if (frac < spacingThreshhold) {\n      multiplier = frac / spacingThreshhold;\n    }\n\n    let size = 20 * (1 / (currentDepth + 1)) * multiplier;\n    return size;\n  }\n\n  getGraphData(websiteReg) {\n    let data = [];\n    let linkData = [];\n    websiteReg.map.forEach((value, key) => {\n      let root = value.map.get(value.rootName);\n      let rPos = root.nodePositionalInformation;\n      let rootNodeOptions = {\n        name: root.url,\n        x: rPos.position.x,\n        y: rPos.position.y,\n        category: 'root',\n        symbol: 'circle',\n        symbolSize: rPos.symbolSize\n      };\n      data.push(rootNodeOptions);\n      let visited = [];\n      let queue = [];\n      queue.push(root);\n\n      while (queue.length > 0) {\n        let currentNode = queue.shift();\n        visited.push(currentNode);\n        let domChilds = currentNode.domChilds;\n\n        if (this.allConnectionsActive) {\n          let intLinks = currentNode.intLinks;\n\n          for (let i = 0; i < intLinks.length; i++) {\n            let n = value.map.get(intLinks[i]);\n            if (n == undefined) continue;\n            let label = {\n              position: 'start',\n              distance: 10\n            };\n            let graphEdgeOption = {\n              lineStyle: this.nodeConnectionStyle,\n              label: label,\n              source: currentNode.url,\n              target: n.url,\n              symbol: ['none', 'arrow'],\n              symbolSize: [0, 5],\n              value: 3\n            };\n            linkData.push(graphEdgeOption);\n          }\n        }\n\n        for (let i = 0; i < domChilds.length; i++) {\n          let n = value.map.get(domChilds[i]);\n          let posInfo = n.nodePositionalInformation;\n          let arrowSize = n.nodePositionalInformation.symbolSize * 0.7; //show links to domChilds\n\n          if (this.domConnectionsActive) {\n            let label = {\n              position: 'start',\n              distance: 10\n            };\n            let graphEdgeOption = {\n              lineStyle: this.domChildConnectionStyle,\n              label: label,\n              source: currentNode.url,\n              target: n.url,\n              symbol: ['none', 'arrow'],\n              symbolSize: [0, arrowSize],\n              value: 3\n            };\n            linkData.push(graphEdgeOption);\n          } //add node if it doesnt already exist\n\n\n          if (!visited.includes(n)) {\n            let color = innerColor;\n\n            if (this.selectedNodeName == n.url) {\n              color = selectedColorInner;\n            } //let domName = n.getDOMStripedName();\n\n\n            let nodeItemOptions = {\n              name: n.url,\n              x: posInfo.position.x,\n              y: posInfo.position.y,\n              category: 'not root',\n              draggable: false,\n              symbol: 'circle',\n              symbolSize: posInfo.symbolSize,\n              symbolOffset: 0,\n              symbolRotate: 0,\n              itemStyle: {\n                color: {\n                  type: 'radial',\n                  x: 0.5,\n                  y: 0.5,\n                  r: 0.5,\n                  colorStops: [{\n                    offset: 0.0,\n                    color: color\n                  }, {\n                    offset: 1.0,\n                    color: outerColor\n                  }],\n                  global: false\n                },\n                opacity: 1\n              },\n              emphasis: {\n                itemStyle: {\n                  color: {\n                    type: 'radial',\n                    x: 0.5,\n                    y: 0.5,\n                    r: 0.5,\n                    colorStops: [{\n                      offset: 0.0,\n                      color: innerColorHover\n                    }, {\n                      offset: 1.0,\n                      color: outerColor\n                    }],\n                    global: false\n                  },\n                  opacity: 1\n                }\n              }\n            };\n            data.push(nodeItemOptions);\n            queue.push(n);\n          }\n        }\n      }\n\n      if (this.selectedNodeName != \"\" && !this.allConnectionsActive) {\n        let node = value.map.get(this.selectedNodeName);\n\n        for (let i = 0; i < node.intLinks.length; i++) {\n          let n = value.map.get(node.intLinks[i]);\n          let label = {\n            position: 'start',\n            distance: 10\n          };\n          let doubleSided = false;\n\n          if (n != undefined) {\n            n.intLinks.forEach(element => {\n              if (element == node.url) {\n                doubleSided = true;\n              }\n            });\n          }\n\n          let symbol = [];\n          let symbolSize = [];\n\n          if (doubleSided) {\n            symbol = ['arrow', 'arrow'];\n            symbolSize = [5, 5];\n          } else {\n            symbol = ['none', 'arrow'];\n            symbolSize = [0, 5];\n          }\n\n          let graphEdgeOption = {\n            lineStyle: this.nodeConnectionStyle,\n            label: label,\n            source: node.url,\n            target: node.intLinks[i],\n            symbol: symbol,\n            symbolSize: symbolSize,\n            value: 3\n          };\n          linkData.push(graphEdgeOption);\n        }\n      }\n    });\n    let graphData = new GraphData(data, linkData);\n    return graphData;\n  }\n\n  calculatePositions(websiteReg) {\n    websiteReg.map.forEach((value, key) => {\n      let root = value.map.get(value.rootName);\n      let rootPosition = this.calculatePosition(0, 1, 1, 0, Math.PI * 2, new V2(0, 0));\n      let rootSize = this.getSymbolSize(root.depth, Math.PI * 2);\n      root.nodePositionalInformation = {\n        position: rootPosition,\n        symbolSize: rootSize,\n        rangeFrom: 0,\n        rangeTo: Math.PI * 2\n      };\n      let visited = [];\n      let queue = [];\n      queue.push(root);\n\n      while (queue.length > 0) {\n        let currentNode = queue.shift();\n        visited.push(currentNode);\n        let domChilds = currentNode.domChilds;\n        let radiansPerChild = (currentNode.nodePositionalInformation.rangeTo - currentNode.nodePositionalInformation.rangeFrom) / domChilds.length;\n        let currentRadians = 0;\n\n        for (let i = 0; i < domChilds.length; i++) {\n          let n = value.map.get(domChilds[i]);\n\n          if (!visited.includes(n)) {\n            let symbolSize = this.getSymbolSize(n.depth, radiansPerChild);\n            let nodePosition = this.calculatePosition(n.depth, i, domChilds.length, currentNode.nodePositionalInformation.rangeFrom, currentNode.nodePositionalInformation.rangeTo, new V2(0, 0));\n            let rangeFrom = currentNode.nodePositionalInformation.rangeFrom + currentRadians - radiansPerChild * 0.5;\n            currentRadians += radiansPerChild;\n            let rangeTo = currentNode.nodePositionalInformation.rangeFrom + currentRadians - radiansPerChild * 0.5;\n            n.nodePositionalInformation = {\n              position: nodePosition,\n              symbolSize: symbolSize,\n              rangeFrom: rangeFrom,\n              rangeTo: rangeTo\n            };\n            queue.push(n);\n          }\n        }\n      }\n    });\n  }\n\n  onChartMouseOver(ec) {}\n\n  onChartClick(ec) {\n    let n = this.websiteRegister.getNode(ec.name);\n\n    if (n != undefined) {\n      this.selectedNodeName = n.url;\n      this.showGraph();\n      this.nodeInfoComponent.node = n;\n      this.nodeInfoComponent.initializeTable();\n      return;\n    }\n  }\n\n  showAllConnections() {\n    this.allConnectionsActive = !this.allConnectionsActive;\n    this.showGraph();\n  }\n\n  showConnections() {\n    this.domConnectionsActive = !this.domConnectionsActive;\n    this.showGraph();\n  }\n\n  showLabels() {\n    this.labelsActive = !this.labelsActive;\n    this.showGraph();\n  }\n\n  deselectAll() {//this.showIntMedia(this.website.internalMedia);\n  }\n\n  prepareWebsite(name, data) {\n    let dictElements = JSON.parse(data);\n    let nodeMap = new Map();\n    let mediaIntGlobal = [];\n\n    for (let index = 0; index < dictElements.length; index++) {\n      const element = dictElements[index];\n\n      if (index == 0) {\n        console.log(element);\n      }\n\n      let n = new NodeFromJson();\n\n      if (element.url == undefined) {\n        continue;\n      }\n\n      n.url = element.url;\n      n.parentDocId = element.parentDocId;\n      n.docId = element.docId;\n      n.extMedia = element['link:ext:media'];\n      n.intMedia = element['link:int:media'];\n      n.extLinks = element['link:ext'];\n      n.intLinks = element['link:int'];\n      n.getDepth();\n      n.getDOMParent();\n\n      if (n.depth >= 0) {\n        nodeMap.set(n.url, n);\n      }\n    }\n\n    nodeMap.forEach((node, key) => {\n      if (node.domParent != \"\") {\n        let parent = nodeMap.get(node.domParent);\n\n        if (parent != undefined) {\n          parent.domChilds.push(key);\n        }\n      }\n    });\n    let website = new WebsiteMap(name, nodeMap, mediaIntGlobal);\n    website.rootName = \"https://www.tagesschau.de/\"; //console.log(\"Website Node nach dem Init View:\", website);\n\n    this.websiteRegister.map.set(name, website); //return website;\n  }\n  /**\r\n   * The method fetches, saves and prepares the data for the Creation of the Website Graph. Approximately 200 Nodes,\r\n   * that were crawled by the Worker and saved into Redis, get fetched. The data is saved into dictionaries, adapting to\r\n   * the Data structure that was created in the Backend. Finally, the Nodes for the Graph are created.\r\n   */\n\n\n  initRealData() {\n    /*\r\n    let nodeMap : Map<string, NodeFromJson> = new Map<string, NodeFromJson>();\r\n    this.loading = true;\r\n    this.errorMessage = \"\";\r\n    this.websiteService.getWebsiteNodes(this.websiteNameForGraph)\r\n      .subscribe(\r\n        response => {                           //next() callback\r\n          console.log('response received')\r\n          //this.websites = response;\r\n          let dictElements : {[index:string] : string}[] = JSON.parse(JSON.stringify(response))\r\n     \r\n          for (let index = 0; index < dictElements.length; index++) {\r\n            const element  : {[index:string] : string} = dictElements[index];\r\n      \r\n            let pdi : string = \"\";\r\n            let di : string = \"\";\r\n            let url : string = \"\";\r\n            let linksInt : string[] = [];\r\n            let mediaInt : string[] = [];\r\n            let linksExt : string[] = [];\r\n            let mediaExt : string[] = [];\r\n      \r\n            Object.entries(element).forEach(\r\n              ([key, value]) =>\r\n              {\r\n                if(key.includes('parentDocId'))\r\n                {\r\n                  pdi = value;\r\n                }\r\n                else if(key.includes('docId'))\r\n                {\r\n                  di = value;\r\n                }\r\n                else if(key.includes(':int:media:'))\r\n                {\r\n                  mediaInt.push(value);\r\n                }\r\n                else if(key.includes(':int:'))\r\n                {\r\n                  linksInt.push(value);\r\n                }\r\n                else if(key.includes(':ext:media:'))\r\n                {\r\n                  mediaExt.push(value);\r\n                }\r\n                else if(key.includes(':ext:'))\r\n                {\r\n                  linksExt.push(value);\r\n                }\r\n                else if(key.includes('url'))\r\n                {\r\n                  url = value;\r\n                }\r\n                \r\n              }\r\n            );\r\n            \r\n            let n : NodeFromJson = new NodeFromJson();\r\n            n.url = url;\r\n            n.parentDocId = pdi;\r\n            n.docId = di;\r\n            n.extMedia = mediaExt;\r\n            n.intMedia = mediaInt;\r\n            n.extLinks = linksExt;\r\n            n.intLinks = linksInt;\r\n      \r\n            n.getDepth();\r\n            n.getDOMParent();\r\n            if(n.depth >= 0)\r\n            {\r\n              nodeMap.set(n.url, n);\r\n            }\r\n          }\r\n      \r\n          nodeMap.forEach((node: NodeFromJson, key: string) =>\r\n          {\r\n            if(node.domParent != \"\")\r\n            {\r\n              let parent = nodeMap.get(node.domParent);\r\n              if(parent != undefined)\r\n              {\r\n                parent.domChilds.push(key);\r\n              }\r\n            }\r\n          });\r\n        console.log(\"NodeMap: \")\r\n        console.log(nodeMap)\r\n        console.log(\"End reached\")\r\n        this.nodeMap = nodeMap;\r\n      \r\n        },\r\n        (error) => {                              //error() callback\r\n          console.error('Request failed with error')\r\n          this.errorMessage = error;\r\n          this.loading = false;\r\n        },\r\n        () => {                                   //complete() callback\r\n          console.error('Request completed')      //This is actually not needed\r\n          this.loading = false;\r\n        })\r\n        */\n\n    return _asyncToGenerator(function* () {})();\n  }\n  /**\r\n   * The User tells the Server which Website it should crawl next, so a Graph can be vusialized later on for\r\n   * this Website. The POST-Request to the Server is initialized and the Answer of the Server is read and told\r\n   * to the User. For that purpose, the crawlWebsite-Method returns an Observable which is subscribed upon.\r\n   */\n\n\n  addWebsiteToCrawler() {\n    this.crawledWebsiteID++;\n    this.websiteService.crawlWebsite(this.websiteNameForCrawler, this.crawledWebsiteID).subscribe({\n      next: data => {\n        this.postId = data.id;\n        console.log(data);\n        alert(data.body[0].toString() + \" is now starting to get crawled!\");\n      },\n      error: error => {\n        this.errorMessage = error.error;\n        console.error('There was an error!', error);\n        alert(this.errorMessage);\n      }\n    });\n  }\n  /**Restart Crawler in the Worker */\n\n\n  crawlNewWebsites() {\n    this.websiteService.startNewCrawlers().subscribe({\n      next: data => {\n        this.postId = data.id;\n        console.log(data);\n      },\n      error: error => {\n        this.errorMessage = error.error;\n        console.error('There was an error!', error);\n        alert(this.errorMessage);\n      }\n    });\n  }\n\n  getCrawledWebsites() {\n    this.loading = true;\n    this.errorMessage = \"\";\n    this.websiteService.getCrawledWebsites().subscribe(response => {\n      console.log('response received');\n      this.crawledWebsites = response;\n    }, error => {\n      console.error('Request failed with error');\n      this.errorMessage = error;\n      this.loading = false;\n    }, () => {\n      console.error('Request completed'); //This is actually not needed \n\n      this.loading = false;\n    });\n  }\n\n  ngOnInit() {\n    this.websitesToDisplay = new Map();\n    this.websitesToDisplay.set('Tagesschau,de', JSON.stringify(data));\n    this.websiteRegister = new WebsiteRegister();\n    this.getCrawledWebsites();\n    this.prepareGraph();\n    this.showGraph();\n  }\n  /*\r\n  getWebsiteGraph () {\r\n   //prepare Website-Method with Rest Call ->\r\n   let nodeMap : Map<string, NodeFromJson> = new Map<string, NodeFromJson>();\r\n      this.loading = true;\r\n   this.errorMessage = \"\";\r\n   this.websiteService.getWebsiteNodes(this.websiteNameForGraph)\r\n     .subscribe(\r\n       data => {                           //next() callback\r\n         console.log('response received')\r\n   let dictElements : {[index:string] : string}[] = JSON.parse(JSON.stringify(data))\r\n      let mediaIntGlobal : string[] = [];\r\n      for (let index = 0; index < dictElements.length; index++)\r\n   {\r\n     const element = dictElements[index];\r\n        let n : NodeFromJson = new NodeFromJson();\r\n     if(element.url == undefined)\r\n     {\r\n       continue\r\n     }\r\n     n.url = element.url;\r\n     n.parentDocId = element.parentDocId;\r\n     n.docId = element.docId;\r\n     n.extMedia = element['link:ext:media'] as unknown as string[];\r\n     n.intMedia = element['link:int:media'] as unknown as string[];\r\n     n.extLinks = element['link:ext'] as unknown as string[];\r\n     n.intLinks = element['link:int'] as unknown as string[];\r\n        n.getDepth();\r\n     n.getDOMParent();\r\n     if(n.depth >= 0)\r\n     {\r\n       nodeMap.set(n.url, n);\r\n     }\r\n     \r\n   }\r\n      nodeMap.forEach((node: NodeFromJson, key: string) =>\r\n   {\r\n     if(node.domParent != \"\")\r\n     {\r\n       let parent = nodeMap.get(node.domParent);\r\n       if(parent != undefined)\r\n       {\r\n         parent.domChilds.push(key);\r\n       }\r\n     }\r\n   });\r\n   this.website = new WebsiteMap(this.websiteNameForGraph, nodeMap, mediaIntGlobal);\r\n   console.log(\"Website Node nach dem Click:\", this.website);\r\n      //prepareWebsite-Method ->\r\n      let img = document.getElementById(\"img\") as HTMLImageElement;\r\n   img?.setAttribute(\"src\", '../../assets/Images/NodeTest.png');\r\n   this.calculatePositions(this.website);\r\n   this.graphData = this.getGraphData(this.website);\r\n      let text : graphic.Text = new graphic.Text();\r\n   text.style.text = \"Hello\";\r\n     //ShowGraph-Method ->\r\n  let graphSeriesOptions : GraphSeriesOption =\r\n  {\r\n    cursor : 'hand', //'arrow'?\r\n    colorBy : 'data',\r\n    hoverLayerThreshold : 10,\r\n    selectedMode : 'multiple', //used for selecting?\r\n    name : 'Sitemap',\r\n    type : 'graph',\r\n    //coordinateSystem: 'none',\r\n    legendHoverLink : false,\r\n    layout : 'none',\r\n    nodes : this.graphData.nodeData,\r\n    edges : this.graphData.linkData,\r\n    draggable : false,\r\n    roam : true,\r\n    color : '#DF4477',\r\n    nodeScaleRatio : 0.6,\r\n    label : {\r\n      fontStyle : 'normal',\r\n      show : this.labelsActive,\r\n      color : 'black',\r\n      overflow : 'truncate',\r\n      tag : '!!!!!!'\r\n    },\r\n    itemStyle :\r\n    {\r\n      opacity : 1,\r\n      \r\n      //color :  'red'\r\n      /*\r\n      color :\r\n      {\r\n        svgElement : svgElement,\r\n        svgWidth : 10,\r\n        svgHeight : 10,\r\n        type : 'pattern',\r\n        x : 1,\r\n        y : 1,\r\n        rotation : 0,\r\n        scaleX : 1,\r\n        scaleY : 1\r\n      }\r\n      \r\n      \r\n      //RADIAL GRADIENT\r\n      color:\r\n      {\r\n        type : 'radial',\r\n        x : 0.5,\r\n        y : 0.5,\r\n        r : 0.5,\r\n        colorStops : [{\r\n          offset : 0.0,\r\n          color : 'red'\r\n        },\r\n        {\r\n          offset: 1.0,\r\n          color: 'purple'\r\n        }\r\n      ]\r\n      , global : false\r\n      }\r\n      \r\n      /*\r\n      //LINEAR GRADIENT\r\n      color:\r\n      {\r\n        {\r\n        type : 'linear',\r\n        x : 0.1,\r\n        y : 1,\r\n        x2 : 0.3,\r\n        y2 : 1,\r\n        colorStops : [\r\n          {\r\n            offset : 0.3,\r\n            color : 'red'\r\n          },\r\n          {\r\n            offset : 0.7,\r\n            color : 'blue'\r\n          }]\r\n        }\r\n      }\r\n      */\n\n  /*\r\n  color :\r\n  {\r\n    image : img,\r\n    repeat : 'repeat'\r\n  }\r\n  \r\n  },\r\n  lineStyle :\r\n  {\r\n  curveness : 1\r\n  },\r\n  emphasis :\r\n  {\r\n  scale : false, //scale up on focus\r\n  label :\r\n  {\r\n    show : false, //show/hide label of node\r\n    rotate : 0,\r\n    valueAnimation : true,\r\n    color : 'red',\r\n    fontStyle : 'normal',\r\n    fontWeight : 'bolder',\r\n    backgroundColor : 'blue',\r\n    height : 20\r\n  }\r\n  },\r\n  select :\r\n  {\r\n  label :\r\n  {\r\n    color: 'green'\r\n  }\r\n  }\r\n  }\r\n  this.options =\r\n  {\r\n  title:\r\n  {\r\n  text: 'CrawledSites'//this.website.name,\r\n  \r\n  },\r\n  tooltip: {},\r\n  animationDurationUpdate: 1500,\r\n  animationEasingUpdate: 'quinticInOut',\r\n  series: [graphSeriesOptions]\r\n  };\r\n  let map = graphSeriesOptions.selectedMap;\r\n  });\r\n  }\r\n  */\n\n\n  prepareGraph() {\n    this.websiteRegister.map.clear();\n    this.websitesToDisplay.forEach((value, key) => {\n      this.prepareWebsite(key, value);\n    });\n    this.calculatePositions(this.websiteRegister); //let img = document.getElementById(\"img\") as HTMLImageElement;\n    //img?.setAttribute(\"src\", '../../assets/Images/NodeTest.png');\n    //let text : graphic.Text = new graphic.Text();\n    //text.style.text = \"Hello\";\n  }\n\n  getGraphSeriesOptions() {\n    this.graphData = this.getGraphData(this.websiteRegister);\n    let edges = this.domConnectionsActive ? this.graphData.linkData : undefined;\n    let graphSeriesOptions = {\n      cursor: 'hand',\n      colorBy: 'data',\n      hoverLayerThreshold: 1,\n      selectedMode: 'single',\n      name: 'Sitemap',\n      type: 'graph',\n      //coordinateSystem: 'none',\n      legendHoverLink: false,\n      layout: 'none',\n      nodes: this.graphData.nodeData,\n      edges: edges,\n      draggable: false,\n      roam: true,\n      color: '#DF4477',\n      nodeScaleRatio: 0.6,\n      label: {\n        fontStyle: 'normal',\n        show: this.labelsActive,\n        color: 'black',\n        overflow: 'truncate',\n        tag: '!!!!!!'\n      } //color :  'red'\n\n      /*\r\n      color :\r\n      {\r\n        svgElement : svgElement,\r\n        svgWidth : 10,\r\n        svgHeight : 10,\r\n        type : 'pattern',\r\n        x : 1,\r\n        y : 1,\r\n        rotation : 0,\r\n        scaleX : 1,\r\n        scaleY : 1\r\n      }\r\n      */\n\n    };\n    return graphSeriesOptions;\n  }\n\n  showGraph() {\n    let g1 = this.getGraphSeriesOptions(); //let g2 = this.getGraphSeriesOptions();\n\n    this.options = {\n      title: {\n        text: 'Crawled Sites' //this.website.name,\n\n      },\n      tooltip: {},\n      animation: false,\n      animationDurationUpdate: 1000,\n      animationEasingUpdate: 'quinticInOut',\n      series: [g1] //,g2] \n\n    }; //let map = graphSeriesOptions.selectedMap;\n  }\n  /**\r\n   * The User tells the Server which Website it should crawl next, so a Graph can be vusialized later on for\r\n   * this Website. The POST-Request to the Server is initialized and the Answer of the Server is read and told\r\n   * to the User. For that purpose, the crawlWebsite-Method returns an Observable which is subscribed upon.\r\n   */\n\n\n  crawlWebsite() {\n    this.crawledWebsiteID++;\n    this.websiteService.crawlWebsite(this.websiteNameForCrawler, this.crawledWebsiteID).subscribe({\n      next: data => {\n        this.postId = data.id;\n        console.log(data);\n        alert(data.body[0].toString() + \" is now starting to get crawled!\");\n        this.getCrawledWebsites();\n      },\n      error: error => {\n        this.errorMessage = error.error;\n        console.error('There was an error!', error);\n        alert(this.errorMessage);\n      }\n    });\n  }\n\n  ngAfterViewInit() {\n    console.log(\"NODEINFO?\", this.nodeInfoComponent);\n  }\n\n}\n\nSimplegraphComponent.ɵfac = function SimplegraphComponent_Factory(t) {\n  return new (t || SimplegraphComponent)(i0.ɵɵdirectiveInject(i1.WebsiteService));\n};\n\nSimplegraphComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: SimplegraphComponent,\n  selectors: [[\"app-simplegraph\"]],\n  viewQuery: function SimplegraphComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(NodeInfoComponent, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.nodeInfoComponent = _t.first);\n    }\n  },\n  decls: 27,\n  vars: 4,\n  consts: [[1, \"clearfix\"], [1, \"headerOption\"], [\"for\", \"websiteNameForGraph\"], [\"type\", \"text\", \"name\", \"websiteNameForGraph\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [1, \"outer\"], [1, \"header\"], [\"fontSize\", \"8pt\", \"color\", \"#666\", \"toggle\", \"\", \"toggleColor\", \"#333\", \"text\", \"Deselect All\", 1, \"headerOption\", 3, \"btnClick\"], [\"fontSize\", \"8pt\", \"color\", \"#666\", \"toggle\", \"\", \"toggleColor\", \"#333\", \"text\", \"Show DOM-Connections\", 1, \"headerOption\", 3, \"btnClick\"], [\"fontSize\", \"8pt\", \"color\", \"#666\", \"toggle\", \"\", \"toggleColor\", \"#333\", \"text\", \"Show Labels\", 1, \"headerOption\", 3, \"btnClick\"], [\"fontSize\", \"8pt\", \"color\", \"#666\", \"toggle\", \"\", \"toggleColor\", \"#333\", \"text\", \"Show All Connections\", 1, \"headerOption\", 3, \"btnClick\"], [1, \"graph\"], [\"echarts\", \"\", 1, \"demo-chart\", 3, \"options\", \"chartMouseOver\", \"chartClick\"], [1, \"crawling-list\"], [\"for\", \"WebsiteNameForCrawler\"], [\"type\", \"text\", \"name\", \"websiteNameForCrawler\", 3, \"ngModel\", \"ngModelChange\"], [\"color\", \"#800080\", \"text\", \"Add Website\", 3, \"click\"], [4, \"ngFor\", \"ngForOf\"], [\"color\", \"#800080\", \"text\", \"Crawl my Websites\", 3, \"click\"]],\n  template: function SimplegraphComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelementStart(1, \"div\", 1);\n      i0.ɵɵelementStart(2, \"label\", 2);\n      i0.ɵɵtext(3, \"Create the Graph for one of your crawled Websites:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"input\", 3);\n      i0.ɵɵlistener(\"ngModelChange\", function SimplegraphComponent_Template_input_ngModelChange_4_listener($event) {\n        return ctx.websiteNameForGraph = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"div\", 4);\n      i0.ɵɵelementStart(6, \"div\", 0);\n      i0.ɵɵelementStart(7, \"div\", 5);\n      i0.ɵɵelementStart(8, \"app-button\", 6);\n      i0.ɵɵlistener(\"btnClick\", function SimplegraphComponent_Template_app_button_btnClick_8_listener() {\n        return ctx.deselectAll();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"app-button\", 7);\n      i0.ɵɵlistener(\"btnClick\", function SimplegraphComponent_Template_app_button_btnClick_9_listener() {\n        return ctx.showConnections();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"app-button\", 8);\n      i0.ɵɵlistener(\"btnClick\", function SimplegraphComponent_Template_app_button_btnClick_10_listener() {\n        return ctx.showLabels();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"app-button\", 9);\n      i0.ɵɵlistener(\"btnClick\", function SimplegraphComponent_Template_app_button_btnClick_11_listener() {\n        return ctx.showAllConnections();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"div\", 10);\n      i0.ɵɵelementStart(13, \"div\", 11);\n      i0.ɵɵlistener(\"chartMouseOver\", function SimplegraphComponent_Template_div_chartMouseOver_13_listener($event) {\n        return ctx.onChartMouseOver($event);\n      })(\"chartClick\", function SimplegraphComponent_Template_div_chartClick_13_listener($event) {\n        return ctx.onChartClick($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"div\", 12);\n      i0.ɵɵelementStart(15, \"div\", 1);\n      i0.ɵɵelementStart(16, \"label\", 13);\n      i0.ɵɵtext(17, \"Add new Website to your Crawling-List:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(18, \"input\", 14);\n      i0.ɵɵlistener(\"ngModelChange\", function SimplegraphComponent_Template_input_ngModelChange_18_listener($event) {\n        return ctx.websiteNameForCrawler = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(19, \"div\", 1);\n      i0.ɵɵelementStart(20, \"app-button\", 15);\n      i0.ɵɵlistener(\"click\", function SimplegraphComponent_Template_app_button_click_20_listener() {\n        return ctx.addWebsiteToCrawler();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(21, SimplegraphComponent_li_21_Template, 2, 1, \"li\", 16);\n      i0.ɵɵelementStart(22, \"div\", 1);\n      i0.ɵɵelementStart(23, \"app-button\", 17);\n      i0.ɵɵlistener(\"click\", function SimplegraphComponent_Template_app_button_click_23_listener() {\n        return ctx.crawlNewWebsites();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(24, \"div\", 0);\n      i0.ɵɵelementStart(25, \"div\");\n      i0.ɵɵelement(26, \"app-node-info\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.websiteNameForGraph);\n      i0.ɵɵadvance(9);\n      i0.ɵɵproperty(\"options\", ctx.options);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngModel\", ctx.websiteNameForCrawler);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngForOf\", ctx.crawledWebsites);\n    }\n  },\n  directives: [i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgModel, i3.ButtonComponent, i4.NgxEchartsDirective, i5.NgForOf, i6.NodeInfoComponent],\n  styles: [\".outer[_ngcontent-%COMP%]\\r\\n{\\r\\n  margin: 10px;\\r\\n}\\r\\n\\r\\n.demo-chart[_ngcontent-%COMP%] \\r\\n{\\r\\n    max-width: 1000px;\\r\\n    min-height: 600px;\\r\\n    margin: 10px auto;\\r\\n    overflow: auto;\\r\\n    border: 1px solid steelblue;\\r\\n    background-color: rgb(245, 245, 245);\\r\\n    padding: 10px;\\r\\n    \\r\\n}\\r\\n\\r\\n.graph[_ngcontent-%COMP%]\\r\\n{\\r\\n  clear: both;\\r\\n  width:70%;\\r\\n  margin-right:2%;\\r\\n  float: left;\\r\\n}\\r\\n\\r\\n.header[_ngcontent-%COMP%]\\r\\n{\\r\\n  border: solid, black;\\r\\n  background-color:aqua;\\r\\n}\\r\\n\\r\\n.headerOption[_ngcontent-%COMP%]\\r\\n{\\r\\n  float: left;\\r\\n  margin: 2px;\\r\\n}\\r\\n\\r\\n.crawling-list[_ngcontent-%COMP%] { width:27%;\\r\\n  float: left;}\\r\\n\\r\\n.btn[_ngcontent-%COMP%] {  background-color: purple;\\r\\n    color: purple;\\r\\n    max-height: 100px;\\r\\n    max-width: 300px;\\r\\n    display: flex;\\r\\n}\\r\\n\\r\\n.second_div[_ngcontent-%COMP%] {\\r\\n  width:50px; \\r\\n  height:50px; \\r\\n  background-color:green;\\r\\n  float: left;\\r\\n}\\r\\n\\r\\n.third_div[_ngcontent-%COMP%] {\\r\\n  width:50px; \\r\\n  height:50px; \\r\\n  background-color:blue;\\r\\n  float: left;\\r\\n}\\r\\n\\r\\n.clearfix[_ngcontent-%COMP%]:after {\\r\\n  visibility: hidden;\\r\\n  display: block;\\r\\n  font-size: 0;\\r\\n  content: \\\" \\\";\\r\\n  clear: both;\\r\\n  height: 0;\\r\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNpbXBsZWdyYXBoLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0VBRUUsWUFBWTtBQUNkOztBQUVBOztJQUVJLGlCQUFpQjtJQUNqQixpQkFBaUI7SUFDakIsaUJBQWlCO0lBQ2pCLGNBQWM7SUFDZCwyQkFBMkI7SUFDM0Isb0NBQW9DO0lBQ3BDLGFBQWE7SUFDYixzQkFBc0I7QUFDMUI7O0FBRUE7O0VBRUUsV0FBVztFQUNYLFNBQVM7RUFDVCxlQUFlO0VBQ2YsV0FBVztBQUNiOztBQUVBOztFQUVFLG9CQUFvQjtFQUNwQixxQkFBcUI7QUFDdkI7O0FBRUE7O0VBRUUsV0FBVztFQUNYLFdBQVc7QUFDYjs7QUFFQSxpQkFBaUIsU0FBUztFQUN4QixXQUFXLENBQUM7O0FBRWQsUUFBUSx3QkFBd0I7SUFDNUIsYUFBYTtJQUNiLGlCQUFpQjtJQUNqQixnQkFBZ0I7SUFDaEIsYUFBYTtBQUNqQjs7QUFHQTtFQUNFLFVBQVU7RUFDVixXQUFXO0VBQ1gsc0JBQXNCO0VBQ3RCLFdBQVc7QUFDYjs7QUFDQTtFQUNFLFVBQVU7RUFDVixXQUFXO0VBQ1gscUJBQXFCO0VBQ3JCLFdBQVc7QUFDYjs7QUFDQTtFQUNFLGtCQUFrQjtFQUNsQixjQUFjO0VBQ2QsWUFBWTtFQUNaLFlBQVk7RUFDWixXQUFXO0VBQ1gsU0FBUztBQUNYIiwiZmlsZSI6InNpbXBsZWdyYXBoLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIub3V0ZXJcclxue1xyXG4gIG1hcmdpbjogMTBweDtcclxufVxyXG5cclxuLmRlbW8tY2hhcnQgXHJcbntcclxuICAgIG1heC13aWR0aDogMTAwMHB4O1xyXG4gICAgbWluLWhlaWdodDogNjAwcHg7XHJcbiAgICBtYXJnaW46IDEwcHggYXV0bztcclxuICAgIG92ZXJmbG93OiBhdXRvO1xyXG4gICAgYm9yZGVyOiAxcHggc29saWQgc3RlZWxibHVlO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDI0NSwgMjQ1LCAyNDUpO1xyXG4gICAgcGFkZGluZzogMTBweDtcclxuICAgIC8qYm9yZGVyLXJhZGl1czogNXB4OyovXHJcbn1cclxuXHJcbi5ncmFwaFxyXG57XHJcbiAgY2xlYXI6IGJvdGg7XHJcbiAgd2lkdGg6NzAlO1xyXG4gIG1hcmdpbi1yaWdodDoyJTtcclxuICBmbG9hdDogbGVmdDtcclxufVxyXG5cclxuLmhlYWRlclxyXG57XHJcbiAgYm9yZGVyOiBzb2xpZCwgYmxhY2s7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjphcXVhO1xyXG59XHJcblxyXG4uaGVhZGVyT3B0aW9uXHJcbntcclxuICBmbG9hdDogbGVmdDtcclxuICBtYXJnaW46IDJweDtcclxufVxyXG5cclxuLmNyYXdsaW5nLWxpc3QgeyB3aWR0aDoyNyU7XHJcbiAgZmxvYXQ6IGxlZnQ7fVxyXG5cclxuLmJ0biB7ICBiYWNrZ3JvdW5kLWNvbG9yOiBwdXJwbGU7XHJcbiAgICBjb2xvcjogcHVycGxlO1xyXG4gICAgbWF4LWhlaWdodDogMTAwcHg7XHJcbiAgICBtYXgtd2lkdGg6IDMwMHB4O1xyXG4gICAgZGlzcGxheTogZmxleDtcclxufVxyXG5cclxuXHJcbi5zZWNvbmRfZGl2IHtcclxuICB3aWR0aDo1MHB4OyBcclxuICBoZWlnaHQ6NTBweDsgXHJcbiAgYmFja2dyb3VuZC1jb2xvcjpncmVlbjtcclxuICBmbG9hdDogbGVmdDtcclxufSBcclxuLnRoaXJkX2RpdiB7XHJcbiAgd2lkdGg6NTBweDsgXHJcbiAgaGVpZ2h0OjUwcHg7IFxyXG4gIGJhY2tncm91bmQtY29sb3I6Ymx1ZTtcclxuICBmbG9hdDogbGVmdDtcclxufVxyXG4uY2xlYXJmaXg6YWZ0ZXIge1xyXG4gIHZpc2liaWxpdHk6IGhpZGRlbjtcclxuICBkaXNwbGF5OiBibG9jaztcclxuICBmb250LXNpemU6IDA7XHJcbiAgY29udGVudDogXCIgXCI7XHJcbiAgY2xlYXI6IGJvdGg7XHJcbiAgaGVpZ2h0OiAwO1xyXG59Il19 */\"]\n});","map":{"version":3,"sources":["C:/Dev/Angular/netzkriecher-frontend/src/app/components/simplegraph/simplegraph.component.ts"],"names":["data","NodeInfoComponent","WebsiteRegister","GraphData","V2","NodeFromJson","WebsiteMap","i0","i1","i2","i3","i4","i5","i6","SimplegraphComponent_li_21_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","website_r1","$implicit","ɵɵadvance","ɵɵtextInterpolate1","spacingThreshhold","outerColor","innerColor","innerColorHover","selectedColorInner","SimplegraphComponent","constructor","websiteService","totalWidth","halfWidth","totalHeight","halfHeight","nodeSizeFalloff","radiusPerIteration","websiteNameForGraph","websiteNameForCrawler","loading","crawledWebsiteID","nodeConnectionStyle","curveness","width","color","opacity","type","cap","join","dashOffset","miterLimit","domChildConnectionStyle","selectedNodeName","domConnectionsActive","allConnectionsActive","labelsActive","remap","n","oldFrom","oldTo","newFrom","newTo","oldRange","proportion","newRange","calculatePosition","depth","index","total","rangeFrom","rangeTo","graphOffset","radians","Math","PI","radiansRemapped","x","cos","y","sin","pos","calculateOffset","getSymbolSize","currentDepth","radiansAvailable","frac","multiplier","size","getGraphData","websiteReg","linkData","map","forEach","value","key","root","get","rootName","rPos","nodePositionalInformation","rootNodeOptions","name","url","position","category","symbol","symbolSize","push","visited","queue","length","currentNode","shift","domChilds","intLinks","i","undefined","label","distance","graphEdgeOption","lineStyle","source","target","posInfo","arrowSize","includes","nodeItemOptions","draggable","symbolOffset","symbolRotate","itemStyle","r","colorStops","offset","global","emphasis","node","doubleSided","element","graphData","calculatePositions","rootPosition","rootSize","radiansPerChild","currentRadians","nodePosition","onChartMouseOver","ec","onChartClick","websiteRegister","getNode","showGraph","nodeInfoComponent","initializeTable","showAllConnections","showConnections","showLabels","deselectAll","prepareWebsite","dictElements","JSON","parse","nodeMap","Map","mediaIntGlobal","console","log","parentDocId","docId","extMedia","intMedia","extLinks","getDepth","getDOMParent","set","domParent","parent","website","initRealData","addWebsiteToCrawler","crawlWebsite","subscribe","next","postId","id","alert","body","toString","error","errorMessage","crawlNewWebsites","startNewCrawlers","getCrawledWebsites","response","crawledWebsites","ngOnInit","websitesToDisplay","stringify","prepareGraph","clear","getGraphSeriesOptions","edges","graphSeriesOptions","cursor","colorBy","hoverLayerThreshold","selectedMode","legendHoverLink","layout","nodes","nodeData","roam","nodeScaleRatio","fontStyle","show","overflow","tag","g1","options","title","text","tooltip","animation","animationDurationUpdate","animationEasingUpdate","series","ngAfterViewInit","ɵfac","SimplegraphComponent_Factory","t","ɵɵdirectiveInject","WebsiteService","ɵcmp","ɵɵdefineComponent","selectors","viewQuery","SimplegraphComponent_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","decls","vars","consts","template","SimplegraphComponent_Template","ɵɵlistener","SimplegraphComponent_Template_input_ngModelChange_4_listener","$event","SimplegraphComponent_Template_app_button_btnClick_8_listener","SimplegraphComponent_Template_app_button_btnClick_9_listener","SimplegraphComponent_Template_app_button_btnClick_10_listener","SimplegraphComponent_Template_app_button_btnClick_11_listener","SimplegraphComponent_Template_div_chartMouseOver_13_listener","SimplegraphComponent_Template_div_chartClick_13_listener","SimplegraphComponent_Template_input_ngModelChange_18_listener","SimplegraphComponent_Template_app_button_click_20_listener","ɵɵtemplate","SimplegraphComponent_Template_app_button_click_23_listener","ɵɵelement","ɵɵproperty","directives","DefaultValueAccessor","NgControlStatus","NgModel","ButtonComponent","NgxEchartsDirective","NgForOf","styles"],"mappings":"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A,QAAQ,GAAG;AACP,SAAKC,iBAAL,GAAyB,IAAIjC,GAAJ,EAAzB;AACA,SAAKiC,iBAAL,CAAuBtB,GAAvB,CAA2B,eAA3B,EAA4Cd,IAAI,CAACqC,SAAL,CAAetM,IAAf,CAA5C;AACA,SAAKsJ,eAAL,GAAuB,IAAIpJ,eAAJ,EAAvB;AACA,SAAK+L,kBAAL;AACA,SAAKM,YAAL;AACA,SAAK/C,SAAL;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAWI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A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","sourcesContent":["import * as data from '../../../assets/tagesschauNew.json';\r\nimport { NodeInfoComponent } from 'src/app/node-info/node-info.component';\r\nimport { WebsiteRegister, GraphData, V2, NodeFromJson, WebsiteMap } from 'src/app/graphData';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"src/app/website.service\";\r\nimport * as i2 from \"@angular/forms\";\r\nimport * as i3 from \"../button/button.component\";\r\nimport * as i4 from \"ngx-echarts\";\r\nimport * as i5 from \"@angular/common\";\r\nimport * as i6 from \"../../node-info/node-info.component\";\r\nfunction SimplegraphComponent_li_21_Template(rf, ctx) { if (rf & 1) {\r\n    i0.ɵɵelementStart(0, \"li\");\r\n    i0.ɵɵtext(1);\r\n    i0.ɵɵelementEnd();\r\n} if (rf & 2) {\r\n    const website_r1 = ctx.$implicit;\r\n    i0.ɵɵadvance(1);\r\n    i0.ɵɵtextInterpolate1(\" \", website_r1, \" \");\r\n} }\r\nconst spacingThreshhold = 0.007;\r\nconst outerColor = 'purple';\r\nconst innerColor = 'red';\r\nconst innerColorHover = 'orange';\r\nconst selectedColorInner = '#fff';\r\n/*\r\nconsiderations for node placement:\r\n- for first layer: for all childs of root, sum up all their children. Then try to find a configuration,\r\nwhere the 'center of mass' is at the root node. (adding up vectors * weight should equal 0 at the end)\r\n- might not work, because a valid strategy for that would also be to just dump all of the nodes at opposite ends\r\n\r\n- after finishing a whole depth layer, there might be a lot of space left unoccupied in that layer\r\n- the childnoderanges for the layer before could be accordingly ajusted to use up the whole 360°\r\n- (or atleast space them out more)\r\n\r\n*/\r\nexport class SimplegraphComponent {\r\n    constructor(websiteService) {\r\n        this.websiteService = websiteService;\r\n        this.totalWidth = 1000;\r\n        this.halfWidth = 500;\r\n        this.totalHeight = 1000;\r\n        this.halfHeight = 500;\r\n        this.nodeSizeFalloff = 200;\r\n        this.radiusPerIteration = 100;\r\n        this.websiteNameForGraph = \"\";\r\n        this.websiteNameForCrawler = \"\";\r\n        this.loading = false;\r\n        this.crawledWebsiteID = 2;\r\n        this.nodeConnectionStyle = {\r\n            curveness: 0,\r\n            width: 1,\r\n            color: 'grey',\r\n            opacity: 0.8,\r\n            type: 'dashed',\r\n            cap: 'square',\r\n            join: 'bevel',\r\n            dashOffset: 10,\r\n            miterLimit: 10,\r\n        };\r\n        this.domChildConnectionStyle = {\r\n            curveness: 0,\r\n            width: 2,\r\n            color: 'blue',\r\n            opacity: 0.8,\r\n            type: 'solid',\r\n            cap: 'square',\r\n            join: 'bevel',\r\n            dashOffset: 10,\r\n            miterLimit: 10,\r\n        };\r\n        this.selectedNodeName = \"\";\r\n        this.domConnectionsActive = true;\r\n        this.allConnectionsActive = false;\r\n        this.labelsActive = false;\r\n    }\r\n    remap(n, oldFrom, oldTo, newFrom, newTo) {\r\n        let oldRange = oldTo - oldFrom;\r\n        let proportion = (n - oldFrom) / oldRange;\r\n        let newRange = newTo - newFrom;\r\n        return newFrom + newRange * proportion;\r\n    }\r\n    calculatePosition(depth, index, total, rangeFrom, rangeTo, graphOffset) {\r\n        let radians = (total == 1) ? 0.5 * 2 * Math.PI : (index / total) * 2 * Math.PI;\r\n        let radiansRemapped = this.remap(radians, 0, Math.PI * 2, rangeFrom, rangeTo);\r\n        let x = Math.cos(radiansRemapped) * depth * this.radiusPerIteration + graphOffset.x;\r\n        let y = Math.sin(radiansRemapped) * depth * this.radiusPerIteration + graphOffset.y;\r\n        let pos = new V2(x, y);\r\n        return this.calculateOffset(pos);\r\n    }\r\n    calculateOffset(pos) {\r\n        return new V2(pos.x + this.halfWidth, pos.y + this.halfHeight);\r\n    }\r\n    getSymbolSize(currentDepth, radiansAvailable) {\r\n        let frac = radiansAvailable / (Math.PI * 2);\r\n        let multiplier = 1;\r\n        if (frac < spacingThreshhold) {\r\n            multiplier = frac / spacingThreshhold;\r\n        }\r\n        let size = 20 * (1 / (currentDepth + 1)) * multiplier;\r\n        return size;\r\n    }\r\n    getGraphData(websiteReg) {\r\n        let data = [];\r\n        let linkData = [];\r\n        websiteReg.map.forEach((value, key) => {\r\n            let root = value.map.get(value.rootName);\r\n            let rPos = root.nodePositionalInformation;\r\n            let rootNodeOptions = {\r\n                name: root.url,\r\n                x: rPos.position.x,\r\n                y: rPos.position.y,\r\n                category: 'root',\r\n                symbol: 'circle',\r\n                symbolSize: rPos.symbolSize\r\n            };\r\n            data.push(rootNodeOptions);\r\n            let visited = [];\r\n            let queue = [];\r\n            queue.push(root);\r\n            while (queue.length > 0) {\r\n                let currentNode = queue.shift();\r\n                visited.push(currentNode);\r\n                let domChilds = currentNode.domChilds;\r\n                if (this.allConnectionsActive) {\r\n                    let intLinks = currentNode.intLinks;\r\n                    for (let i = 0; i < intLinks.length; i++) {\r\n                        let n = value.map.get(intLinks[i]);\r\n                        if (n == undefined)\r\n                            continue;\r\n                        let label = {\r\n                            position: 'start',\r\n                            distance: 10\r\n                        };\r\n                        let graphEdgeOption = {\r\n                            lineStyle: this.nodeConnectionStyle,\r\n                            label: label,\r\n                            source: currentNode.url,\r\n                            target: n.url,\r\n                            symbol: ['none', 'arrow'],\r\n                            symbolSize: [0, 5],\r\n                            value: 3\r\n                        };\r\n                        linkData.push(graphEdgeOption);\r\n                    }\r\n                }\r\n                for (let i = 0; i < domChilds.length; i++) {\r\n                    let n = value.map.get(domChilds[i]);\r\n                    let posInfo = n.nodePositionalInformation;\r\n                    let arrowSize = n.nodePositionalInformation.symbolSize * 0.7;\r\n                    //show links to domChilds\r\n                    if (this.domConnectionsActive) {\r\n                        let label = {\r\n                            position: 'start',\r\n                            distance: 10\r\n                        };\r\n                        let graphEdgeOption = {\r\n                            lineStyle: this.domChildConnectionStyle,\r\n                            label: label,\r\n                            source: currentNode.url,\r\n                            target: n.url,\r\n                            symbol: ['none', 'arrow'],\r\n                            symbolSize: [0, arrowSize],\r\n                            value: 3\r\n                        };\r\n                        linkData.push(graphEdgeOption);\r\n                    }\r\n                    //add node if it doesnt already exist\r\n                    if (!visited.includes(n)) {\r\n                        let color = innerColor;\r\n                        if (this.selectedNodeName == n.url) {\r\n                            color = selectedColorInner;\r\n                        }\r\n                        //let domName = n.getDOMStripedName();\r\n                        let nodeItemOptions = {\r\n                            name: n.url,\r\n                            x: posInfo.position.x,\r\n                            y: posInfo.position.y,\r\n                            category: 'not root',\r\n                            draggable: false,\r\n                            symbol: 'circle',\r\n                            symbolSize: posInfo.symbolSize,\r\n                            symbolOffset: 0,\r\n                            symbolRotate: 0,\r\n                            itemStyle: {\r\n                                color: {\r\n                                    type: 'radial',\r\n                                    x: 0.5,\r\n                                    y: 0.5,\r\n                                    r: 0.5,\r\n                                    colorStops: [{\r\n                                            offset: 0.0,\r\n                                            color: color\r\n                                        },\r\n                                        {\r\n                                            offset: 1.0,\r\n                                            color: outerColor\r\n                                        }\r\n                                    ],\r\n                                    global: false\r\n                                },\r\n                                opacity: 1\r\n                            },\r\n                            emphasis: {\r\n                                itemStyle: {\r\n                                    color: {\r\n                                        type: 'radial',\r\n                                        x: 0.5,\r\n                                        y: 0.5,\r\n                                        r: 0.5,\r\n                                        colorStops: [{\r\n                                                offset: 0.0,\r\n                                                color: innerColorHover\r\n                                            },\r\n                                            {\r\n                                                offset: 1.0,\r\n                                                color: outerColor\r\n                                            }\r\n                                        ],\r\n                                        global: false\r\n                                    },\r\n                                    opacity: 1,\r\n                                },\r\n                            },\r\n                        };\r\n                        data.push(nodeItemOptions);\r\n                        queue.push(n);\r\n                    }\r\n                }\r\n            }\r\n            if (this.selectedNodeName != \"\" && !this.allConnectionsActive) {\r\n                let node = value.map.get(this.selectedNodeName);\r\n                for (let i = 0; i < node.intLinks.length; i++) {\r\n                    let n = value.map.get(node.intLinks[i]);\r\n                    let label = {\r\n                        position: 'start',\r\n                        distance: 10\r\n                    };\r\n                    let doubleSided = false;\r\n                    if (n != undefined) {\r\n                        n.intLinks.forEach(element => {\r\n                            if (element == node.url) {\r\n                                doubleSided = true;\r\n                            }\r\n                        });\r\n                    }\r\n                    let symbol = [];\r\n                    let symbolSize = [];\r\n                    if (doubleSided) {\r\n                        symbol = ['arrow', 'arrow'];\r\n                        symbolSize = [5, 5];\r\n                    }\r\n                    else {\r\n                        symbol = ['none', 'arrow'];\r\n                        symbolSize = [0, 5];\r\n                    }\r\n                    let graphEdgeOption = {\r\n                        lineStyle: this.nodeConnectionStyle,\r\n                        label: label,\r\n                        source: node.url,\r\n                        target: node.intLinks[i],\r\n                        symbol: symbol,\r\n                        symbolSize: symbolSize,\r\n                        value: 3\r\n                    };\r\n                    linkData.push(graphEdgeOption);\r\n                }\r\n            }\r\n        });\r\n        let graphData = new GraphData(data, linkData);\r\n        return graphData;\r\n    }\r\n    calculatePositions(websiteReg) {\r\n        websiteReg.map.forEach((value, key) => {\r\n            let root = value.map.get(value.rootName);\r\n            let rootPosition = this.calculatePosition(0, 1, 1, 0, Math.PI * 2, new V2(0, 0));\r\n            let rootSize = this.getSymbolSize(root.depth, Math.PI * 2);\r\n            root.nodePositionalInformation = { position: rootPosition, symbolSize: rootSize, rangeFrom: 0, rangeTo: Math.PI * 2 };\r\n            let visited = [];\r\n            let queue = [];\r\n            queue.push(root);\r\n            while (queue.length > 0) {\r\n                let currentNode = queue.shift();\r\n                visited.push(currentNode);\r\n                let domChilds = currentNode.domChilds;\r\n                let radiansPerChild = (currentNode.nodePositionalInformation.rangeTo - currentNode.nodePositionalInformation.rangeFrom) / domChilds.length;\r\n                let currentRadians = 0;\r\n                for (let i = 0; i < domChilds.length; i++) {\r\n                    let n = value.map.get(domChilds[i]);\r\n                    if (!visited.includes(n)) {\r\n                        let symbolSize = this.getSymbolSize(n.depth, radiansPerChild);\r\n                        let nodePosition = this.calculatePosition(n.depth, i, domChilds.length, currentNode.nodePositionalInformation.rangeFrom, currentNode.nodePositionalInformation.rangeTo, new V2(0, 0));\r\n                        let rangeFrom = currentNode.nodePositionalInformation.rangeFrom + currentRadians - (radiansPerChild * 0.5);\r\n                        currentRadians += radiansPerChild;\r\n                        let rangeTo = currentNode.nodePositionalInformation.rangeFrom + currentRadians - (radiansPerChild * 0.5);\r\n                        n.nodePositionalInformation =\r\n                            {\r\n                                position: nodePosition,\r\n                                symbolSize: symbolSize,\r\n                                rangeFrom: rangeFrom,\r\n                                rangeTo: rangeTo\r\n                            };\r\n                        queue.push(n);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    onChartMouseOver(ec) { }\r\n    onChartClick(ec) {\r\n        let n = this.websiteRegister.getNode(ec.name);\r\n        if (n != undefined) {\r\n            this.selectedNodeName = n.url;\r\n            this.showGraph();\r\n            this.nodeInfoComponent.node = n;\r\n            this.nodeInfoComponent.initializeTable();\r\n            return;\r\n        }\r\n    }\r\n    showAllConnections() {\r\n        this.allConnectionsActive = !this.allConnectionsActive;\r\n        this.showGraph();\r\n    }\r\n    showConnections() {\r\n        this.domConnectionsActive = !this.domConnectionsActive;\r\n        this.showGraph();\r\n    }\r\n    showLabels() {\r\n        this.labelsActive = !this.labelsActive;\r\n        this.showGraph();\r\n    }\r\n    deselectAll() {\r\n        //this.showIntMedia(this.website.internalMedia);\r\n    }\r\n    prepareWebsite(name, data) {\r\n        let dictElements = JSON.parse(data);\r\n        let nodeMap = new Map();\r\n        let mediaIntGlobal = [];\r\n        for (let index = 0; index < dictElements.length; index++) {\r\n            const element = dictElements[index];\r\n            if (index == 0) {\r\n                console.log(element);\r\n            }\r\n            let n = new NodeFromJson();\r\n            if (element.url == undefined) {\r\n                continue;\r\n            }\r\n            n.url = element.url;\r\n            n.parentDocId = element.parentDocId;\r\n            n.docId = element.docId;\r\n            n.extMedia = element['link:ext:media'];\r\n            n.intMedia = element['link:int:media'];\r\n            n.extLinks = element['link:ext'];\r\n            n.intLinks = element['link:int'];\r\n            n.getDepth();\r\n            n.getDOMParent();\r\n            if (n.depth >= 0) {\r\n                nodeMap.set(n.url, n);\r\n            }\r\n        }\r\n        nodeMap.forEach((node, key) => {\r\n            if (node.domParent != \"\") {\r\n                let parent = nodeMap.get(node.domParent);\r\n                if (parent != undefined) {\r\n                    parent.domChilds.push(key);\r\n                }\r\n            }\r\n        });\r\n        let website = new WebsiteMap(name, nodeMap, mediaIntGlobal);\r\n        website.rootName = \"https://www.tagesschau.de/\";\r\n        //console.log(\"Website Node nach dem Init View:\", website);\r\n        this.websiteRegister.map.set(name, website);\r\n        //return website;\r\n    }\r\n    /**\r\n     * The method fetches, saves and prepares the data for the Creation of the Website Graph. Approximately 200 Nodes,\r\n     * that were crawled by the Worker and saved into Redis, get fetched. The data is saved into dictionaries, adapting to\r\n     * the Data structure that was created in the Backend. Finally, the Nodes for the Graph are created.\r\n     */\r\n    async initRealData() {\r\n        /*\r\n        let nodeMap : Map<string, NodeFromJson> = new Map<string, NodeFromJson>();\r\n        this.loading = true;\r\n        this.errorMessage = \"\";\r\n        this.websiteService.getWebsiteNodes(this.websiteNameForGraph)\r\n          .subscribe(\r\n            response => {                           //next() callback\r\n              console.log('response received')\r\n              //this.websites = response;\r\n              let dictElements : {[index:string] : string}[] = JSON.parse(JSON.stringify(response))\r\n         \r\n              for (let index = 0; index < dictElements.length; index++) {\r\n                const element  : {[index:string] : string} = dictElements[index];\r\n          \r\n                let pdi : string = \"\";\r\n                let di : string = \"\";\r\n                let url : string = \"\";\r\n                let linksInt : string[] = [];\r\n                let mediaInt : string[] = [];\r\n                let linksExt : string[] = [];\r\n                let mediaExt : string[] = [];\r\n          \r\n                Object.entries(element).forEach(\r\n                  ([key, value]) =>\r\n                  {\r\n                    if(key.includes('parentDocId'))\r\n                    {\r\n                      pdi = value;\r\n                    }\r\n                    else if(key.includes('docId'))\r\n                    {\r\n                      di = value;\r\n                    }\r\n                    else if(key.includes(':int:media:'))\r\n                    {\r\n                      mediaInt.push(value);\r\n                    }\r\n                    else if(key.includes(':int:'))\r\n                    {\r\n                      linksInt.push(value);\r\n                    }\r\n                    else if(key.includes(':ext:media:'))\r\n                    {\r\n                      mediaExt.push(value);\r\n                    }\r\n                    else if(key.includes(':ext:'))\r\n                    {\r\n                      linksExt.push(value);\r\n                    }\r\n                    else if(key.includes('url'))\r\n                    {\r\n                      url = value;\r\n                    }\r\n                    \r\n                  }\r\n                );\r\n                \r\n                let n : NodeFromJson = new NodeFromJson();\r\n                n.url = url;\r\n                n.parentDocId = pdi;\r\n                n.docId = di;\r\n                n.extMedia = mediaExt;\r\n                n.intMedia = mediaInt;\r\n                n.extLinks = linksExt;\r\n                n.intLinks = linksInt;\r\n          \r\n                n.getDepth();\r\n                n.getDOMParent();\r\n                if(n.depth >= 0)\r\n                {\r\n                  nodeMap.set(n.url, n);\r\n                }\r\n              }\r\n          \r\n              nodeMap.forEach((node: NodeFromJson, key: string) =>\r\n              {\r\n                if(node.domParent != \"\")\r\n                {\r\n                  let parent = nodeMap.get(node.domParent);\r\n                  if(parent != undefined)\r\n                  {\r\n                    parent.domChilds.push(key);\r\n                  }\r\n                }\r\n              });\r\n            console.log(\"NodeMap: \")\r\n            console.log(nodeMap)\r\n            console.log(\"End reached\")\r\n            this.nodeMap = nodeMap;\r\n          \r\n            },\r\n            (error) => {                              //error() callback\r\n              console.error('Request failed with error')\r\n              this.errorMessage = error;\r\n              this.loading = false;\r\n            },\r\n            () => {                                   //complete() callback\r\n              console.error('Request completed')      //This is actually not needed\r\n              this.loading = false;\r\n            })\r\n            */\r\n    }\r\n    /**\r\n     * The User tells the Server which Website it should crawl next, so a Graph can be vusialized later on for\r\n     * this Website. The POST-Request to the Server is initialized and the Answer of the Server is read and told\r\n     * to the User. For that purpose, the crawlWebsite-Method returns an Observable which is subscribed upon.\r\n     */\r\n    addWebsiteToCrawler() {\r\n        this.crawledWebsiteID++;\r\n        this.websiteService.crawlWebsite(this.websiteNameForCrawler, this.crawledWebsiteID).subscribe({\r\n            next: data => {\r\n                this.postId = data.id;\r\n                console.log(data);\r\n                alert(data.body[0].toString() + \" is now starting to get crawled!\");\r\n            },\r\n            error: error => {\r\n                this.errorMessage = error.error;\r\n                console.error('There was an error!', error);\r\n                alert(this.errorMessage);\r\n            }\r\n        });\r\n    }\r\n    /**Restart Crawler in the Worker */\r\n    crawlNewWebsites() {\r\n        this.websiteService.startNewCrawlers().subscribe({\r\n            next: data => {\r\n                this.postId = data.id;\r\n                console.log(data);\r\n            },\r\n            error: error => {\r\n                this.errorMessage = error.error;\r\n                console.error('There was an error!', error);\r\n                alert(this.errorMessage);\r\n            }\r\n        });\r\n    }\r\n    getCrawledWebsites() {\r\n        this.loading = true;\r\n        this.errorMessage = \"\";\r\n        this.websiteService.getCrawledWebsites()\r\n            .subscribe((response) => {\r\n            console.log('response received');\r\n            this.crawledWebsites = response;\r\n        }, (error) => {\r\n            console.error('Request failed with error');\r\n            this.errorMessage = error;\r\n            this.loading = false;\r\n        }, () => {\r\n            console.error('Request completed'); //This is actually not needed \r\n            this.loading = false;\r\n        });\r\n    }\r\n    ngOnInit() {\r\n        this.websitesToDisplay = new Map();\r\n        this.websitesToDisplay.set('Tagesschau,de', JSON.stringify(data));\r\n        this.websiteRegister = new WebsiteRegister();\r\n        this.getCrawledWebsites();\r\n        this.prepareGraph();\r\n        this.showGraph();\r\n    }\r\n    /*\r\n   getWebsiteGraph () {\r\n     //prepare Website-Method with Rest Call ->\r\n     let nodeMap : Map<string, NodeFromJson> = new Map<string, NodeFromJson>();\r\n \r\n     this.loading = true;\r\n     this.errorMessage = \"\";\r\n     this.websiteService.getWebsiteNodes(this.websiteNameForGraph)\r\n       .subscribe(\r\n         data => {                           //next() callback\r\n           console.log('response received')\r\n     let dictElements : {[index:string] : string}[] = JSON.parse(JSON.stringify(data))\r\n \r\n     let mediaIntGlobal : string[] = [];\r\n \r\n     for (let index = 0; index < dictElements.length; index++)\r\n     {\r\n       const element = dictElements[index];\r\n \r\n       let n : NodeFromJson = new NodeFromJson();\r\n       if(element.url == undefined)\r\n       {\r\n         continue\r\n       }\r\n       n.url = element.url;\r\n       n.parentDocId = element.parentDocId;\r\n       n.docId = element.docId;\r\n       n.extMedia = element['link:ext:media'] as unknown as string[];\r\n       n.intMedia = element['link:int:media'] as unknown as string[];\r\n       n.extLinks = element['link:ext'] as unknown as string[];\r\n       n.intLinks = element['link:int'] as unknown as string[];\r\n \r\n       n.getDepth();\r\n       n.getDOMParent();\r\n       if(n.depth >= 0)\r\n       {\r\n         nodeMap.set(n.url, n);\r\n       }\r\n       \r\n     }\r\n \r\n     nodeMap.forEach((node: NodeFromJson, key: string) =>\r\n     {\r\n       if(node.domParent != \"\")\r\n       {\r\n         let parent = nodeMap.get(node.domParent);\r\n         if(parent != undefined)\r\n         {\r\n           parent.domChilds.push(key);\r\n         }\r\n       }\r\n     });\r\n     this.website = new WebsiteMap(this.websiteNameForGraph, nodeMap, mediaIntGlobal);\r\n     console.log(\"Website Node nach dem Click:\", this.website);\r\n \r\n     //prepareWebsite-Method ->\r\n \r\n     let img = document.getElementById(\"img\") as HTMLImageElement;\r\n     img?.setAttribute(\"src\", '../../assets/Images/NodeTest.png');\r\n     this.calculatePositions(this.website);\r\n     this.graphData = this.getGraphData(this.website);\r\n \r\n     let text : graphic.Text = new graphic.Text();\r\n     text.style.text = \"Hello\";\r\n \r\n    //ShowGraph-Method ->\r\n    let graphSeriesOptions : GraphSeriesOption =\r\n    {\r\n      cursor : 'hand', //'arrow'?\r\n      colorBy : 'data',\r\n      hoverLayerThreshold : 10,\r\n      selectedMode : 'multiple', //used for selecting?\r\n      name : 'Sitemap',\r\n      type : 'graph',\r\n      //coordinateSystem: 'none',\r\n      legendHoverLink : false,\r\n      layout : 'none',\r\n      nodes : this.graphData.nodeData,\r\n      edges : this.graphData.linkData,\r\n      draggable : false,\r\n      roam : true,\r\n      color : '#DF4477',\r\n      nodeScaleRatio : 0.6,\r\n      label : {\r\n        fontStyle : 'normal',\r\n        show : this.labelsActive,\r\n        color : 'black',\r\n        overflow : 'truncate',\r\n        tag : '!!!!!!'\r\n      },\r\n      itemStyle :\r\n      {\r\n        opacity : 1,\r\n        \r\n        //color :  'red'\r\n        /*\r\n        color :\r\n        {\r\n          svgElement : svgElement,\r\n          svgWidth : 10,\r\n          svgHeight : 10,\r\n          type : 'pattern',\r\n          x : 1,\r\n          y : 1,\r\n          rotation : 0,\r\n          scaleX : 1,\r\n          scaleY : 1\r\n        }\r\n        \r\n        \r\n        //RADIAL GRADIENT\r\n        color:\r\n        {\r\n          type : 'radial',\r\n          x : 0.5,\r\n          y : 0.5,\r\n          r : 0.5,\r\n          colorStops : [{\r\n            offset : 0.0,\r\n            color : 'red'\r\n          },\r\n          {\r\n            offset: 1.0,\r\n            color: 'purple'\r\n          }\r\n        ]\r\n        , global : false\r\n        }\r\n        \r\n        /*\r\n        //LINEAR GRADIENT\r\n        color:\r\n        {\r\n          {\r\n          type : 'linear',\r\n          x : 0.1,\r\n          y : 1,\r\n          x2 : 0.3,\r\n          y2 : 1,\r\n          colorStops : [\r\n            {\r\n              offset : 0.3,\r\n              color : 'red'\r\n            },\r\n            {\r\n              offset : 0.7,\r\n              color : 'blue'\r\n            }]\r\n          }\r\n        }\r\n        */\r\n    /*\r\n    color :\r\n    {\r\n      image : img,\r\n      repeat : 'repeat'\r\n    }\r\n    \r\n  },\r\n  lineStyle :\r\n  {\r\n    curveness : 1\r\n  },\r\n  emphasis :\r\n  {\r\n    scale : false, //scale up on focus\r\n    label :\r\n    {\r\n      show : false, //show/hide label of node\r\n      rotate : 0,\r\n      valueAnimation : true,\r\n      color : 'red',\r\n      fontStyle : 'normal',\r\n      fontWeight : 'bolder',\r\n      backgroundColor : 'blue',\r\n      height : 20\r\n    }\r\n  },\r\n  select :\r\n  {\r\n    label :\r\n    {\r\n      color: 'green'\r\n    }\r\n  }\r\n}\r\n\r\nthis.options =\r\n{\r\n  title:\r\n  {\r\n    text: 'CrawledSites'//this.website.name,\r\n    \r\n  },\r\n  tooltip: {},\r\n  animationDurationUpdate: 1500,\r\n  animationEasingUpdate: 'quinticInOut',\r\n  series: [graphSeriesOptions]\r\n};\r\n\r\nlet map = graphSeriesOptions.selectedMap;\r\n\r\n });\r\n}\r\n*/\r\n    prepareGraph() {\r\n        this.websiteRegister.map.clear();\r\n        this.websitesToDisplay.forEach((value, key) => {\r\n            this.prepareWebsite(key, value);\r\n        });\r\n        this.calculatePositions(this.websiteRegister);\r\n        //let img = document.getElementById(\"img\") as HTMLImageElement;\r\n        //img?.setAttribute(\"src\", '../../assets/Images/NodeTest.png');\r\n        //let text : graphic.Text = new graphic.Text();\r\n        //text.style.text = \"Hello\";\r\n    }\r\n    getGraphSeriesOptions() {\r\n        this.graphData = this.getGraphData(this.websiteRegister);\r\n        let edges = this.domConnectionsActive ? this.graphData.linkData : undefined;\r\n        let graphSeriesOptions = {\r\n            cursor: 'hand',\r\n            colorBy: 'data',\r\n            hoverLayerThreshold: 1,\r\n            selectedMode: 'single',\r\n            name: 'Sitemap',\r\n            type: 'graph',\r\n            //coordinateSystem: 'none',\r\n            legendHoverLink: false,\r\n            layout: 'none',\r\n            nodes: this.graphData.nodeData,\r\n            edges: edges,\r\n            draggable: false,\r\n            roam: true,\r\n            color: '#DF4477',\r\n            nodeScaleRatio: 0.6,\r\n            label: {\r\n                fontStyle: 'normal',\r\n                show: this.labelsActive,\r\n                color: 'black',\r\n                overflow: 'truncate',\r\n                tag: '!!!!!!'\r\n            },\r\n            //color :  'red'\r\n            /*\r\n            color :\r\n            {\r\n              svgElement : svgElement,\r\n              svgWidth : 10,\r\n              svgHeight : 10,\r\n              type : 'pattern',\r\n              x : 1,\r\n              y : 1,\r\n              rotation : 0,\r\n              scaleX : 1,\r\n              scaleY : 1\r\n            }\r\n            */\r\n        };\r\n        return graphSeriesOptions;\r\n    }\r\n    showGraph() {\r\n        let g1 = this.getGraphSeriesOptions();\r\n        //let g2 = this.getGraphSeriesOptions();\r\n        this.options =\r\n            {\r\n                title: {\r\n                    text: 'Crawled Sites' //this.website.name,\r\n                },\r\n                tooltip: {},\r\n                animation: false,\r\n                animationDurationUpdate: 1000,\r\n                animationEasingUpdate: 'quinticInOut',\r\n                series: [g1] //,g2] \r\n            };\r\n        //let map = graphSeriesOptions.selectedMap;\r\n    }\r\n    /**\r\n     * The User tells the Server which Website it should crawl next, so a Graph can be vusialized later on for\r\n     * this Website. The POST-Request to the Server is initialized and the Answer of the Server is read and told\r\n     * to the User. For that purpose, the crawlWebsite-Method returns an Observable which is subscribed upon.\r\n     */\r\n    crawlWebsite() {\r\n        this.crawledWebsiteID++;\r\n        this.websiteService.crawlWebsite(this.websiteNameForCrawler, this.crawledWebsiteID).subscribe({\r\n            next: data => {\r\n                this.postId = data.id;\r\n                console.log(data);\r\n                alert(data.body[0].toString() + \" is now starting to get crawled!\");\r\n                this.getCrawledWebsites();\r\n            },\r\n            error: error => {\r\n                this.errorMessage = error.error;\r\n                console.error('There was an error!', error);\r\n                alert(this.errorMessage);\r\n            }\r\n        });\r\n    }\r\n    ngAfterViewInit() {\r\n        console.log(\"NODEINFO?\", this.nodeInfoComponent);\r\n    }\r\n}\r\nSimplegraphComponent.ɵfac = function SimplegraphComponent_Factory(t) { return new (t || SimplegraphComponent)(i0.ɵɵdirectiveInject(i1.WebsiteService)); };\r\nSimplegraphComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: SimplegraphComponent, selectors: [[\"app-simplegraph\"]], viewQuery: function SimplegraphComponent_Query(rf, ctx) { if (rf & 1) {\r\n        i0.ɵɵviewQuery(NodeInfoComponent, 5);\r\n    } if (rf & 2) {\r\n        let _t;\r\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.nodeInfoComponent = _t.first);\r\n    } }, decls: 27, vars: 4, consts: [[1, \"clearfix\"], [1, \"headerOption\"], [\"for\", \"websiteNameForGraph\"], [\"type\", \"text\", \"name\", \"websiteNameForGraph\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [1, \"outer\"], [1, \"header\"], [\"fontSize\", \"8pt\", \"color\", \"#666\", \"toggle\", \"\", \"toggleColor\", \"#333\", \"text\", \"Deselect All\", 1, \"headerOption\", 3, \"btnClick\"], [\"fontSize\", \"8pt\", \"color\", \"#666\", \"toggle\", \"\", \"toggleColor\", \"#333\", \"text\", \"Show DOM-Connections\", 1, \"headerOption\", 3, \"btnClick\"], [\"fontSize\", \"8pt\", \"color\", \"#666\", \"toggle\", \"\", \"toggleColor\", \"#333\", \"text\", \"Show Labels\", 1, \"headerOption\", 3, \"btnClick\"], [\"fontSize\", \"8pt\", \"color\", \"#666\", \"toggle\", \"\", \"toggleColor\", \"#333\", \"text\", \"Show All Connections\", 1, \"headerOption\", 3, \"btnClick\"], [1, \"graph\"], [\"echarts\", \"\", 1, \"demo-chart\", 3, \"options\", \"chartMouseOver\", \"chartClick\"], [1, \"crawling-list\"], [\"for\", \"WebsiteNameForCrawler\"], [\"type\", \"text\", \"name\", \"websiteNameForCrawler\", 3, \"ngModel\", \"ngModelChange\"], [\"color\", \"#800080\", \"text\", \"Add Website\", 3, \"click\"], [4, \"ngFor\", \"ngForOf\"], [\"color\", \"#800080\", \"text\", \"Crawl my Websites\", 3, \"click\"]], template: function SimplegraphComponent_Template(rf, ctx) { if (rf & 1) {\r\n        i0.ɵɵelementStart(0, \"div\", 0);\r\n        i0.ɵɵelementStart(1, \"div\", 1);\r\n        i0.ɵɵelementStart(2, \"label\", 2);\r\n        i0.ɵɵtext(3, \"Create the Graph for one of your crawled Websites:\");\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementStart(4, \"input\", 3);\r\n        i0.ɵɵlistener(\"ngModelChange\", function SimplegraphComponent_Template_input_ngModelChange_4_listener($event) { return ctx.websiteNameForGraph = $event; });\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementStart(5, \"div\", 4);\r\n        i0.ɵɵelementStart(6, \"div\", 0);\r\n        i0.ɵɵelementStart(7, \"div\", 5);\r\n        i0.ɵɵelementStart(8, \"app-button\", 6);\r\n        i0.ɵɵlistener(\"btnClick\", function SimplegraphComponent_Template_app_button_btnClick_8_listener() { return ctx.deselectAll(); });\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementStart(9, \"app-button\", 7);\r\n        i0.ɵɵlistener(\"btnClick\", function SimplegraphComponent_Template_app_button_btnClick_9_listener() { return ctx.showConnections(); });\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementStart(10, \"app-button\", 8);\r\n        i0.ɵɵlistener(\"btnClick\", function SimplegraphComponent_Template_app_button_btnClick_10_listener() { return ctx.showLabels(); });\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementStart(11, \"app-button\", 9);\r\n        i0.ɵɵlistener(\"btnClick\", function SimplegraphComponent_Template_app_button_btnClick_11_listener() { return ctx.showAllConnections(); });\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementStart(12, \"div\", 10);\r\n        i0.ɵɵelementStart(13, \"div\", 11);\r\n        i0.ɵɵlistener(\"chartMouseOver\", function SimplegraphComponent_Template_div_chartMouseOver_13_listener($event) { return ctx.onChartMouseOver($event); })(\"chartClick\", function SimplegraphComponent_Template_div_chartClick_13_listener($event) { return ctx.onChartClick($event); });\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementStart(14, \"div\", 12);\r\n        i0.ɵɵelementStart(15, \"div\", 1);\r\n        i0.ɵɵelementStart(16, \"label\", 13);\r\n        i0.ɵɵtext(17, \"Add new Website to your Crawling-List:\");\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementStart(18, \"input\", 14);\r\n        i0.ɵɵlistener(\"ngModelChange\", function SimplegraphComponent_Template_input_ngModelChange_18_listener($event) { return ctx.websiteNameForCrawler = $event; });\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementStart(19, \"div\", 1);\r\n        i0.ɵɵelementStart(20, \"app-button\", 15);\r\n        i0.ɵɵlistener(\"click\", function SimplegraphComponent_Template_app_button_click_20_listener() { return ctx.addWebsiteToCrawler(); });\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵtemplate(21, SimplegraphComponent_li_21_Template, 2, 1, \"li\", 16);\r\n        i0.ɵɵelementStart(22, \"div\", 1);\r\n        i0.ɵɵelementStart(23, \"app-button\", 17);\r\n        i0.ɵɵlistener(\"click\", function SimplegraphComponent_Template_app_button_click_23_listener() { return ctx.crawlNewWebsites(); });\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelement(24, \"div\", 0);\r\n        i0.ɵɵelementStart(25, \"div\");\r\n        i0.ɵɵelement(26, \"app-node-info\");\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementEnd();\r\n    } if (rf & 2) {\r\n        i0.ɵɵadvance(4);\r\n        i0.ɵɵproperty(\"ngModel\", ctx.websiteNameForGraph);\r\n        i0.ɵɵadvance(9);\r\n        i0.ɵɵproperty(\"options\", ctx.options);\r\n        i0.ɵɵadvance(5);\r\n        i0.ɵɵproperty(\"ngModel\", ctx.websiteNameForCrawler);\r\n        i0.ɵɵadvance(3);\r\n        i0.ɵɵproperty(\"ngForOf\", ctx.crawledWebsites);\r\n    } }, directives: [i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgModel, i3.ButtonComponent, i4.NgxEchartsDirective, i5.NgForOf, i6.NodeInfoComponent], styles: [\".outer[_ngcontent-%COMP%]\\r\\n{\\r\\n  margin: 10px;\\r\\n}\\r\\n\\r\\n.demo-chart[_ngcontent-%COMP%] \\r\\n{\\r\\n    max-width: 1000px;\\r\\n    min-height: 600px;\\r\\n    margin: 10px auto;\\r\\n    overflow: auto;\\r\\n    border: 1px solid steelblue;\\r\\n    background-color: rgb(245, 245, 245);\\r\\n    padding: 10px;\\r\\n    \\r\\n}\\r\\n\\r\\n.graph[_ngcontent-%COMP%]\\r\\n{\\r\\n  clear: both;\\r\\n  width:70%;\\r\\n  margin-right:2%;\\r\\n  float: left;\\r\\n}\\r\\n\\r\\n.header[_ngcontent-%COMP%]\\r\\n{\\r\\n  border: solid, black;\\r\\n  background-color:aqua;\\r\\n}\\r\\n\\r\\n.headerOption[_ngcontent-%COMP%]\\r\\n{\\r\\n  float: left;\\r\\n  margin: 2px;\\r\\n}\\r\\n\\r\\n.crawling-list[_ngcontent-%COMP%] { width:27%;\\r\\n  float: left;}\\r\\n\\r\\n.btn[_ngcontent-%COMP%] {  background-color: purple;\\r\\n    color: purple;\\r\\n    max-height: 100px;\\r\\n    max-width: 300px;\\r\\n    display: flex;\\r\\n}\\r\\n\\r\\n.second_div[_ngcontent-%COMP%] {\\r\\n  width:50px; \\r\\n  height:50px; \\r\\n  background-color:green;\\r\\n  float: left;\\r\\n}\\r\\n\\r\\n.third_div[_ngcontent-%COMP%] {\\r\\n  width:50px; \\r\\n  height:50px; \\r\\n  background-color:blue;\\r\\n  float: left;\\r\\n}\\r\\n\\r\\n.clearfix[_ngcontent-%COMP%]:after {\\r\\n  visibility: hidden;\\r\\n  display: block;\\r\\n  font-size: 0;\\r\\n  content: \\\" \\\";\\r\\n  clear: both;\\r\\n  height: 0;\\r\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNpbXBsZWdyYXBoLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0VBRUUsWUFBWTtBQUNkOztBQUVBOztJQUVJLGlCQUFpQjtJQUNqQixpQkFBaUI7SUFDakIsaUJBQWlCO0lBQ2pCLGNBQWM7SUFDZCwyQkFBMkI7SUFDM0Isb0NBQW9DO0lBQ3BDLGFBQWE7SUFDYixzQkFBc0I7QUFDMUI7O0FBRUE7O0VBRUUsV0FBVztFQUNYLFNBQVM7RUFDVCxlQUFlO0VBQ2YsV0FBVztBQUNiOztBQUVBOztFQUVFLG9CQUFvQjtFQUNwQixxQkFBcUI7QUFDdkI7O0FBRUE7O0VBRUUsV0FBVztFQUNYLFdBQVc7QUFDYjs7QUFFQSxpQkFBaUIsU0FBUztFQUN4QixXQUFXLENBQUM7O0FBRWQsUUFBUSx3QkFBd0I7SUFDNUIsYUFBYTtJQUNiLGlCQUFpQjtJQUNqQixnQkFBZ0I7SUFDaEIsYUFBYTtBQUNqQjs7QUFHQTtFQUNFLFVBQVU7RUFDVixXQUFXO0VBQ1gsc0JBQXNCO0VBQ3RCLFdBQVc7QUFDYjs7QUFDQTtFQUNFLFVBQVU7RUFDVixXQUFXO0VBQ1gscUJBQXFCO0VBQ3JCLFdBQVc7QUFDYjs7QUFDQTtFQUNFLGtCQUFrQjtFQUNsQixjQUFjO0VBQ2QsWUFBWTtFQUNaLFlBQVk7RUFDWixXQUFXO0VBQ1gsU0FBUztBQUNYIiwiZmlsZSI6InNpbXBsZWdyYXBoLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIub3V0ZXJcclxue1xyXG4gIG1hcmdpbjogMTBweDtcclxufVxyXG5cclxuLmRlbW8tY2hhcnQgXHJcbntcclxuICAgIG1heC13aWR0aDogMTAwMHB4O1xyXG4gICAgbWluLWhlaWdodDogNjAwcHg7XHJcbiAgICBtYXJnaW46IDEwcHggYXV0bztcclxuICAgIG92ZXJmbG93OiBhdXRvO1xyXG4gICAgYm9yZGVyOiAxcHggc29saWQgc3RlZWxibHVlO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDI0NSwgMjQ1LCAyNDUpO1xyXG4gICAgcGFkZGluZzogMTBweDtcclxuICAgIC8qYm9yZGVyLXJhZGl1czogNXB4OyovXHJcbn1cclxuXHJcbi5ncmFwaFxyXG57XHJcbiAgY2xlYXI6IGJvdGg7XHJcbiAgd2lkdGg6NzAlO1xyXG4gIG1hcmdpbi1yaWdodDoyJTtcclxuICBmbG9hdDogbGVmdDtcclxufVxyXG5cclxuLmhlYWRlclxyXG57XHJcbiAgYm9yZGVyOiBzb2xpZCwgYmxhY2s7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjphcXVhO1xyXG59XHJcblxyXG4uaGVhZGVyT3B0aW9uXHJcbntcclxuICBmbG9hdDogbGVmdDtcclxuICBtYXJnaW46IDJweDtcclxufVxyXG5cclxuLmNyYXdsaW5nLWxpc3QgeyB3aWR0aDoyNyU7XHJcbiAgZmxvYXQ6IGxlZnQ7fVxyXG5cclxuLmJ0biB7ICBiYWNrZ3JvdW5kLWNvbG9yOiBwdXJwbGU7XHJcbiAgICBjb2xvcjogcHVycGxlO1xyXG4gICAgbWF4LWhlaWdodDogMTAwcHg7XHJcbiAgICBtYXgtd2lkdGg6IDMwMHB4O1xyXG4gICAgZGlzcGxheTogZmxleDtcclxufVxyXG5cclxuXHJcbi5zZWNvbmRfZGl2IHtcclxuICB3aWR0aDo1MHB4OyBcclxuICBoZWlnaHQ6NTBweDsgXHJcbiAgYmFja2dyb3VuZC1jb2xvcjpncmVlbjtcclxuICBmbG9hdDogbGVmdDtcclxufSBcclxuLnRoaXJkX2RpdiB7XHJcbiAgd2lkdGg6NTBweDsgXHJcbiAgaGVpZ2h0OjUwcHg7IFxyXG4gIGJhY2tncm91bmQtY29sb3I6Ymx1ZTtcclxuICBmbG9hdDogbGVmdDtcclxufVxyXG4uY2xlYXJmaXg6YWZ0ZXIge1xyXG4gIHZpc2liaWxpdHk6IGhpZGRlbjtcclxuICBkaXNwbGF5OiBibG9jaztcclxuICBmb250LXNpemU6IDA7XHJcbiAgY29udGVudDogXCIgXCI7XHJcbiAgY2xlYXI6IGJvdGg7XHJcbiAgaGVpZ2h0OiAwO1xyXG59Il19 */\"] });\r\n"]},"metadata":{},"sourceType":"module"}