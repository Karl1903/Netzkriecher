{"ast":null,"code":"import _asyncToGenerator from \"C:/Dev/Angular/netzkriecher-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { graphic } from 'echarts';\nimport * as data from '../../../assets/tagesschauNew.json';\nimport { NodeInfoComponent } from 'src/app/node-info/node-info.component';\nimport { GraphData, V2, NodeFromJson, WebsiteMap } from 'src/app/graphData';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/website.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"../button/button.component\";\nimport * as i4 from \"ngx-echarts\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"../../node-info/node-info.component\";\n\nfunction SimplegraphComponent_li_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const website_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", website_r1, \" \");\n  }\n}\n/*\r\nconsiderations for node placement:\r\n- for first layer: for all childs of root, sum up all their children. Then try to find a configuration,\r\nwhere the 'center of mass' is at the root node. (adding up vectors * weight should equal 0 at the end)\r\n- might not work, because a valid strategy for that would also be to just dump all of the nodes at opposite ends\r\n\r\n- after finishing a whole depth layer, there might be a lot of space left unoccupied in that layer\r\n- the childnoderanges for the layer before could be accordingly ajusted to use up the whole 360°\r\n- (or atleast space them out more)\r\n\r\n*/\n\n\nexport class SimplegraphComponent {\n  constructor(websiteService) {\n    this.websiteService = websiteService;\n    this.totalWidth = 1000;\n    this.halfWidth = 500;\n    this.totalHeight = 1000;\n    this.halfHeight = 500;\n    this.nodeSizeFalloff = 200;\n    this.radiusPerIteration = 100;\n    this.websiteNameForGraph = \"\";\n    this.websiteNameForCrawler = \"\";\n    this.loading = false;\n    this.crawledWebsiteID = 2;\n    this.selectedColorInner = '#333';\n    this.nodeConnectionStyle = {\n      curveness: 0,\n      width: 1,\n      color: 'grey',\n      opacity: 0.8,\n      type: 'dashed',\n      cap: 'square',\n      join: 'bevel',\n      dashOffset: 10,\n      miterLimit: 10\n    };\n    this.domChildConnectionStyle = {\n      curveness: 0,\n      width: 2,\n      color: 'blue',\n      opacity: 0.8,\n      type: 'solid',\n      cap: 'square',\n      join: 'bevel',\n      dashOffset: 10,\n      miterLimit: 10\n    };\n    this.spacingThreshhold = 0.007;\n    this.selectedNodeName = \"\"; //initTestData() : Map<string, NodeFromJson>\n\n    this.domConnectionsActive = true;\n    this.allConnectionsActive = false;\n    this.labelsActive = false;\n  }\n  /*\r\n  ngOnInit(): void\r\n  {\r\n    this.prepareGraph();\r\n    this.showGraph();\r\n  }*/\n\n\n  remap(n, oldFrom, oldTo, newFrom, newTo) {\n    let oldRange = oldTo - oldFrom;\n    let proportion = (n - oldFrom) / oldRange;\n    let newRange = newTo - newFrom;\n    return newFrom + newRange * proportion;\n  }\n\n  calculatePosition(depth, index, total, rangeFrom, rangeTo, graphOffset) {\n    let radians = total == 1 ? 0.5 * 2 * Math.PI : index / total * 2 * Math.PI;\n    let radiansRemapped = this.remap(radians, 0, Math.PI * 2, rangeFrom, rangeTo);\n    let x = Math.cos(radiansRemapped) * depth * this.radiusPerIteration + graphOffset.x;\n    let y = Math.sin(radiansRemapped) * depth * this.radiusPerIteration + graphOffset.y;\n    let pos = new V2(x, y);\n    return this.calculateOffset(pos);\n  }\n\n  calculateOffset(pos) {\n    return new V2(pos.x + this.halfWidth, pos.y + this.halfHeight);\n  }\n\n  getSymbolSize(currentDepth, radiansAvailable) {\n    let frac = radiansAvailable / (Math.PI * 2);\n    let multiplier = 1;\n\n    if (frac < this.spacingThreshhold) {\n      multiplier = frac / this.spacingThreshhold;\n    }\n\n    let size = 20 * (1 / (currentDepth + 1)) * multiplier;\n    return size;\n  } //nodePositions : Map<string, NodePositionalInformation> = new Map<string,NodePositionalInformation>(); \n\n\n  getGraphData(website) {\n    let root = website.map.get(website.rootName);\n    let data = [];\n    let linkData = [];\n    let rPos = root.nodePositionalInformation;\n    let rootNodeOptions = {\n      name: root.url,\n      x: rPos.position.x,\n      y: rPos.position.y,\n      category: 'root',\n      symbol: 'circle',\n      symbolSize: rPos.symbolSize\n    };\n    data.push(rootNodeOptions);\n    let visited = [];\n    let queue = [];\n    queue.push(root);\n\n    while (queue.length > 0) {\n      let currentNode = queue.shift();\n      visited.push(currentNode);\n      let domChilds = currentNode.domChilds;\n\n      if (this.allConnectionsActive) {\n        let intLinks = currentNode.intLinks;\n\n        for (let i = 0; i < intLinks.length; i++) {\n          let n = website.map.get(intLinks[i]);\n          if (n == undefined) continue;\n          let label = {\n            position: 'start',\n            distance: 10\n          };\n          let graphEdgeOption = {\n            lineStyle: this.nodeConnectionStyle,\n            label: label,\n            source: currentNode.url,\n            target: n.url,\n            symbol: ['none', 'arrow'],\n            symbolSize: [0, 5],\n            value: 3\n          };\n          linkData.push(graphEdgeOption);\n        }\n      }\n\n      for (let i = 0; i < domChilds.length; i++) {\n        let n = website.map.get(domChilds[i]);\n        let posInfo = n.nodePositionalInformation;\n        let arrowSize = n.nodePositionalInformation.symbolSize * 0.7; //show links to domChilds\n\n        if (this.domConnectionsActive) {\n          let label = {\n            position: 'start',\n            distance: 10\n          };\n          let graphEdgeOption = {\n            lineStyle: this.domChildConnectionStyle,\n            label: label,\n            source: currentNode.url,\n            target: n.url,\n            symbol: ['none', 'arrow'],\n            symbolSize: [0, arrowSize],\n            value: 3\n          };\n          linkData.push(graphEdgeOption);\n        } //add node if it doesnt already exist\n\n\n        if (!visited.includes(n)) {\n          let color = 'green';\n\n          if (this.selectedNodeName == n.url) {\n            color = this.selectedColorInner;\n          } //let domName = n.getDOMStripedName();\n\n\n          let nodeItemOptions = {\n            name: n.url,\n            x: posInfo.position.x,\n            y: posInfo.position.y,\n            category: 'not root',\n            draggable: false,\n            symbol: 'circle',\n            symbolSize: posInfo.symbolSize,\n            symbolOffset: 0,\n            symbolRotate: 0,\n            itemStyle: {\n              color: color\n            },\n            emphasis: {\n              itemStyle: {\n                color: 'red',\n                opacity: 1\n              }\n            }\n          };\n          data.push(nodeItemOptions);\n          queue.push(n);\n        }\n      }\n    }\n\n    if (this.selectedNodeName != \"\" && !this.allConnectionsActive) {\n      let node = website.map.get(this.selectedNodeName);\n\n      for (let i = 0; i < node.intLinks.length; i++) {\n        let n = website.map.get(node.intLinks[i]);\n        let label = {\n          position: 'start',\n          distance: 10\n        };\n        let doubleSided = false;\n\n        if (n != undefined) {\n          n.intLinks.forEach(element => {\n            if (element == node.url) {\n              doubleSided = true;\n            }\n          });\n        }\n\n        let symbol = [];\n        let symbolSize = [];\n\n        if (doubleSided) {\n          symbol = ['arrow', 'arrow'];\n          symbolSize = [5, 5];\n        } else {\n          symbol = ['none', 'arrow'];\n          symbolSize = [0, 5];\n        }\n\n        let graphEdgeOption = {\n          lineStyle: this.nodeConnectionStyle,\n          label: label,\n          source: node.url,\n          target: node.intLinks[i],\n          symbol: symbol,\n          symbolSize: symbolSize,\n          value: 3\n        };\n        linkData.push(graphEdgeOption);\n      }\n    }\n\n    let graphData = new GraphData(data, linkData);\n    return graphData;\n  }\n\n  calculatePositions(website) {\n    let root = website.map.get(website.rootName);\n    let rootPosition = this.calculatePosition(0, 1, 1, 0, Math.PI * 2, new V2(0, 0));\n    let rootSize = this.getSymbolSize(root.depth, Math.PI * 2);\n    root.nodePositionalInformation = {\n      position: rootPosition,\n      symbolSize: rootSize,\n      rangeFrom: 0,\n      rangeTo: Math.PI * 2\n    };\n    let visited = [];\n    let queue = [];\n    queue.push(root);\n\n    while (queue.length > 0) {\n      let currentNode = queue.shift();\n      visited.push(currentNode);\n      let domChilds = currentNode.domChilds;\n      let radiansPerChild = (currentNode.nodePositionalInformation.rangeTo - currentNode.nodePositionalInformation.rangeFrom) / domChilds.length;\n      let currentRadians = 0;\n\n      for (let i = 0; i < domChilds.length; i++) {\n        let n = website.map.get(domChilds[i]);\n\n        if (!visited.includes(n)) {\n          let symbolSize = this.getSymbolSize(n.depth, radiansPerChild);\n          let nodePosition = this.calculatePosition(n.depth, i, domChilds.length, currentNode.nodePositionalInformation.rangeFrom, currentNode.nodePositionalInformation.rangeTo, new V2(0, 0));\n          let rangeFrom = currentNode.nodePositionalInformation.rangeFrom + currentRadians - radiansPerChild * 0.5;\n          currentRadians += radiansPerChild;\n          let rangeTo = currentNode.nodePositionalInformation.rangeFrom + currentRadians - radiansPerChild * 0.5;\n          n.nodePositionalInformation = {\n            position: nodePosition,\n            symbolSize: symbolSize,\n            rangeFrom: rangeFrom,\n            rangeTo: rangeTo\n          };\n          queue.push(n);\n        }\n      }\n    }\n  }\n\n  onChartMouseOver(ec) {//console.log(\"hover on \" + ec.name);\n  }\n\n  onChartClick(ec) {\n    let n = this.website.map.get(ec.name);\n\n    if (n != undefined) {\n      this.selectedNodeName = n.url; //this.prepareGraph();\n\n      this.showGraph();\n      this.nodeInfoComponent.node = n;\n      this.nodeInfoComponent.initializeTable(); //let transformed = this.listToTable(media);\n      //this.nodeInfoComponent.images = transformed;\n      //this.showIntMedia(n.intMedia);\n\n      return;\n    }\n  }\n\n  showAllConnections() {\n    this.allConnectionsActive = !this.allConnectionsActive; //this.prepareGraph();\n\n    this.showGraph();\n  }\n\n  showConnections() {\n    this.domConnectionsActive = !this.domConnectionsActive;\n    this.showGraph();\n  }\n\n  showLabels() {\n    this.labelsActive = !this.labelsActive;\n    this.showGraph();\n  }\n\n  deselectAll() {//this.showIntMedia(this.website.internalMedia);\n  }\n\n  prepareWebsite(name) {\n    let dictElements = JSON.parse(JSON.stringify(data));\n    let nodeMap = new Map();\n    let mediaIntGlobal = [];\n\n    for (let index = 0; index < dictElements.length; index++) {\n      const element = dictElements[index];\n      let n = new NodeFromJson();\n\n      if (element.url == undefined) {\n        continue;\n      }\n\n      n.url = element.url;\n      n.parentDocId = element.parentDocId;\n      n.docId = element.docId;\n      n.extMedia = element['link:ext:media'];\n      n.intMedia = element['link:int:media'];\n      n.extLinks = element['link:ext'];\n      n.intLinks = element['link:int'];\n      n.getDepth();\n      n.getDOMParent();\n\n      if (n.depth >= 0) {\n        nodeMap.set(n.url, n);\n      }\n    }\n\n    nodeMap.forEach((node, key) => {\n      if (node.domParent != \"\") {\n        let parent = nodeMap.get(node.domParent);\n\n        if (parent != undefined) {\n          parent.domChilds.push(key);\n        }\n      }\n    });\n    let website = new WebsiteMap(name, nodeMap, mediaIntGlobal);\n    console.log(\"Website Node nach dem Init View:\", website);\n    return website;\n  }\n  /**\r\n   * The method fetches, saves and prepares the data for the Creation of the Website Graph. Approximately 200 Nodes,\r\n   * that were crawled by the Worker and saved into Redis, get fetched. The data is saved into dictionaries, adapting to\r\n   * the Data structure that was created in the Backend. Finally, the Nodes for the Graph are created.\r\n   */\n\n\n  initRealData() {\n    /*\r\n    let nodeMap : Map<string, NodeFromJson> = new Map<string, NodeFromJson>();\r\n    this.loading = true;\r\n    this.errorMessage = \"\";\r\n    this.websiteService.getWebsiteNodes(this.websiteNameForGraph)\r\n      .subscribe(\r\n        response => {                           //next() callback\r\n          console.log('response received')\r\n          //this.websites = response;\r\n          let dictElements : {[index:string] : string}[] = JSON.parse(JSON.stringify(response))\r\n     \r\n          for (let index = 0; index < dictElements.length; index++) {\r\n            const element  : {[index:string] : string} = dictElements[index];\r\n      \r\n            let pdi : string = \"\";\r\n            let di : string = \"\";\r\n            let url : string = \"\";\r\n            let linksInt : string[] = [];\r\n            let mediaInt : string[] = [];\r\n            let linksExt : string[] = [];\r\n            let mediaExt : string[] = [];\r\n      \r\n            Object.entries(element).forEach(\r\n              ([key, value]) =>\r\n              {\r\n                if(key.includes('parentDocId'))\r\n                {\r\n                  pdi = value;\r\n                }\r\n                else if(key.includes('docId'))\r\n                {\r\n                  di = value;\r\n                }\r\n                else if(key.includes(':int:media:'))\r\n                {\r\n                  mediaInt.push(value);\r\n                }\r\n                else if(key.includes(':int:'))\r\n                {\r\n                  linksInt.push(value);\r\n                }\r\n                else if(key.includes(':ext:media:'))\r\n                {\r\n                  mediaExt.push(value);\r\n                }\r\n                else if(key.includes(':ext:'))\r\n                {\r\n                  linksExt.push(value);\r\n                }\r\n                else if(key.includes('url'))\r\n                {\r\n                  url = value;\r\n                }\r\n                \r\n              }\r\n            );\r\n            \r\n            let n : NodeFromJson = new NodeFromJson();\r\n            n.url = url;\r\n            n.parentDocId = pdi;\r\n            n.docId = di;\r\n            n.extMedia = mediaExt;\r\n            n.intMedia = mediaInt;\r\n            n.extLinks = linksExt;\r\n            n.intLinks = linksInt;\r\n      \r\n            n.getDepth();\r\n            n.getDOMParent();\r\n            if(n.depth >= 0)\r\n            {\r\n              nodeMap.set(n.url, n);\r\n            }\r\n          }\r\n      \r\n          nodeMap.forEach((node: NodeFromJson, key: string) =>\r\n          {\r\n            if(node.domParent != \"\")\r\n            {\r\n              let parent = nodeMap.get(node.domParent);\r\n              if(parent != undefined)\r\n              {\r\n                parent.domChilds.push(key);\r\n              }\r\n            }\r\n          });\r\n        console.log(\"NodeMap: \")\r\n        console.log(nodeMap)\r\n        console.log(\"End reached\")\r\n        this.nodeMap = nodeMap;\r\n      \r\n        },\r\n        (error) => {                              //error() callback\r\n          console.error('Request failed with error')\r\n          this.errorMessage = error;\r\n          this.loading = false;\r\n        },\r\n        () => {                                   //complete() callback\r\n          console.error('Request completed')      //This is actually not needed\r\n          this.loading = false;\r\n        })\r\n        */\n\n    return _asyncToGenerator(function* () {})();\n  }\n  /**\r\n   * The User tells the Server which Website it should crawl next, so a Graph can be vusialized later on for\r\n   * this Website. The POST-Request to the Server is initialized and the Answer of the Server is read and told\r\n   * to the User. For that purpose, the crawlWebsite-Method returns an Observable which is subscribed upon.\r\n   */\n\n\n  addWebsiteToCrawler() {\n    this.crawledWebsiteID++;\n    this.websiteService.crawlWebsite(this.websiteNameForCrawler, this.crawledWebsiteID).subscribe({\n      next: data => {\n        this.postId = data.id;\n        console.log(data);\n        alert(data.body[0].toString() + \" is now starting to get crawled!\");\n      },\n      error: error => {\n        this.errorMessage = error.error;\n        console.error('There was an error!', error);\n        alert(this.errorMessage);\n      }\n    });\n  }\n  /**Restart Crawler in the Worker */\n\n\n  crawlNewWebsites() {\n    this.websiteService.startNewCrawlers().subscribe({\n      next: data => {\n        this.postId = data.id;\n        console.log(data);\n      },\n      error: error => {\n        this.errorMessage = error.error;\n        console.error('There was an error!', error);\n        alert(this.errorMessage);\n      }\n    });\n  }\n\n  getCrawledWebsites() {\n    this.loading = true;\n    this.errorMessage = \"\";\n    this.websiteService.getCrawledWebsites().subscribe(response => {\n      console.log('response received');\n      this.crawledWebsites = response;\n    }, error => {\n      console.error('Request failed with error');\n      this.errorMessage = error;\n      this.loading = false;\n    }, () => {\n      console.error('Request completed'); //This is actually not needed \n\n      this.loading = false;\n    });\n  }\n\n  ngOnInit() {\n    this.getCrawledWebsites();\n    this.prepareGraph();\n    this.showGraph();\n  }\n\n  getWebsiteGraph() {\n    //prepare Website-Method with Rest Call ->\n    let nodeMap = new Map();\n    this.loading = true;\n    this.errorMessage = \"\";\n    this.websiteService.getWebsiteNodes(this.websiteNameForGraph).subscribe(data => {\n      console.log('response received');\n      let dictElements = JSON.parse(JSON.stringify(data));\n      let mediaIntGlobal = [];\n\n      for (let index = 0; index < dictElements.length; index++) {\n        const element = dictElements[index];\n        let n = new NodeFromJson();\n\n        if (element.url == undefined) {\n          continue;\n        }\n\n        n.url = element.url;\n        n.parentDocId = element.parentDocId;\n        n.docId = element.docId;\n        n.extMedia = element['link:ext:media'];\n        n.intMedia = element['link:int:media'];\n        n.extLinks = element['link:ext'];\n        n.intLinks = element['link:int'];\n        n.getDepth();\n        n.getDOMParent();\n\n        if (n.depth >= 0) {\n          nodeMap.set(n.url, n);\n        }\n      }\n\n      nodeMap.forEach((node, key) => {\n        if (node.domParent != \"\") {\n          let parent = nodeMap.get(node.domParent);\n\n          if (parent != undefined) {\n            parent.domChilds.push(key);\n          }\n        }\n      });\n      this.website = new WebsiteMap(this.websiteNameForGraph, nodeMap, mediaIntGlobal);\n      console.log(\"Website Node nach dem Click:\", this.website); //prepareWebsite-Method ->\n\n      let img = document.getElementById(\"img\");\n      img === null || img === void 0 ? void 0 : img.setAttribute(\"src\", '../../assets/Images/NodeTest.png');\n      this.calculatePositions(this.website);\n      this.graphData = this.getGraphData(this.website);\n      let text = new graphic.Text();\n      text.style.text = \"Hello\"; //ShowGraph-Method ->\n\n      let graphSeriesOptions = {\n        cursor: 'hand',\n        colorBy: 'data',\n        hoverLayerThreshold: 10,\n        selectedMode: 'multiple',\n        name: 'Sitemap',\n        type: 'graph',\n        //coordinateSystem: 'none',\n        legendHoverLink: false,\n        layout: 'none',\n        nodes: this.graphData.nodeData,\n        edges: this.graphData.linkData,\n        draggable: false,\n        roam: true,\n        color: '#DF4477',\n        nodeScaleRatio: 0.6,\n        label: {\n          fontStyle: 'normal',\n          show: this.labelsActive,\n          color: 'black',\n          overflow: 'truncate',\n          tag: '!!!!!!'\n        },\n        itemStyle: {\n          opacity: 1,\n          //color :  'red'\n\n          /*\r\n          color :\r\n          {\r\n            svgElement : svgElement,\r\n            svgWidth : 10,\r\n            svgHeight : 10,\r\n            type : 'pattern',\r\n            x : 1,\r\n            y : 1,\r\n            rotation : 0,\r\n            scaleX : 1,\r\n            scaleY : 1\r\n          }\r\n          */\n          //RADIAL GRADIENT\n          color: {\n            type: 'radial',\n            x: 0.5,\n            y: 0.5,\n            r: 0.5,\n            colorStops: [{\n              offset: 0.0,\n              color: 'red'\n            }, {\n              offset: 1.0,\n              color: 'purple'\n            }],\n            global: false\n          }\n          /*\r\n          //LINEAR GRADIENT\r\n          color:\r\n          {\r\n            {\r\n            type : 'linear',\r\n            x : 0.1,\r\n            y : 1,\r\n            x2 : 0.3,\r\n            y2 : 1,\r\n            colorStops : [\r\n              {\r\n                offset : 0.3,\r\n                color : 'red'\r\n              },\r\n              {\r\n                offset : 0.7,\r\n                color : 'blue'\r\n              }]\r\n            }\r\n          }\r\n          */\n\n          /*\r\n          color :\r\n          {\r\n            image : img,\r\n            repeat : 'repeat'\r\n          }\r\n          */\n\n        },\n        lineStyle: {\n          curveness: 1\n        },\n        emphasis: {\n          scale: false,\n          label: {\n            show: false,\n            rotate: 0,\n            valueAnimation: true,\n            color: 'red',\n            fontStyle: 'normal',\n            fontWeight: 'bolder',\n            backgroundColor: 'blue',\n            height: 20\n          }\n        },\n        select: {\n          label: {\n            color: 'green'\n          }\n        }\n      };\n      this.options = {\n        title: {\n          text: this.website.name\n        },\n        tooltip: {},\n        animationDurationUpdate: 1500,\n        animationEasingUpdate: 'quinticInOut',\n        series: [graphSeriesOptions]\n      };\n      let map = graphSeriesOptions.selectedMap;\n    });\n  }\n\n  prepareGraph() {\n    this.website = this.prepareWebsite(\"Tagesschau.de\");\n    this.website.rootName = \"https://www.tagesschau.de/\";\n    let img = document.getElementById(\"img\");\n    img === null || img === void 0 ? void 0 : img.setAttribute(\"src\", '../../assets/Images/NodeTest.png');\n    this.calculatePositions(this.website);\n    console.log(this.website);\n    let text = new graphic.Text();\n    text.style.text = \"Hello\";\n  }\n\n  getGraphSeriesOptions() {\n    this.graphData = this.getGraphData(this.website);\n    let edges = this.domConnectionsActive ? this.graphData.linkData : undefined;\n    let graphSeriesOptions = {\n      cursor: 'hand',\n      colorBy: 'data',\n      hoverLayerThreshold: 1,\n      selectedMode: 'single',\n      name: 'Sitemap',\n      type: 'graph',\n      //coordinateSystem: 'none',\n      legendHoverLink: false,\n      layout: 'none',\n      nodes: this.graphData.nodeData,\n      edges: edges,\n      draggable: false,\n      roam: true,\n      color: '#DF4477',\n      nodeScaleRatio: 0.6,\n      label: {\n        fontStyle: 'normal',\n        show: this.labelsActive,\n        color: 'black',\n        overflow: 'truncate',\n        tag: '!!!!!!'\n      },\n      itemStyle: {\n        opacity: 1,\n        //color :  'red'\n\n        /*\r\n        color :\r\n        {\r\n          svgElement : svgElement,\r\n          svgWidth : 10,\r\n          svgHeight : 10,\r\n          type : 'pattern',\r\n          x : 1,\r\n          y : 1,\r\n          rotation : 0,\r\n          scaleX : 1,\r\n          scaleY : 1\r\n        }\r\n        */\n        //RADIAL GRADIENT\n        color: {\n          type: 'radial',\n          x: 0.5,\n          y: 0.5,\n          r: 0.5,\n          colorStops: [{\n            offset: 0.0,\n            color: 'red'\n          }, {\n            offset: 1.0,\n            color: 'purple'\n          }],\n          global: false\n        }\n        /*\r\n        //LINEAR GRADIENT\r\n        color:\r\n        {\r\n          {\r\n          type : 'linear',\r\n          x : 0.1,\r\n          y : 1,\r\n          x2 : 0.3,\r\n          y2 : 1,\r\n          colorStops : [\r\n            {\r\n              offset : 0.3,\r\n              color : 'red'\r\n            },\r\n            {\r\n              offset : 0.7,\r\n              color : 'blue'\r\n            }]\r\n          }\r\n        }\r\n        */\n\n        /*\r\n        color :\r\n        {\r\n          image : img,\r\n          repeat : 'repeat'\r\n        }\r\n        */\n\n      },\n      lineStyle: {\n        curveness: 1\n      },\n      emphasis: {\n        scale: false,\n        itemStyle: {\n          opacity: 1,\n          color: {\n            type: 'radial',\n            x: 0.5,\n            y: 0.5,\n            r: 0.5,\n            colorStops: [{\n              offset: 0.0,\n              color: 'orange'\n            }, {\n              offset: 1.0,\n              color: 'purple'\n            }],\n            global: false\n          }\n        },\n        label: {\n          show: false,\n          rotate: 0,\n          valueAnimation: true,\n          color: 'red',\n          fontStyle: 'normal',\n          fontWeight: 'bolder',\n          backgroundColor: 'blue',\n          height: 20\n        }\n      },\n      select: {\n        itemStyle: {\n          opacity: 1,\n          color: {\n            type: 'radial',\n            x: 0.5,\n            y: 0.5,\n            r: 0.5,\n            colorStops: [{\n              offset: 0.0,\n              color: 'white'\n            }, {\n              offset: 1.0,\n              color: 'purple'\n            }],\n            global: false\n          }\n        },\n        label: {\n          color: 'green'\n        }\n      }\n    };\n    return graphSeriesOptions;\n  }\n\n  showGraph() {\n    let g1 = this.getGraphSeriesOptions();\n    let g2 = this.getGraphSeriesOptions();\n    this.options = {\n      title: {\n        text: this.website.name\n      },\n      tooltip: {},\n      animation: false,\n      animationDurationUpdate: 1000,\n      animationEasingUpdate: 'quinticInOut',\n      series: [g1, g2]\n    }; //let map = graphSeriesOptions.selectedMap;\n  }\n  /**\r\n   * The User tells the Server which Website it should crawl next, so a Graph can be vusialized later on for\r\n   * this Website. The POST-Request to the Server is initialized and the Answer of the Server is read and told\r\n   * to the User. For that purpose, the crawlWebsite-Method returns an Observable which is subscribed upon.\r\n   */\n\n\n  crawlWebsite() {\n    this.crawledWebsiteID++;\n    this.websiteService.crawlWebsite(this.websiteNameForCrawler, this.crawledWebsiteID).subscribe({\n      next: data => {\n        this.postId = data.id;\n        console.log(data);\n        alert(data.body[0].toString() + \" is now starting to get crawled!\");\n        this.getCrawledWebsites();\n      },\n      error: error => {\n        this.errorMessage = error.error;\n        console.error('There was an error!', error);\n        alert(this.errorMessage);\n      }\n    });\n  }\n\n  ngAfterViewInit() {\n    console.log(\"NODEINFO?\", this.nodeInfoComponent);\n  }\n\n}\n\nSimplegraphComponent.ɵfac = function SimplegraphComponent_Factory(t) {\n  return new (t || SimplegraphComponent)(i0.ɵɵdirectiveInject(i1.WebsiteService));\n};\n\nSimplegraphComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: SimplegraphComponent,\n  selectors: [[\"app-simplegraph\"]],\n  viewQuery: function SimplegraphComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(NodeInfoComponent, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.nodeInfoComponent = _t.first);\n    }\n  },\n  decls: 29,\n  vars: 4,\n  consts: [[1, \"clearfix\"], [1, \"headerOption\"], [\"for\", \"websiteNameForGraph\"], [\"type\", \"text\", \"name\", \"websiteNameForGraph\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"color\", \"#800080\", \"text\", \"Create Website Graph\", 3, \"click\"], [1, \"outer\"], [1, \"header\"], [\"fontSize\", \"8pt\", \"color\", \"#666\", \"toggle\", \"\", \"toggleColor\", \"#333\", \"text\", \"Deselect All\", 1, \"headerOption\", 3, \"btnClick\"], [\"fontSize\", \"8pt\", \"color\", \"#666\", \"toggle\", \"\", \"toggleColor\", \"#333\", \"text\", \"Show DOM-Connections\", 1, \"headerOption\", 3, \"btnClick\"], [\"fontSize\", \"8pt\", \"color\", \"#666\", \"toggle\", \"\", \"toggleColor\", \"#333\", \"text\", \"Show Labels\", 1, \"headerOption\", 3, \"btnClick\"], [\"fontSize\", \"8pt\", \"color\", \"#666\", \"toggle\", \"\", \"toggleColor\", \"#333\", \"text\", \"Show All Connections\", 1, \"headerOption\", 3, \"btnClick\"], [1, \"graph\"], [\"echarts\", \"\", 1, \"demo-chart\", 3, \"options\", \"chartMouseOver\", \"chartClick\"], [1, \"crawling-list\"], [\"for\", \"WebsiteNameForCrawler\"], [\"type\", \"text\", \"name\", \"websiteNameForCrawler\", 3, \"ngModel\", \"ngModelChange\"], [\"color\", \"#800080\", \"text\", \"Add Website\", 3, \"click\"], [4, \"ngFor\", \"ngForOf\"], [\"color\", \"#800080\", \"text\", \"Crawl my Websites\", 3, \"click\"]],\n  template: function SimplegraphComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelementStart(1, \"div\", 1);\n      i0.ɵɵelementStart(2, \"label\", 2);\n      i0.ɵɵtext(3, \"Create the Graph for one of your crawled Websites:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"input\", 3);\n      i0.ɵɵlistener(\"ngModelChange\", function SimplegraphComponent_Template_input_ngModelChange_4_listener($event) {\n        return ctx.websiteNameForGraph = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"div\", 1);\n      i0.ɵɵelementStart(6, \"app-button\", 4);\n      i0.ɵɵlistener(\"click\", function SimplegraphComponent_Template_app_button_click_6_listener() {\n        return ctx.getWebsiteGraph();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"div\", 5);\n      i0.ɵɵelementStart(8, \"div\", 0);\n      i0.ɵɵelementStart(9, \"div\", 6);\n      i0.ɵɵelementStart(10, \"app-button\", 7);\n      i0.ɵɵlistener(\"btnClick\", function SimplegraphComponent_Template_app_button_btnClick_10_listener() {\n        return ctx.deselectAll();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"app-button\", 8);\n      i0.ɵɵlistener(\"btnClick\", function SimplegraphComponent_Template_app_button_btnClick_11_listener() {\n        return ctx.showConnections();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"app-button\", 9);\n      i0.ɵɵlistener(\"btnClick\", function SimplegraphComponent_Template_app_button_btnClick_12_listener() {\n        return ctx.showLabels();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"app-button\", 10);\n      i0.ɵɵlistener(\"btnClick\", function SimplegraphComponent_Template_app_button_btnClick_13_listener() {\n        return ctx.showAllConnections();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"div\", 11);\n      i0.ɵɵelementStart(15, \"div\", 12);\n      i0.ɵɵlistener(\"chartMouseOver\", function SimplegraphComponent_Template_div_chartMouseOver_15_listener($event) {\n        return ctx.onChartMouseOver($event);\n      })(\"chartClick\", function SimplegraphComponent_Template_div_chartClick_15_listener($event) {\n        return ctx.onChartClick($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(16, \"div\", 13);\n      i0.ɵɵelementStart(17, \"div\", 1);\n      i0.ɵɵelementStart(18, \"label\", 14);\n      i0.ɵɵtext(19, \"Add new Website to your Crawling-List:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(20, \"input\", 15);\n      i0.ɵɵlistener(\"ngModelChange\", function SimplegraphComponent_Template_input_ngModelChange_20_listener($event) {\n        return ctx.websiteNameForCrawler = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(21, \"div\", 1);\n      i0.ɵɵelementStart(22, \"app-button\", 16);\n      i0.ɵɵlistener(\"click\", function SimplegraphComponent_Template_app_button_click_22_listener() {\n        return ctx.addWebsiteToCrawler();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(23, SimplegraphComponent_li_23_Template, 2, 1, \"li\", 17);\n      i0.ɵɵelementStart(24, \"div\", 1);\n      i0.ɵɵelementStart(25, \"app-button\", 18);\n      i0.ɵɵlistener(\"click\", function SimplegraphComponent_Template_app_button_click_25_listener() {\n        return ctx.crawlNewWebsites();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(26, \"div\", 0);\n      i0.ɵɵelementStart(27, \"div\");\n      i0.ɵɵelement(28, \"app-node-info\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.websiteNameForGraph);\n      i0.ɵɵadvance(11);\n      i0.ɵɵproperty(\"options\", ctx.options);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngModel\", ctx.websiteNameForCrawler);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngForOf\", ctx.crawledWebsites);\n    }\n  },\n  directives: [i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgModel, i3.ButtonComponent, i4.NgxEchartsDirective, i5.NgForOf, i6.NodeInfoComponent],\n  styles: [\".outer[_ngcontent-%COMP%]\\r\\n{\\r\\n  margin: 10px;\\r\\n}\\r\\n\\r\\n.demo-chart[_ngcontent-%COMP%] \\r\\n{\\r\\n    max-width: 1000px;\\r\\n    min-height: 600px;\\r\\n    margin: 10px auto;\\r\\n    overflow: auto;\\r\\n    border: 1px solid steelblue;\\r\\n    background-color: rgb(245, 245, 245);\\r\\n    padding: 10px;\\r\\n    \\r\\n}\\r\\n\\r\\n.graph[_ngcontent-%COMP%]\\r\\n{\\r\\n  clear: both;\\r\\n  width:70%;\\r\\n  margin-right:2%;\\r\\n  float: left;\\r\\n}\\r\\n\\r\\n.header[_ngcontent-%COMP%]\\r\\n{\\r\\n  border: solid, black;\\r\\n  background-color:aqua;\\r\\n}\\r\\n\\r\\n.headerOption[_ngcontent-%COMP%]\\r\\n{\\r\\n  float: left;\\r\\n  margin: 2px;\\r\\n}\\r\\n\\r\\n.crawling-list[_ngcontent-%COMP%] { width:27%;\\r\\n  float: left;}\\r\\n\\r\\n.btn[_ngcontent-%COMP%] {  background-color: purple;\\r\\n    color: purple;\\r\\n    max-height: 100px;\\r\\n    max-width: 300px;\\r\\n    display: flex;\\r\\n}\\r\\n\\r\\n.second_div[_ngcontent-%COMP%] {\\r\\n  width:50px; \\r\\n  height:50px; \\r\\n  background-color:green;\\r\\n  float: left;\\r\\n}\\r\\n\\r\\n.third_div[_ngcontent-%COMP%] {\\r\\n  width:50px; \\r\\n  height:50px; \\r\\n  background-color:blue;\\r\\n  float: left;\\r\\n}\\r\\n\\r\\n.clearfix[_ngcontent-%COMP%]:after {\\r\\n  visibility: hidden;\\r\\n  display: block;\\r\\n  font-size: 0;\\r\\n  content: \\\" \\\";\\r\\n  clear: both;\\r\\n  height: 0;\\r\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNpbXBsZWdyYXBoLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0VBRUUsWUFBWTtBQUNkOztBQUVBOztJQUVJLGlCQUFpQjtJQUNqQixpQkFBaUI7SUFDakIsaUJBQWlCO0lBQ2pCLGNBQWM7SUFDZCwyQkFBMkI7SUFDM0Isb0NBQW9DO0lBQ3BDLGFBQWE7SUFDYixzQkFBc0I7QUFDMUI7O0FBRUE7O0VBRUUsV0FBVztFQUNYLFNBQVM7RUFDVCxlQUFlO0VBQ2YsV0FBVztBQUNiOztBQUVBOztFQUVFLG9CQUFvQjtFQUNwQixxQkFBcUI7QUFDdkI7O0FBRUE7O0VBRUUsV0FBVztFQUNYLFdBQVc7QUFDYjs7QUFFQSxpQkFBaUIsU0FBUztFQUN4QixXQUFXLENBQUM7O0FBRWQsUUFBUSx3QkFBd0I7SUFDNUIsYUFBYTtJQUNiLGlCQUFpQjtJQUNqQixnQkFBZ0I7SUFDaEIsYUFBYTtBQUNqQjs7QUFHQTtFQUNFLFVBQVU7RUFDVixXQUFXO0VBQ1gsc0JBQXNCO0VBQ3RCLFdBQVc7QUFDYjs7QUFDQTtFQUNFLFVBQVU7RUFDVixXQUFXO0VBQ1gscUJBQXFCO0VBQ3JCLFdBQVc7QUFDYjs7QUFDQTtFQUNFLGtCQUFrQjtFQUNsQixjQUFjO0VBQ2QsWUFBWTtFQUNaLFlBQVk7RUFDWixXQUFXO0VBQ1gsU0FBUztBQUNYIiwiZmlsZSI6InNpbXBsZWdyYXBoLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIub3V0ZXJcclxue1xyXG4gIG1hcmdpbjogMTBweDtcclxufVxyXG5cclxuLmRlbW8tY2hhcnQgXHJcbntcclxuICAgIG1heC13aWR0aDogMTAwMHB4O1xyXG4gICAgbWluLWhlaWdodDogNjAwcHg7XHJcbiAgICBtYXJnaW46IDEwcHggYXV0bztcclxuICAgIG92ZXJmbG93OiBhdXRvO1xyXG4gICAgYm9yZGVyOiAxcHggc29saWQgc3RlZWxibHVlO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDI0NSwgMjQ1LCAyNDUpO1xyXG4gICAgcGFkZGluZzogMTBweDtcclxuICAgIC8qYm9yZGVyLXJhZGl1czogNXB4OyovXHJcbn1cclxuXHJcbi5ncmFwaFxyXG57XHJcbiAgY2xlYXI6IGJvdGg7XHJcbiAgd2lkdGg6NzAlO1xyXG4gIG1hcmdpbi1yaWdodDoyJTtcclxuICBmbG9hdDogbGVmdDtcclxufVxyXG5cclxuLmhlYWRlclxyXG57XHJcbiAgYm9yZGVyOiBzb2xpZCwgYmxhY2s7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjphcXVhO1xyXG59XHJcblxyXG4uaGVhZGVyT3B0aW9uXHJcbntcclxuICBmbG9hdDogbGVmdDtcclxuICBtYXJnaW46IDJweDtcclxufVxyXG5cclxuLmNyYXdsaW5nLWxpc3QgeyB3aWR0aDoyNyU7XHJcbiAgZmxvYXQ6IGxlZnQ7fVxyXG5cclxuLmJ0biB7ICBiYWNrZ3JvdW5kLWNvbG9yOiBwdXJwbGU7XHJcbiAgICBjb2xvcjogcHVycGxlO1xyXG4gICAgbWF4LWhlaWdodDogMTAwcHg7XHJcbiAgICBtYXgtd2lkdGg6IDMwMHB4O1xyXG4gICAgZGlzcGxheTogZmxleDtcclxufVxyXG5cclxuXHJcbi5zZWNvbmRfZGl2IHtcclxuICB3aWR0aDo1MHB4OyBcclxuICBoZWlnaHQ6NTBweDsgXHJcbiAgYmFja2dyb3VuZC1jb2xvcjpncmVlbjtcclxuICBmbG9hdDogbGVmdDtcclxufSBcclxuLnRoaXJkX2RpdiB7XHJcbiAgd2lkdGg6NTBweDsgXHJcbiAgaGVpZ2h0OjUwcHg7IFxyXG4gIGJhY2tncm91bmQtY29sb3I6Ymx1ZTtcclxuICBmbG9hdDogbGVmdDtcclxufVxyXG4uY2xlYXJmaXg6YWZ0ZXIge1xyXG4gIHZpc2liaWxpdHk6IGhpZGRlbjtcclxuICBkaXNwbGF5OiBibG9jaztcclxuICBmb250LXNpemU6IDA7XHJcbiAgY29udGVudDogXCIgXCI7XHJcbiAgY2xlYXI6IGJvdGg7XHJcbiAgaGVpZ2h0OiAwO1xyXG59Il19 */\"]\n});","map":{"version":3,"sources":["C:/Dev/Angular/netzkriecher-frontend/src/app/components/simplegraph/simplegraph.component.ts"],"names":["graphic","data","NodeInfoComponent","GraphData","V2","NodeFromJson","WebsiteMap","i0","i1","i2","i3","i4","i5","i6","SimplegraphComponent_li_23_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","website_r1","$implicit","ɵɵadvance","ɵɵtextInterpolate1","SimplegraphComponent","constructor","websiteService","totalWidth","halfWidth","totalHeight","halfHeight","nodeSizeFalloff","radiusPerIteration","websiteNameForGraph","websiteNameForCrawler","loading","crawledWebsiteID","selectedColorInner","nodeConnectionStyle","curveness","width","color","opacity","type","cap","join","dashOffset","miterLimit","domChildConnectionStyle","spacingThreshhold","selectedNodeName","domConnectionsActive","allConnectionsActive","labelsActive","remap","n","oldFrom","oldTo","newFrom","newTo","oldRange","proportion","newRange","calculatePosition","depth","index","total","rangeFrom","rangeTo","graphOffset","radians","Math","PI","radiansRemapped","x","cos","y","sin","pos","calculateOffset","getSymbolSize","currentDepth","radiansAvailable","frac","multiplier","size","getGraphData","website","root","map","get","rootName","linkData","rPos","nodePositionalInformation","rootNodeOptions","name","url","position","category","symbol","symbolSize","push","visited","queue","length","currentNode","shift","domChilds","intLinks","i","undefined","label","distance","graphEdgeOption","lineStyle","source","target","value","posInfo","arrowSize","includes","nodeItemOptions","draggable","symbolOffset","symbolRotate","itemStyle","emphasis","node","doubleSided","forEach","element","graphData","calculatePositions","rootPosition","rootSize","radiansPerChild","currentRadians","nodePosition","onChartMouseOver","ec","onChartClick","showGraph","nodeInfoComponent","initializeTable","showAllConnections","showConnections","showLabels","deselectAll","prepareWebsite","dictElements","JSON","parse","stringify","nodeMap","Map","mediaIntGlobal","parentDocId","docId","extMedia","intMedia","extLinks","getDepth","getDOMParent","set","key","domParent","parent","console","log","initRealData","addWebsiteToCrawler","crawlWebsite","subscribe","next","postId","id","alert","body","toString","error","errorMessage","crawlNewWebsites","startNewCrawlers","getCrawledWebsites","response","crawledWebsites","ngOnInit","prepareGraph","getWebsiteGraph","getWebsiteNodes","img","document","getElementById","setAttribute","text","Text","style","graphSeriesOptions","cursor","colorBy","hoverLayerThreshold","selectedMode","legendHoverLink","layout","nodes","nodeData","edges","roam","nodeScaleRatio","fontStyle","show","overflow","tag","r","colorStops","offset","global","scale","rotate","valueAnimation","fontWeight","backgroundColor","height","select","options","title","tooltip","animationDurationUpdate","animationEasingUpdate","series","selectedMap","getGraphSeriesOptions","g1","g2","animation","ngAfterViewInit","ɵfac","SimplegraphComponent_Factory","t","ɵɵdirectiveInject","WebsiteService","ɵcmp","ɵɵdefineComponent","selectors","viewQuery","SimplegraphComponent_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","decls","vars","consts","template","SimplegraphComponent_Template","ɵɵlistener","SimplegraphComponent_Template_input_ngModelChange_4_listener","$event","SimplegraphComponent_Template_app_button_click_6_listener","SimplegraphComponent_Template_app_button_btnClick_10_listener","SimplegraphComponent_Template_app_button_btnClick_11_listener","SimplegraphComponent_Template_app_button_btnClick_12_listener","SimplegraphComponent_Template_app_button_btnClick_13_listener","SimplegraphComponent_Template_div_chartMouseOver_15_listener","SimplegraphComponent_Template_div_chartClick_15_listener","SimplegraphComponent_Template_input_ngModelChange_20_listener","SimplegraphComponent_Template_app_button_click_22_listener","ɵɵtemplate","SimplegraphComponent_Template_app_button_click_25_listener","ɵɵelement","ɵɵproperty","directives","DefaultValueAccessor","NgControlStatus","NgModel","ButtonComponent","NgxEchartsDirective","NgForOf","styles"],"mappings":"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","sourcesContent":["import { graphic } from 'echarts';\r\nimport * as data from '../../../assets/tagesschauNew.json';\r\nimport { NodeInfoComponent } from 'src/app/node-info/node-info.component';\r\nimport { GraphData, V2, NodeFromJson, WebsiteMap } from 'src/app/graphData';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"src/app/website.service\";\r\nimport * as i2 from \"@angular/forms\";\r\nimport * as i3 from \"../button/button.component\";\r\nimport * as i4 from \"ngx-echarts\";\r\nimport * as i5 from \"@angular/common\";\r\nimport * as i6 from \"../../node-info/node-info.component\";\r\nfunction SimplegraphComponent_li_23_Template(rf, ctx) { if (rf & 1) {\r\n    i0.ɵɵelementStart(0, \"li\");\r\n    i0.ɵɵtext(1);\r\n    i0.ɵɵelementEnd();\r\n} if (rf & 2) {\r\n    const website_r1 = ctx.$implicit;\r\n    i0.ɵɵadvance(1);\r\n    i0.ɵɵtextInterpolate1(\" \", website_r1, \" \");\r\n} }\r\n/*\r\nconsiderations for node placement:\r\n- for first layer: for all childs of root, sum up all their children. Then try to find a configuration,\r\nwhere the 'center of mass' is at the root node. (adding up vectors * weight should equal 0 at the end)\r\n- might not work, because a valid strategy for that would also be to just dump all of the nodes at opposite ends\r\n\r\n- after finishing a whole depth layer, there might be a lot of space left unoccupied in that layer\r\n- the childnoderanges for the layer before could be accordingly ajusted to use up the whole 360°\r\n- (or atleast space them out more)\r\n\r\n*/\r\nexport class SimplegraphComponent {\r\n    constructor(websiteService) {\r\n        this.websiteService = websiteService;\r\n        this.totalWidth = 1000;\r\n        this.halfWidth = 500;\r\n        this.totalHeight = 1000;\r\n        this.halfHeight = 500;\r\n        this.nodeSizeFalloff = 200;\r\n        this.radiusPerIteration = 100;\r\n        this.websiteNameForGraph = \"\";\r\n        this.websiteNameForCrawler = \"\";\r\n        this.loading = false;\r\n        this.crawledWebsiteID = 2;\r\n        this.selectedColorInner = '#333';\r\n        this.nodeConnectionStyle = {\r\n            curveness: 0,\r\n            width: 1,\r\n            color: 'grey',\r\n            opacity: 0.8,\r\n            type: 'dashed',\r\n            cap: 'square',\r\n            join: 'bevel',\r\n            dashOffset: 10,\r\n            miterLimit: 10,\r\n        };\r\n        this.domChildConnectionStyle = {\r\n            curveness: 0,\r\n            width: 2,\r\n            color: 'blue',\r\n            opacity: 0.8,\r\n            type: 'solid',\r\n            cap: 'square',\r\n            join: 'bevel',\r\n            dashOffset: 10,\r\n            miterLimit: 10,\r\n        };\r\n        this.spacingThreshhold = 0.007;\r\n        this.selectedNodeName = \"\";\r\n        //initTestData() : Map<string, NodeFromJson>\r\n        this.domConnectionsActive = true;\r\n        this.allConnectionsActive = false;\r\n        this.labelsActive = false;\r\n    }\r\n    /*\r\n    ngOnInit(): void\r\n    {\r\n      this.prepareGraph();\r\n      this.showGraph();\r\n    }*/\r\n    remap(n, oldFrom, oldTo, newFrom, newTo) {\r\n        let oldRange = oldTo - oldFrom;\r\n        let proportion = (n - oldFrom) / oldRange;\r\n        let newRange = newTo - newFrom;\r\n        return newFrom + newRange * proportion;\r\n    }\r\n    calculatePosition(depth, index, total, rangeFrom, rangeTo, graphOffset) {\r\n        let radians = (total == 1) ? 0.5 * 2 * Math.PI : (index / total) * 2 * Math.PI;\r\n        let radiansRemapped = this.remap(radians, 0, Math.PI * 2, rangeFrom, rangeTo);\r\n        let x = Math.cos(radiansRemapped) * depth * this.radiusPerIteration + graphOffset.x;\r\n        let y = Math.sin(radiansRemapped) * depth * this.radiusPerIteration + graphOffset.y;\r\n        let pos = new V2(x, y);\r\n        return this.calculateOffset(pos);\r\n    }\r\n    calculateOffset(pos) {\r\n        return new V2(pos.x + this.halfWidth, pos.y + this.halfHeight);\r\n    }\r\n    getSymbolSize(currentDepth, radiansAvailable) {\r\n        let frac = radiansAvailable / (Math.PI * 2);\r\n        let multiplier = 1;\r\n        if (frac < this.spacingThreshhold) {\r\n            multiplier = frac / this.spacingThreshhold;\r\n        }\r\n        let size = 20 * (1 / (currentDepth + 1)) * multiplier;\r\n        return size;\r\n    }\r\n    //nodePositions : Map<string, NodePositionalInformation> = new Map<string,NodePositionalInformation>(); \r\n    getGraphData(website) {\r\n        let root = website.map.get(website.rootName);\r\n        let data = [];\r\n        let linkData = [];\r\n        let rPos = root.nodePositionalInformation;\r\n        let rootNodeOptions = {\r\n            name: root.url,\r\n            x: rPos.position.x,\r\n            y: rPos.position.y,\r\n            category: 'root',\r\n            symbol: 'circle',\r\n            symbolSize: rPos.symbolSize\r\n        };\r\n        data.push(rootNodeOptions);\r\n        let visited = [];\r\n        let queue = [];\r\n        queue.push(root);\r\n        while (queue.length > 0) {\r\n            let currentNode = queue.shift();\r\n            visited.push(currentNode);\r\n            let domChilds = currentNode.domChilds;\r\n            if (this.allConnectionsActive) {\r\n                let intLinks = currentNode.intLinks;\r\n                for (let i = 0; i < intLinks.length; i++) {\r\n                    let n = website.map.get(intLinks[i]);\r\n                    if (n == undefined)\r\n                        continue;\r\n                    let label = {\r\n                        position: 'start',\r\n                        distance: 10\r\n                    };\r\n                    let graphEdgeOption = {\r\n                        lineStyle: this.nodeConnectionStyle,\r\n                        label: label,\r\n                        source: currentNode.url,\r\n                        target: n.url,\r\n                        symbol: ['none', 'arrow'],\r\n                        symbolSize: [0, 5],\r\n                        value: 3\r\n                    };\r\n                    linkData.push(graphEdgeOption);\r\n                }\r\n            }\r\n            for (let i = 0; i < domChilds.length; i++) {\r\n                let n = website.map.get(domChilds[i]);\r\n                let posInfo = n.nodePositionalInformation;\r\n                let arrowSize = n.nodePositionalInformation.symbolSize * 0.7;\r\n                //show links to domChilds\r\n                if (this.domConnectionsActive) {\r\n                    let label = {\r\n                        position: 'start',\r\n                        distance: 10\r\n                    };\r\n                    let graphEdgeOption = {\r\n                        lineStyle: this.domChildConnectionStyle,\r\n                        label: label,\r\n                        source: currentNode.url,\r\n                        target: n.url,\r\n                        symbol: ['none', 'arrow'],\r\n                        symbolSize: [0, arrowSize],\r\n                        value: 3\r\n                    };\r\n                    linkData.push(graphEdgeOption);\r\n                }\r\n                //add node if it doesnt already exist\r\n                if (!visited.includes(n)) {\r\n                    let color = 'green';\r\n                    if (this.selectedNodeName == n.url) {\r\n                        color = this.selectedColorInner;\r\n                    }\r\n                    //let domName = n.getDOMStripedName();\r\n                    let nodeItemOptions = {\r\n                        name: n.url,\r\n                        x: posInfo.position.x,\r\n                        y: posInfo.position.y,\r\n                        category: 'not root',\r\n                        draggable: false,\r\n                        symbol: 'circle',\r\n                        symbolSize: posInfo.symbolSize,\r\n                        symbolOffset: 0,\r\n                        symbolRotate: 0,\r\n                        itemStyle: {\r\n                            color: color\r\n                        },\r\n                        emphasis: {\r\n                            itemStyle: {\r\n                                color: 'red',\r\n                                opacity: 1,\r\n                            },\r\n                        },\r\n                    };\r\n                    data.push(nodeItemOptions);\r\n                    queue.push(n);\r\n                }\r\n            }\r\n        }\r\n        if (this.selectedNodeName != \"\" && !this.allConnectionsActive) {\r\n            let node = website.map.get(this.selectedNodeName);\r\n            for (let i = 0; i < node.intLinks.length; i++) {\r\n                let n = website.map.get(node.intLinks[i]);\r\n                let label = {\r\n                    position: 'start',\r\n                    distance: 10\r\n                };\r\n                let doubleSided = false;\r\n                if (n != undefined) {\r\n                    n.intLinks.forEach(element => {\r\n                        if (element == node.url) {\r\n                            doubleSided = true;\r\n                        }\r\n                    });\r\n                }\r\n                let symbol = [];\r\n                let symbolSize = [];\r\n                if (doubleSided) {\r\n                    symbol = ['arrow', 'arrow'];\r\n                    symbolSize = [5, 5];\r\n                }\r\n                else {\r\n                    symbol = ['none', 'arrow'];\r\n                    symbolSize = [0, 5];\r\n                }\r\n                let graphEdgeOption = {\r\n                    lineStyle: this.nodeConnectionStyle,\r\n                    label: label,\r\n                    source: node.url,\r\n                    target: node.intLinks[i],\r\n                    symbol: symbol,\r\n                    symbolSize: symbolSize,\r\n                    value: 3\r\n                };\r\n                linkData.push(graphEdgeOption);\r\n            }\r\n        }\r\n        let graphData = new GraphData(data, linkData);\r\n        return graphData;\r\n    }\r\n    calculatePositions(website) {\r\n        let root = website.map.get(website.rootName);\r\n        let rootPosition = this.calculatePosition(0, 1, 1, 0, Math.PI * 2, new V2(0, 0));\r\n        let rootSize = this.getSymbolSize(root.depth, Math.PI * 2);\r\n        root.nodePositionalInformation = { position: rootPosition, symbolSize: rootSize, rangeFrom: 0, rangeTo: Math.PI * 2 };\r\n        let visited = [];\r\n        let queue = [];\r\n        queue.push(root);\r\n        while (queue.length > 0) {\r\n            let currentNode = queue.shift();\r\n            visited.push(currentNode);\r\n            let domChilds = currentNode.domChilds;\r\n            let radiansPerChild = (currentNode.nodePositionalInformation.rangeTo - currentNode.nodePositionalInformation.rangeFrom) / domChilds.length;\r\n            let currentRadians = 0;\r\n            for (let i = 0; i < domChilds.length; i++) {\r\n                let n = website.map.get(domChilds[i]);\r\n                if (!visited.includes(n)) {\r\n                    let symbolSize = this.getSymbolSize(n.depth, radiansPerChild);\r\n                    let nodePosition = this.calculatePosition(n.depth, i, domChilds.length, currentNode.nodePositionalInformation.rangeFrom, currentNode.nodePositionalInformation.rangeTo, new V2(0, 0));\r\n                    let rangeFrom = currentNode.nodePositionalInformation.rangeFrom + currentRadians - (radiansPerChild * 0.5);\r\n                    currentRadians += radiansPerChild;\r\n                    let rangeTo = currentNode.nodePositionalInformation.rangeFrom + currentRadians - (radiansPerChild * 0.5);\r\n                    n.nodePositionalInformation =\r\n                        {\r\n                            position: nodePosition,\r\n                            symbolSize: symbolSize,\r\n                            rangeFrom: rangeFrom,\r\n                            rangeTo: rangeTo\r\n                        };\r\n                    queue.push(n);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    onChartMouseOver(ec) {\r\n        //console.log(\"hover on \" + ec.name);\r\n    }\r\n    onChartClick(ec) {\r\n        let n = this.website.map.get(ec.name);\r\n        if (n != undefined) {\r\n            this.selectedNodeName = n.url;\r\n            //this.prepareGraph();\r\n            this.showGraph();\r\n            this.nodeInfoComponent.node = n;\r\n            this.nodeInfoComponent.initializeTable();\r\n            //let transformed = this.listToTable(media);\r\n            //this.nodeInfoComponent.images = transformed;\r\n            //this.showIntMedia(n.intMedia);\r\n            return;\r\n        }\r\n    }\r\n    showAllConnections() {\r\n        this.allConnectionsActive = !this.allConnectionsActive;\r\n        //this.prepareGraph();\r\n        this.showGraph();\r\n    }\r\n    showConnections() {\r\n        this.domConnectionsActive = !this.domConnectionsActive;\r\n        this.showGraph();\r\n    }\r\n    showLabels() {\r\n        this.labelsActive = !this.labelsActive;\r\n        this.showGraph();\r\n    }\r\n    deselectAll() {\r\n        //this.showIntMedia(this.website.internalMedia);\r\n    }\r\n    prepareWebsite(name) {\r\n        let dictElements = JSON.parse(JSON.stringify(data));\r\n        let nodeMap = new Map();\r\n        let mediaIntGlobal = [];\r\n        for (let index = 0; index < dictElements.length; index++) {\r\n            const element = dictElements[index];\r\n            let n = new NodeFromJson();\r\n            if (element.url == undefined) {\r\n                continue;\r\n            }\r\n            n.url = element.url;\r\n            n.parentDocId = element.parentDocId;\r\n            n.docId = element.docId;\r\n            n.extMedia = element['link:ext:media'];\r\n            n.intMedia = element['link:int:media'];\r\n            n.extLinks = element['link:ext'];\r\n            n.intLinks = element['link:int'];\r\n            n.getDepth();\r\n            n.getDOMParent();\r\n            if (n.depth >= 0) {\r\n                nodeMap.set(n.url, n);\r\n            }\r\n        }\r\n        nodeMap.forEach((node, key) => {\r\n            if (node.domParent != \"\") {\r\n                let parent = nodeMap.get(node.domParent);\r\n                if (parent != undefined) {\r\n                    parent.domChilds.push(key);\r\n                }\r\n            }\r\n        });\r\n        let website = new WebsiteMap(name, nodeMap, mediaIntGlobal);\r\n        console.log(\"Website Node nach dem Init View:\", website);\r\n        return website;\r\n    }\r\n    /**\r\n     * The method fetches, saves and prepares the data for the Creation of the Website Graph. Approximately 200 Nodes,\r\n     * that were crawled by the Worker and saved into Redis, get fetched. The data is saved into dictionaries, adapting to\r\n     * the Data structure that was created in the Backend. Finally, the Nodes for the Graph are created.\r\n     */\r\n    async initRealData() {\r\n        /*\r\n        let nodeMap : Map<string, NodeFromJson> = new Map<string, NodeFromJson>();\r\n        this.loading = true;\r\n        this.errorMessage = \"\";\r\n        this.websiteService.getWebsiteNodes(this.websiteNameForGraph)\r\n          .subscribe(\r\n            response => {                           //next() callback\r\n              console.log('response received')\r\n              //this.websites = response;\r\n              let dictElements : {[index:string] : string}[] = JSON.parse(JSON.stringify(response))\r\n         \r\n              for (let index = 0; index < dictElements.length; index++) {\r\n                const element  : {[index:string] : string} = dictElements[index];\r\n          \r\n                let pdi : string = \"\";\r\n                let di : string = \"\";\r\n                let url : string = \"\";\r\n                let linksInt : string[] = [];\r\n                let mediaInt : string[] = [];\r\n                let linksExt : string[] = [];\r\n                let mediaExt : string[] = [];\r\n          \r\n                Object.entries(element).forEach(\r\n                  ([key, value]) =>\r\n                  {\r\n                    if(key.includes('parentDocId'))\r\n                    {\r\n                      pdi = value;\r\n                    }\r\n                    else if(key.includes('docId'))\r\n                    {\r\n                      di = value;\r\n                    }\r\n                    else if(key.includes(':int:media:'))\r\n                    {\r\n                      mediaInt.push(value);\r\n                    }\r\n                    else if(key.includes(':int:'))\r\n                    {\r\n                      linksInt.push(value);\r\n                    }\r\n                    else if(key.includes(':ext:media:'))\r\n                    {\r\n                      mediaExt.push(value);\r\n                    }\r\n                    else if(key.includes(':ext:'))\r\n                    {\r\n                      linksExt.push(value);\r\n                    }\r\n                    else if(key.includes('url'))\r\n                    {\r\n                      url = value;\r\n                    }\r\n                    \r\n                  }\r\n                );\r\n                \r\n                let n : NodeFromJson = new NodeFromJson();\r\n                n.url = url;\r\n                n.parentDocId = pdi;\r\n                n.docId = di;\r\n                n.extMedia = mediaExt;\r\n                n.intMedia = mediaInt;\r\n                n.extLinks = linksExt;\r\n                n.intLinks = linksInt;\r\n          \r\n                n.getDepth();\r\n                n.getDOMParent();\r\n                if(n.depth >= 0)\r\n                {\r\n                  nodeMap.set(n.url, n);\r\n                }\r\n              }\r\n          \r\n              nodeMap.forEach((node: NodeFromJson, key: string) =>\r\n              {\r\n                if(node.domParent != \"\")\r\n                {\r\n                  let parent = nodeMap.get(node.domParent);\r\n                  if(parent != undefined)\r\n                  {\r\n                    parent.domChilds.push(key);\r\n                  }\r\n                }\r\n              });\r\n            console.log(\"NodeMap: \")\r\n            console.log(nodeMap)\r\n            console.log(\"End reached\")\r\n            this.nodeMap = nodeMap;\r\n          \r\n            },\r\n            (error) => {                              //error() callback\r\n              console.error('Request failed with error')\r\n              this.errorMessage = error;\r\n              this.loading = false;\r\n            },\r\n            () => {                                   //complete() callback\r\n              console.error('Request completed')      //This is actually not needed\r\n              this.loading = false;\r\n            })\r\n            */\r\n    }\r\n    /**\r\n     * The User tells the Server which Website it should crawl next, so a Graph can be vusialized later on for\r\n     * this Website. The POST-Request to the Server is initialized and the Answer of the Server is read and told\r\n     * to the User. For that purpose, the crawlWebsite-Method returns an Observable which is subscribed upon.\r\n     */\r\n    addWebsiteToCrawler() {\r\n        this.crawledWebsiteID++;\r\n        this.websiteService.crawlWebsite(this.websiteNameForCrawler, this.crawledWebsiteID).subscribe({\r\n            next: data => {\r\n                this.postId = data.id;\r\n                console.log(data);\r\n                alert(data.body[0].toString() + \" is now starting to get crawled!\");\r\n            },\r\n            error: error => {\r\n                this.errorMessage = error.error;\r\n                console.error('There was an error!', error);\r\n                alert(this.errorMessage);\r\n            }\r\n        });\r\n    }\r\n    /**Restart Crawler in the Worker */\r\n    crawlNewWebsites() {\r\n        this.websiteService.startNewCrawlers().subscribe({\r\n            next: data => {\r\n                this.postId = data.id;\r\n                console.log(data);\r\n            },\r\n            error: error => {\r\n                this.errorMessage = error.error;\r\n                console.error('There was an error!', error);\r\n                alert(this.errorMessage);\r\n            }\r\n        });\r\n    }\r\n    getCrawledWebsites() {\r\n        this.loading = true;\r\n        this.errorMessage = \"\";\r\n        this.websiteService.getCrawledWebsites()\r\n            .subscribe((response) => {\r\n            console.log('response received');\r\n            this.crawledWebsites = response;\r\n        }, (error) => {\r\n            console.error('Request failed with error');\r\n            this.errorMessage = error;\r\n            this.loading = false;\r\n        }, () => {\r\n            console.error('Request completed'); //This is actually not needed \r\n            this.loading = false;\r\n        });\r\n    }\r\n    ngOnInit() {\r\n        this.getCrawledWebsites();\r\n        this.prepareGraph();\r\n        this.showGraph();\r\n    }\r\n    getWebsiteGraph() {\r\n        //prepare Website-Method with Rest Call ->\r\n        let nodeMap = new Map();\r\n        this.loading = true;\r\n        this.errorMessage = \"\";\r\n        this.websiteService.getWebsiteNodes(this.websiteNameForGraph)\r\n            .subscribe(data => {\r\n            console.log('response received');\r\n            let dictElements = JSON.parse(JSON.stringify(data));\r\n            let mediaIntGlobal = [];\r\n            for (let index = 0; index < dictElements.length; index++) {\r\n                const element = dictElements[index];\r\n                let n = new NodeFromJson();\r\n                if (element.url == undefined) {\r\n                    continue;\r\n                }\r\n                n.url = element.url;\r\n                n.parentDocId = element.parentDocId;\r\n                n.docId = element.docId;\r\n                n.extMedia = element['link:ext:media'];\r\n                n.intMedia = element['link:int:media'];\r\n                n.extLinks = element['link:ext'];\r\n                n.intLinks = element['link:int'];\r\n                n.getDepth();\r\n                n.getDOMParent();\r\n                if (n.depth >= 0) {\r\n                    nodeMap.set(n.url, n);\r\n                }\r\n            }\r\n            nodeMap.forEach((node, key) => {\r\n                if (node.domParent != \"\") {\r\n                    let parent = nodeMap.get(node.domParent);\r\n                    if (parent != undefined) {\r\n                        parent.domChilds.push(key);\r\n                    }\r\n                }\r\n            });\r\n            this.website = new WebsiteMap(this.websiteNameForGraph, nodeMap, mediaIntGlobal);\r\n            console.log(\"Website Node nach dem Click:\", this.website);\r\n            //prepareWebsite-Method ->\r\n            let img = document.getElementById(\"img\");\r\n            img === null || img === void 0 ? void 0 : img.setAttribute(\"src\", '../../assets/Images/NodeTest.png');\r\n            this.calculatePositions(this.website);\r\n            this.graphData = this.getGraphData(this.website);\r\n            let text = new graphic.Text();\r\n            text.style.text = \"Hello\";\r\n            //ShowGraph-Method ->\r\n            let graphSeriesOptions = {\r\n                cursor: 'hand',\r\n                colorBy: 'data',\r\n                hoverLayerThreshold: 10,\r\n                selectedMode: 'multiple',\r\n                name: 'Sitemap',\r\n                type: 'graph',\r\n                //coordinateSystem: 'none',\r\n                legendHoverLink: false,\r\n                layout: 'none',\r\n                nodes: this.graphData.nodeData,\r\n                edges: this.graphData.linkData,\r\n                draggable: false,\r\n                roam: true,\r\n                color: '#DF4477',\r\n                nodeScaleRatio: 0.6,\r\n                label: {\r\n                    fontStyle: 'normal',\r\n                    show: this.labelsActive,\r\n                    color: 'black',\r\n                    overflow: 'truncate',\r\n                    tag: '!!!!!!'\r\n                },\r\n                itemStyle: {\r\n                    opacity: 1,\r\n                    //color :  'red'\r\n                    /*\r\n                    color :\r\n                    {\r\n                      svgElement : svgElement,\r\n                      svgWidth : 10,\r\n                      svgHeight : 10,\r\n                      type : 'pattern',\r\n                      x : 1,\r\n                      y : 1,\r\n                      rotation : 0,\r\n                      scaleX : 1,\r\n                      scaleY : 1\r\n                    }\r\n                    */\r\n                    //RADIAL GRADIENT\r\n                    color: {\r\n                        type: 'radial',\r\n                        x: 0.5,\r\n                        y: 0.5,\r\n                        r: 0.5,\r\n                        colorStops: [{\r\n                                offset: 0.0,\r\n                                color: 'red'\r\n                            },\r\n                            {\r\n                                offset: 1.0,\r\n                                color: 'purple'\r\n                            }\r\n                        ],\r\n                        global: false\r\n                    }\r\n                    /*\r\n                    //LINEAR GRADIENT\r\n                    color:\r\n                    {\r\n                      {\r\n                      type : 'linear',\r\n                      x : 0.1,\r\n                      y : 1,\r\n                      x2 : 0.3,\r\n                      y2 : 1,\r\n                      colorStops : [\r\n                        {\r\n                          offset : 0.3,\r\n                          color : 'red'\r\n                        },\r\n                        {\r\n                          offset : 0.7,\r\n                          color : 'blue'\r\n                        }]\r\n                      }\r\n                    }\r\n                    */\r\n                    /*\r\n                    color :\r\n                    {\r\n                      image : img,\r\n                      repeat : 'repeat'\r\n                    }\r\n                    */\r\n                },\r\n                lineStyle: {\r\n                    curveness: 1\r\n                },\r\n                emphasis: {\r\n                    scale: false,\r\n                    label: {\r\n                        show: false,\r\n                        rotate: 0,\r\n                        valueAnimation: true,\r\n                        color: 'red',\r\n                        fontStyle: 'normal',\r\n                        fontWeight: 'bolder',\r\n                        backgroundColor: 'blue',\r\n                        height: 20\r\n                    }\r\n                },\r\n                select: {\r\n                    label: {\r\n                        color: 'green'\r\n                    }\r\n                }\r\n            };\r\n            this.options =\r\n                {\r\n                    title: {\r\n                        text: this.website.name,\r\n                    },\r\n                    tooltip: {},\r\n                    animationDurationUpdate: 1500,\r\n                    animationEasingUpdate: 'quinticInOut',\r\n                    series: [graphSeriesOptions]\r\n                };\r\n            let map = graphSeriesOptions.selectedMap;\r\n        });\r\n    }\r\n    prepareGraph() {\r\n        this.website = this.prepareWebsite(\"Tagesschau.de\");\r\n        this.website.rootName = \"https://www.tagesschau.de/\";\r\n        let img = document.getElementById(\"img\");\r\n        img === null || img === void 0 ? void 0 : img.setAttribute(\"src\", '../../assets/Images/NodeTest.png');\r\n        this.calculatePositions(this.website);\r\n        console.log(this.website);\r\n        let text = new graphic.Text();\r\n        text.style.text = \"Hello\";\r\n    }\r\n    getGraphSeriesOptions() {\r\n        this.graphData = this.getGraphData(this.website);\r\n        let edges = this.domConnectionsActive ? this.graphData.linkData : undefined;\r\n        let graphSeriesOptions = {\r\n            cursor: 'hand',\r\n            colorBy: 'data',\r\n            hoverLayerThreshold: 1,\r\n            selectedMode: 'single',\r\n            name: 'Sitemap',\r\n            type: 'graph',\r\n            //coordinateSystem: 'none',\r\n            legendHoverLink: false,\r\n            layout: 'none',\r\n            nodes: this.graphData.nodeData,\r\n            edges: edges,\r\n            draggable: false,\r\n            roam: true,\r\n            color: '#DF4477',\r\n            nodeScaleRatio: 0.6,\r\n            label: {\r\n                fontStyle: 'normal',\r\n                show: this.labelsActive,\r\n                color: 'black',\r\n                overflow: 'truncate',\r\n                tag: '!!!!!!'\r\n            },\r\n            itemStyle: {\r\n                opacity: 1,\r\n                //color :  'red'\r\n                /*\r\n                color :\r\n                {\r\n                  svgElement : svgElement,\r\n                  svgWidth : 10,\r\n                  svgHeight : 10,\r\n                  type : 'pattern',\r\n                  x : 1,\r\n                  y : 1,\r\n                  rotation : 0,\r\n                  scaleX : 1,\r\n                  scaleY : 1\r\n                }\r\n                */\r\n                //RADIAL GRADIENT\r\n                color: {\r\n                    type: 'radial',\r\n                    x: 0.5,\r\n                    y: 0.5,\r\n                    r: 0.5,\r\n                    colorStops: [{\r\n                            offset: 0.0,\r\n                            color: 'red'\r\n                        },\r\n                        {\r\n                            offset: 1.0,\r\n                            color: 'purple'\r\n                        }\r\n                    ],\r\n                    global: false\r\n                }\r\n                /*\r\n                //LINEAR GRADIENT\r\n                color:\r\n                {\r\n                  {\r\n                  type : 'linear',\r\n                  x : 0.1,\r\n                  y : 1,\r\n                  x2 : 0.3,\r\n                  y2 : 1,\r\n                  colorStops : [\r\n                    {\r\n                      offset : 0.3,\r\n                      color : 'red'\r\n                    },\r\n                    {\r\n                      offset : 0.7,\r\n                      color : 'blue'\r\n                    }]\r\n                  }\r\n                }\r\n                */\r\n                /*\r\n                color :\r\n                {\r\n                  image : img,\r\n                  repeat : 'repeat'\r\n                }\r\n                */\r\n            },\r\n            lineStyle: {\r\n                curveness: 1\r\n            },\r\n            emphasis: {\r\n                scale: false,\r\n                itemStyle: {\r\n                    opacity: 1,\r\n                    color: {\r\n                        type: 'radial',\r\n                        x: 0.5,\r\n                        y: 0.5,\r\n                        r: 0.5,\r\n                        colorStops: [\r\n                            {\r\n                                offset: 0.0,\r\n                                color: 'orange'\r\n                            },\r\n                            {\r\n                                offset: 1.0,\r\n                                color: 'purple'\r\n                            }\r\n                        ],\r\n                        global: false\r\n                    }\r\n                },\r\n                label: {\r\n                    show: false,\r\n                    rotate: 0,\r\n                    valueAnimation: true,\r\n                    color: 'red',\r\n                    fontStyle: 'normal',\r\n                    fontWeight: 'bolder',\r\n                    backgroundColor: 'blue',\r\n                    height: 20\r\n                }\r\n            },\r\n            select: {\r\n                itemStyle: {\r\n                    opacity: 1,\r\n                    color: {\r\n                        type: 'radial',\r\n                        x: 0.5,\r\n                        y: 0.5,\r\n                        r: 0.5,\r\n                        colorStops: [\r\n                            {\r\n                                offset: 0.0,\r\n                                color: 'white'\r\n                            },\r\n                            {\r\n                                offset: 1.0,\r\n                                color: 'purple'\r\n                            }\r\n                        ],\r\n                        global: false\r\n                    }\r\n                },\r\n                label: {\r\n                    color: 'green'\r\n                }\r\n            }\r\n        };\r\n        return graphSeriesOptions;\r\n    }\r\n    showGraph() {\r\n        let g1 = this.getGraphSeriesOptions();\r\n        let g2 = this.getGraphSeriesOptions();\r\n        this.options =\r\n            {\r\n                title: {\r\n                    text: this.website.name,\r\n                },\r\n                tooltip: {},\r\n                animation: false,\r\n                animationDurationUpdate: 1000,\r\n                animationEasingUpdate: 'quinticInOut',\r\n                series: [g1, g2]\r\n            };\r\n        //let map = graphSeriesOptions.selectedMap;\r\n    }\r\n    /**\r\n     * The User tells the Server which Website it should crawl next, so a Graph can be vusialized later on for\r\n     * this Website. The POST-Request to the Server is initialized and the Answer of the Server is read and told\r\n     * to the User. For that purpose, the crawlWebsite-Method returns an Observable which is subscribed upon.\r\n     */\r\n    crawlWebsite() {\r\n        this.crawledWebsiteID++;\r\n        this.websiteService.crawlWebsite(this.websiteNameForCrawler, this.crawledWebsiteID).subscribe({\r\n            next: data => {\r\n                this.postId = data.id;\r\n                console.log(data);\r\n                alert(data.body[0].toString() + \" is now starting to get crawled!\");\r\n                this.getCrawledWebsites();\r\n            },\r\n            error: error => {\r\n                this.errorMessage = error.error;\r\n                console.error('There was an error!', error);\r\n                alert(this.errorMessage);\r\n            }\r\n        });\r\n    }\r\n    ngAfterViewInit() {\r\n        console.log(\"NODEINFO?\", this.nodeInfoComponent);\r\n    }\r\n}\r\nSimplegraphComponent.ɵfac = function SimplegraphComponent_Factory(t) { return new (t || SimplegraphComponent)(i0.ɵɵdirectiveInject(i1.WebsiteService)); };\r\nSimplegraphComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: SimplegraphComponent, selectors: [[\"app-simplegraph\"]], viewQuery: function SimplegraphComponent_Query(rf, ctx) { if (rf & 1) {\r\n        i0.ɵɵviewQuery(NodeInfoComponent, 5);\r\n    } if (rf & 2) {\r\n        let _t;\r\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.nodeInfoComponent = _t.first);\r\n    } }, decls: 29, vars: 4, consts: [[1, \"clearfix\"], [1, \"headerOption\"], [\"for\", \"websiteNameForGraph\"], [\"type\", \"text\", \"name\", \"websiteNameForGraph\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"color\", \"#800080\", \"text\", \"Create Website Graph\", 3, \"click\"], [1, \"outer\"], [1, \"header\"], [\"fontSize\", \"8pt\", \"color\", \"#666\", \"toggle\", \"\", \"toggleColor\", \"#333\", \"text\", \"Deselect All\", 1, \"headerOption\", 3, \"btnClick\"], [\"fontSize\", \"8pt\", \"color\", \"#666\", \"toggle\", \"\", \"toggleColor\", \"#333\", \"text\", \"Show DOM-Connections\", 1, \"headerOption\", 3, \"btnClick\"], [\"fontSize\", \"8pt\", \"color\", \"#666\", \"toggle\", \"\", \"toggleColor\", \"#333\", \"text\", \"Show Labels\", 1, \"headerOption\", 3, \"btnClick\"], [\"fontSize\", \"8pt\", \"color\", \"#666\", \"toggle\", \"\", \"toggleColor\", \"#333\", \"text\", \"Show All Connections\", 1, \"headerOption\", 3, \"btnClick\"], [1, \"graph\"], [\"echarts\", \"\", 1, \"demo-chart\", 3, \"options\", \"chartMouseOver\", \"chartClick\"], [1, \"crawling-list\"], [\"for\", \"WebsiteNameForCrawler\"], [\"type\", \"text\", \"name\", \"websiteNameForCrawler\", 3, \"ngModel\", \"ngModelChange\"], [\"color\", \"#800080\", \"text\", \"Add Website\", 3, \"click\"], [4, \"ngFor\", \"ngForOf\"], [\"color\", \"#800080\", \"text\", \"Crawl my Websites\", 3, \"click\"]], template: function SimplegraphComponent_Template(rf, ctx) { if (rf & 1) {\r\n        i0.ɵɵelementStart(0, \"div\", 0);\r\n        i0.ɵɵelementStart(1, \"div\", 1);\r\n        i0.ɵɵelementStart(2, \"label\", 2);\r\n        i0.ɵɵtext(3, \"Create the Graph for one of your crawled Websites:\");\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementStart(4, \"input\", 3);\r\n        i0.ɵɵlistener(\"ngModelChange\", function SimplegraphComponent_Template_input_ngModelChange_4_listener($event) { return ctx.websiteNameForGraph = $event; });\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementStart(5, \"div\", 1);\r\n        i0.ɵɵelementStart(6, \"app-button\", 4);\r\n        i0.ɵɵlistener(\"click\", function SimplegraphComponent_Template_app_button_click_6_listener() { return ctx.getWebsiteGraph(); });\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementStart(7, \"div\", 5);\r\n        i0.ɵɵelementStart(8, \"div\", 0);\r\n        i0.ɵɵelementStart(9, \"div\", 6);\r\n        i0.ɵɵelementStart(10, \"app-button\", 7);\r\n        i0.ɵɵlistener(\"btnClick\", function SimplegraphComponent_Template_app_button_btnClick_10_listener() { return ctx.deselectAll(); });\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementStart(11, \"app-button\", 8);\r\n        i0.ɵɵlistener(\"btnClick\", function SimplegraphComponent_Template_app_button_btnClick_11_listener() { return ctx.showConnections(); });\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementStart(12, \"app-button\", 9);\r\n        i0.ɵɵlistener(\"btnClick\", function SimplegraphComponent_Template_app_button_btnClick_12_listener() { return ctx.showLabels(); });\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementStart(13, \"app-button\", 10);\r\n        i0.ɵɵlistener(\"btnClick\", function SimplegraphComponent_Template_app_button_btnClick_13_listener() { return ctx.showAllConnections(); });\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementStart(14, \"div\", 11);\r\n        i0.ɵɵelementStart(15, \"div\", 12);\r\n        i0.ɵɵlistener(\"chartMouseOver\", function SimplegraphComponent_Template_div_chartMouseOver_15_listener($event) { return ctx.onChartMouseOver($event); })(\"chartClick\", function SimplegraphComponent_Template_div_chartClick_15_listener($event) { return ctx.onChartClick($event); });\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementStart(16, \"div\", 13);\r\n        i0.ɵɵelementStart(17, \"div\", 1);\r\n        i0.ɵɵelementStart(18, \"label\", 14);\r\n        i0.ɵɵtext(19, \"Add new Website to your Crawling-List:\");\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementStart(20, \"input\", 15);\r\n        i0.ɵɵlistener(\"ngModelChange\", function SimplegraphComponent_Template_input_ngModelChange_20_listener($event) { return ctx.websiteNameForCrawler = $event; });\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementStart(21, \"div\", 1);\r\n        i0.ɵɵelementStart(22, \"app-button\", 16);\r\n        i0.ɵɵlistener(\"click\", function SimplegraphComponent_Template_app_button_click_22_listener() { return ctx.addWebsiteToCrawler(); });\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵtemplate(23, SimplegraphComponent_li_23_Template, 2, 1, \"li\", 17);\r\n        i0.ɵɵelementStart(24, \"div\", 1);\r\n        i0.ɵɵelementStart(25, \"app-button\", 18);\r\n        i0.ɵɵlistener(\"click\", function SimplegraphComponent_Template_app_button_click_25_listener() { return ctx.crawlNewWebsites(); });\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelement(26, \"div\", 0);\r\n        i0.ɵɵelementStart(27, \"div\");\r\n        i0.ɵɵelement(28, \"app-node-info\");\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementEnd();\r\n    } if (rf & 2) {\r\n        i0.ɵɵadvance(4);\r\n        i0.ɵɵproperty(\"ngModel\", ctx.websiteNameForGraph);\r\n        i0.ɵɵadvance(11);\r\n        i0.ɵɵproperty(\"options\", ctx.options);\r\n        i0.ɵɵadvance(5);\r\n        i0.ɵɵproperty(\"ngModel\", ctx.websiteNameForCrawler);\r\n        i0.ɵɵadvance(3);\r\n        i0.ɵɵproperty(\"ngForOf\", ctx.crawledWebsites);\r\n    } }, directives: [i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgModel, i3.ButtonComponent, i4.NgxEchartsDirective, i5.NgForOf, i6.NodeInfoComponent], styles: [\".outer[_ngcontent-%COMP%]\\r\\n{\\r\\n  margin: 10px;\\r\\n}\\r\\n\\r\\n.demo-chart[_ngcontent-%COMP%] \\r\\n{\\r\\n    max-width: 1000px;\\r\\n    min-height: 600px;\\r\\n    margin: 10px auto;\\r\\n    overflow: auto;\\r\\n    border: 1px solid steelblue;\\r\\n    background-color: rgb(245, 245, 245);\\r\\n    padding: 10px;\\r\\n    \\r\\n}\\r\\n\\r\\n.graph[_ngcontent-%COMP%]\\r\\n{\\r\\n  clear: both;\\r\\n  width:70%;\\r\\n  margin-right:2%;\\r\\n  float: left;\\r\\n}\\r\\n\\r\\n.header[_ngcontent-%COMP%]\\r\\n{\\r\\n  border: solid, black;\\r\\n  background-color:aqua;\\r\\n}\\r\\n\\r\\n.headerOption[_ngcontent-%COMP%]\\r\\n{\\r\\n  float: left;\\r\\n  margin: 2px;\\r\\n}\\r\\n\\r\\n.crawling-list[_ngcontent-%COMP%] { width:27%;\\r\\n  float: left;}\\r\\n\\r\\n.btn[_ngcontent-%COMP%] {  background-color: purple;\\r\\n    color: purple;\\r\\n    max-height: 100px;\\r\\n    max-width: 300px;\\r\\n    display: flex;\\r\\n}\\r\\n\\r\\n.second_div[_ngcontent-%COMP%] {\\r\\n  width:50px; \\r\\n  height:50px; \\r\\n  background-color:green;\\r\\n  float: left;\\r\\n}\\r\\n\\r\\n.third_div[_ngcontent-%COMP%] {\\r\\n  width:50px; \\r\\n  height:50px; \\r\\n  background-color:blue;\\r\\n  float: left;\\r\\n}\\r\\n\\r\\n.clearfix[_ngcontent-%COMP%]:after {\\r\\n  visibility: hidden;\\r\\n  display: block;\\r\\n  font-size: 0;\\r\\n  content: \\\" \\\";\\r\\n  clear: both;\\r\\n  height: 0;\\r\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNpbXBsZWdyYXBoLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0VBRUUsWUFBWTtBQUNkOztBQUVBOztJQUVJLGlCQUFpQjtJQUNqQixpQkFBaUI7SUFDakIsaUJBQWlCO0lBQ2pCLGNBQWM7SUFDZCwyQkFBMkI7SUFDM0Isb0NBQW9DO0lBQ3BDLGFBQWE7SUFDYixzQkFBc0I7QUFDMUI7O0FBRUE7O0VBRUUsV0FBVztFQUNYLFNBQVM7RUFDVCxlQUFlO0VBQ2YsV0FBVztBQUNiOztBQUVBOztFQUVFLG9CQUFvQjtFQUNwQixxQkFBcUI7QUFDdkI7O0FBRUE7O0VBRUUsV0FBVztFQUNYLFdBQVc7QUFDYjs7QUFFQSxpQkFBaUIsU0FBUztFQUN4QixXQUFXLENBQUM7O0FBRWQsUUFBUSx3QkFBd0I7SUFDNUIsYUFBYTtJQUNiLGlCQUFpQjtJQUNqQixnQkFBZ0I7SUFDaEIsYUFBYTtBQUNqQjs7QUFHQTtFQUNFLFVBQVU7RUFDVixXQUFXO0VBQ1gsc0JBQXNCO0VBQ3RCLFdBQVc7QUFDYjs7QUFDQTtFQUNFLFVBQVU7RUFDVixXQUFXO0VBQ1gscUJBQXFCO0VBQ3JCLFdBQVc7QUFDYjs7QUFDQTtFQUNFLGtCQUFrQjtFQUNsQixjQUFjO0VBQ2QsWUFBWTtFQUNaLFlBQVk7RUFDWixXQUFXO0VBQ1gsU0FBUztBQUNYIiwiZmlsZSI6InNpbXBsZWdyYXBoLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIub3V0ZXJcclxue1xyXG4gIG1hcmdpbjogMTBweDtcclxufVxyXG5cclxuLmRlbW8tY2hhcnQgXHJcbntcclxuICAgIG1heC13aWR0aDogMTAwMHB4O1xyXG4gICAgbWluLWhlaWdodDogNjAwcHg7XHJcbiAgICBtYXJnaW46IDEwcHggYXV0bztcclxuICAgIG92ZXJmbG93OiBhdXRvO1xyXG4gICAgYm9yZGVyOiAxcHggc29saWQgc3RlZWxibHVlO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDI0NSwgMjQ1LCAyNDUpO1xyXG4gICAgcGFkZGluZzogMTBweDtcclxuICAgIC8qYm9yZGVyLXJhZGl1czogNXB4OyovXHJcbn1cclxuXHJcbi5ncmFwaFxyXG57XHJcbiAgY2xlYXI6IGJvdGg7XHJcbiAgd2lkdGg6NzAlO1xyXG4gIG1hcmdpbi1yaWdodDoyJTtcclxuICBmbG9hdDogbGVmdDtcclxufVxyXG5cclxuLmhlYWRlclxyXG57XHJcbiAgYm9yZGVyOiBzb2xpZCwgYmxhY2s7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjphcXVhO1xyXG59XHJcblxyXG4uaGVhZGVyT3B0aW9uXHJcbntcclxuICBmbG9hdDogbGVmdDtcclxuICBtYXJnaW46IDJweDtcclxufVxyXG5cclxuLmNyYXdsaW5nLWxpc3QgeyB3aWR0aDoyNyU7XHJcbiAgZmxvYXQ6IGxlZnQ7fVxyXG5cclxuLmJ0biB7ICBiYWNrZ3JvdW5kLWNvbG9yOiBwdXJwbGU7XHJcbiAgICBjb2xvcjogcHVycGxlO1xyXG4gICAgbWF4LWhlaWdodDogMTAwcHg7XHJcbiAgICBtYXgtd2lkdGg6IDMwMHB4O1xyXG4gICAgZGlzcGxheTogZmxleDtcclxufVxyXG5cclxuXHJcbi5zZWNvbmRfZGl2IHtcclxuICB3aWR0aDo1MHB4OyBcclxuICBoZWlnaHQ6NTBweDsgXHJcbiAgYmFja2dyb3VuZC1jb2xvcjpncmVlbjtcclxuICBmbG9hdDogbGVmdDtcclxufSBcclxuLnRoaXJkX2RpdiB7XHJcbiAgd2lkdGg6NTBweDsgXHJcbiAgaGVpZ2h0OjUwcHg7IFxyXG4gIGJhY2tncm91bmQtY29sb3I6Ymx1ZTtcclxuICBmbG9hdDogbGVmdDtcclxufVxyXG4uY2xlYXJmaXg6YWZ0ZXIge1xyXG4gIHZpc2liaWxpdHk6IGhpZGRlbjtcclxuICBkaXNwbGF5OiBibG9jaztcclxuICBmb250LXNpemU6IDA7XHJcbiAgY29udGVudDogXCIgXCI7XHJcbiAgY2xlYXI6IGJvdGg7XHJcbiAgaGVpZ2h0OiAwO1xyXG59Il19 */\"] });\r\n"]},"metadata":{},"sourceType":"module"}